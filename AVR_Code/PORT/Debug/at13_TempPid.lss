
at13_TempPid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000804  00800060  00000934  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800864  00800864  000011cc  2**0
                  ALLOC
  3 .stab         000012a8  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ad0  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	67 c1       	rjmp	.+718    	; 0x2d8 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	8d c1       	rjmp	.+794    	; 0x32e <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	18 e0       	ldi	r17, 0x08	; 8
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e3       	ldi	r30, 0x34	; 52
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	18 e0       	ldi	r17, 0x08	; 8
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b8 e0       	ldi	r27, 0x08	; 8
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 38       	cpi	r26, 0x81	; 129
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	e8 d1       	rcall	.+976    	; 0x42a <main>
  5a:	6a c4       	rjmp	.+2260   	; 0x930 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Init>:
#define TIME_INTERVAL 3125 // było 157

/*! \brief Init of PID controller demo
 */
void Init(void)
{
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  pid_Init(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR , K_D * SCALING_FACTOR , &pidData);
  66:	2f e6       	ldi	r18, 0x6F	; 111
  68:	38 e0       	ldi	r19, 0x08	; 8
  6a:	80 e8       	ldi	r24, 0x80	; 128
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	70 e0       	ldi	r23, 0x00	; 0
  72:	40 e0       	ldi	r20, 0x00	; 0
  74:	50 e0       	ldi	r21, 0x00	; 0
  76:	06 d2       	rcall	.+1036   	; 0x484 <pid_Init>

  // Set up timer, enable timer/counte 0 overflow interrupt
  // Muszę poprawić - bo zmieniłem procka - więc zmienił sie rejestr.
  TCCR1B = /*(1<<CS10)|(1<<CS11)|*/ (1<<CS12);	// Prescaller
  78:	8e e4       	ldi	r24, 0x4E	; 78
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	24 e0       	ldi	r18, 0x04	; 4
  7e:	fc 01       	movw	r30, r24
  80:	20 83       	st	Z, r18
  TIMSK = (1<<TOIE0);
  82:	89 e5       	ldi	r24, 0x59	; 89
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	fc 01       	movw	r30, r24
  8a:	20 83       	st	Z, r18
  TCNT0 = 0;
  8c:	82 e5       	ldi	r24, 0x52	; 82
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	fc 01       	movw	r30, r24
  92:	10 82       	st	Z, r1
}
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	08 95       	ret

0000009a <Get_Reference>:


int16_t Get_Reference(void)
{
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	00 d0       	rcall	.+0      	; 0xa0 <Get_Reference+0x6>
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	uint16_t nastawa_temp=0;
  a4:	1a 82       	std	Y+2, r1	; 0x02
  a6:	19 82       	std	Y+1, r1	; 0x01
	if(moreSec<(156))
  a8:	80 91 66 08 	lds	r24, 0x0866
  ac:	90 91 67 08 	lds	r25, 0x0867
  b0:	8c 39       	cpi	r24, 0x9C	; 156
  b2:	91 05       	cpc	r25, r1
  b4:	68 f4       	brcc	.+26     	; 0xd0 <Get_Reference+0x36>
	{
		nastawa_temp=moreSec+tempPokojowa;
  b6:	20 91 66 08 	lds	r18, 0x0866
  ba:	30 91 67 08 	lds	r19, 0x0867
  be:	80 91 60 00 	lds	r24, 0x0060
  c2:	90 91 61 00 	lds	r25, 0x0061
  c6:	82 0f       	add	r24, r18
  c8:	93 1f       	adc	r25, r19
  ca:	9a 83       	std	Y+2, r25	; 0x02
  cc:	89 83       	std	Y+1, r24	; 0x01
  ce:	3d c0       	rjmp	.+122    	; 0x14a <Get_Reference+0xb0>
	}
	else if(moreSec<(2*60+156))
  d0:	80 91 66 08 	lds	r24, 0x0866
  d4:	90 91 67 08 	lds	r25, 0x0867
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	84 31       	cpi	r24, 0x14	; 20
  dc:	92 07       	cpc	r25, r18
  de:	38 f4       	brcc	.+14     	; 0xee <Get_Reference+0x54>
	{
		nastawa_temp=tempSuszenia;
  e0:	80 91 62 00 	lds	r24, 0x0062
  e4:	90 91 63 00 	lds	r25, 0x0063
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	2e c0       	rjmp	.+92     	; 0x14a <Get_Reference+0xb0>
	}
	else if(moreSec<(80+2*60+156))
  ee:	80 91 66 08 	lds	r24, 0x0866
  f2:	90 91 67 08 	lds	r25, 0x0867
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	84 36       	cpi	r24, 0x64	; 100
  fa:	92 07       	cpc	r25, r18
  fc:	78 f4       	brcc	.+30     	; 0x11c <Get_Reference+0x82>
	{
		nastawa_temp=(moreSec-2*60-156)+tempSuszenia;
  fe:	20 91 66 08 	lds	r18, 0x0866
 102:	30 91 67 08 	lds	r19, 0x0867
 106:	80 91 62 00 	lds	r24, 0x0062
 10a:	90 91 63 00 	lds	r25, 0x0063
 10e:	82 0f       	add	r24, r18
 110:	93 1f       	adc	r25, r19
 112:	84 51       	subi	r24, 0x14	; 20
 114:	91 40       	sbci	r25, 0x01	; 1
 116:	9a 83       	std	Y+2, r25	; 0x02
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	17 c0       	rjmp	.+46     	; 0x14a <Get_Reference+0xb0>
	}
	else if(moreSec<(60+80+2*60+156))
 11c:	80 91 66 08 	lds	r24, 0x0866
 120:	90 91 67 08 	lds	r25, 0x0867
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	80 3a       	cpi	r24, 0xA0	; 160
 128:	92 07       	cpc	r25, r18
 12a:	48 f4       	brcc	.+18     	; 0x13e <Get_Reference+0xa4>
	{
		nastawa_temp=80+tempSuszenia;
 12c:	80 91 62 00 	lds	r24, 0x0062
 130:	90 91 63 00 	lds	r25, 0x0063
 134:	80 5b       	subi	r24, 0xB0	; 176
 136:	9f 4f       	sbci	r25, 0xFF	; 255
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	06 c0       	rjmp	.+12     	; 0x14a <Get_Reference+0xb0>
	}
	else
	{
		nastawa_temp=tempPokojowa;
 13e:	80 91 60 00 	lds	r24, 0x0060
 142:	90 91 61 00 	lds	r25, 0x0061
 146:	9a 83       	std	Y+2, r25	; 0x02
 148:	89 83       	std	Y+1, r24	; 0x01
	}
  return nastawa_temp;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
}
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	cf 91       	pop	r28
 154:	df 91       	pop	r29
 156:	08 95       	ret

00000158 <Get_Measurement>:

int16_t Get_Measurement(void)
{
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC);
 160:	86 e2       	ldi	r24, 0x26	; 38
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	26 e2       	ldi	r18, 0x26	; 38
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	20 81       	ld	r18, Z
 16c:	20 64       	ori	r18, 0x40	; 64
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));
 172:	00 00       	nop
 174:	86 e2       	ldi	r24, 0x26	; 38
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	80 74       	andi	r24, 0x40	; 64
 182:	90 70       	andi	r25, 0x00	; 0
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	b1 f7       	brne	.-20     	; 0x174 <Get_Measurement+0x1c>
	/* Odnosimy się do stablicowanych wartości PT1000 - tabela jest specjalnie
	 * zrobiona pod 10 bitową dokładność ADC
	 */
	return PT1000[ADC];
 188:	84 e2       	ldi	r24, 0x24	; 36
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	80 81       	ld	r24, Z
 190:	91 81       	ldd	r25, Z+1	; 0x01
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	8c 59       	subi	r24, 0x9C	; 156
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	fc 01       	movw	r30, r24
 19c:	80 81       	ld	r24, Z
 19e:	91 81       	ldd	r25, Z+1	; 0x01
}
 1a0:	cf 91       	pop	r28
 1a2:	df 91       	pop	r29
 1a4:	08 95       	ret

000001a6 <adc_on>:

void adc_on( uint8_t input )
{
 1a6:	df 93       	push	r29
 1a8:	cf 93       	push	r28
 1aa:	0f 92       	push	r0
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX|=(1<<REFS0);											// internal reference voltage
 1b2:	87 e2       	ldi	r24, 0x27	; 39
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	27 e2       	ldi	r18, 0x27	; 39
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	f9 01       	movw	r30, r18
 1bc:	20 81       	ld	r18, Z
 1be:	20 64       	ori	r18, 0x40	; 64
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
	switch(input)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	91 05       	cpc	r25, r1
 1ce:	b9 f0       	breq	.+46     	; 0x1fe <adc_on+0x58>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	91 05       	cpc	r25, r1
 1d4:	1c f4       	brge	.+6      	; 0x1dc <adc_on+0x36>
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	41 f0       	breq	.+16     	; 0x1ea <adc_on+0x44>
 1da:	41 c0       	rjmp	.+130    	; 0x25e <adc_on+0xb8>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	91 05       	cpc	r25, r1
 1e0:	09 f1       	breq	.+66     	; 0x224 <adc_on+0x7e>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	91 05       	cpc	r25, r1
 1e6:	89 f1       	breq	.+98     	; 0x24a <adc_on+0xa4>
 1e8:	3a c0       	rjmp	.+116    	; 0x25e <adc_on+0xb8>
	{															// choose your output
		case 0: ADMUX&=~((1<<MUX1)|(1<<MUX0)); break;				// PB5
 1ea:	87 e2       	ldi	r24, 0x27	; 39
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	27 e2       	ldi	r18, 0x27	; 39
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	f9 01       	movw	r30, r18
 1f4:	20 81       	ld	r18, Z
 1f6:	2c 7f       	andi	r18, 0xFC	; 252
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
 1fc:	30 c0       	rjmp	.+96     	; 0x25e <adc_on+0xb8>
		case 1: ADMUX&=~(1<<MUX1); ADMUX|=(1<<MUX0); break;		// PB2
 1fe:	87 e2       	ldi	r24, 0x27	; 39
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	27 e2       	ldi	r18, 0x27	; 39
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	2d 7f       	andi	r18, 0xFD	; 253
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
 210:	87 e2       	ldi	r24, 0x27	; 39
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	27 e2       	ldi	r18, 0x27	; 39
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	20 81       	ld	r18, Z
 21c:	21 60       	ori	r18, 0x01	; 1
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
 222:	1d c0       	rjmp	.+58     	; 0x25e <adc_on+0xb8>
		case 2: ADMUX|=(1<<MUX1); ADMUX&=~(1<<MUX0); break;		// PB4
 224:	87 e2       	ldi	r24, 0x27	; 39
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	27 e2       	ldi	r18, 0x27	; 39
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	20 81       	ld	r18, Z
 230:	22 60       	ori	r18, 0x02	; 2
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 236:	87 e2       	ldi	r24, 0x27	; 39
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	27 e2       	ldi	r18, 0x27	; 39
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	20 81       	ld	r18, Z
 242:	2e 7f       	andi	r18, 0xFE	; 254
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
 248:	0a c0       	rjmp	.+20     	; 0x25e <adc_on+0xb8>
		case 3: ADMUX|=(1<<MUX1)|(1<<MUX0); break;					// PB3
 24a:	87 e2       	ldi	r24, 0x27	; 39
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	27 e2       	ldi	r18, 0x27	; 39
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	20 81       	ld	r18, Z
 256:	23 60       	ori	r18, 0x03	; 3
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
 25c:	00 00       	nop
	}
//	ADMUX|=(1<<ADLAR);											// 10 bit in use
	ADCSRA|=(1<<ADEN);											// ADC enable
 25e:	86 e2       	ldi	r24, 0x26	; 38
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	26 e2       	ldi	r18, 0x26	; 38
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	f9 01       	movw	r30, r18
 268:	20 81       	ld	r18, Z
 26a:	20 68       	ori	r18, 0x80	; 128
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
	ADCSRA|=(1<<ADPS1);											// Multiplexer 4 - ale zmienic trzeba do 8mhz
 270:	86 e2       	ldi	r24, 0x26	; 38
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	26 e2       	ldi	r18, 0x26	; 38
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	f9 01       	movw	r30, r18
 27a:	20 81       	ld	r18, Z
 27c:	22 60       	ori	r18, 0x02	; 2
 27e:	fc 01       	movw	r30, r24
 280:	20 83       	st	Z, r18
}
 282:	0f 90       	pop	r0
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <pwm_on>:

void pwm_on()
{
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
	TCCR2|=(1<<WGM21)|(1<<WGM20);	// Fast PWM
 292:	85 e4       	ldi	r24, 0x45	; 69
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	25 e4       	ldi	r18, 0x45	; 69
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	20 81       	ld	r18, Z
 29e:	28 64       	ori	r18, 0x48	; 72
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
//	TCCR2|=(1<<COM21);				// OC2 not in use.
	// Prescaller: 1,8,32,64,128,256,1024
	TCCR2|=(/*(1<<CS22)|*/(1<<CS21)|(1<<CS20));		// Prescaller 32
 2a4:	85 e4       	ldi	r24, 0x45	; 69
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	25 e4       	ldi	r18, 0x45	; 69
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	f9 01       	movw	r30, r18
 2ae:	20 81       	ld	r18, Z
 2b0:	23 60       	ori	r18, 0x03	; 3
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
	TIMSK|=(1<<TOIE2);
 2b6:	89 e5       	ldi	r24, 0x59	; 89
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	29 e5       	ldi	r18, 0x59	; 89
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	f9 01       	movw	r30, r18
 2c0:	20 81       	ld	r18, Z
 2c2:	20 64       	ori	r18, 0x40	; 64
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 83       	st	Z, r18
	OCR2=250;	// Daje 8M/1024/250 => f=32.25 t=0.032
 2c8:	83 e4       	ldi	r24, 0x43	; 67
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	2a ef       	ldi	r18, 0xFA	; 250
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
				// ale  8M/32/250 => daje 0.001 równo!
				// Wybrane 32 ;]
}
 2d2:	cf 91       	pop	r28
 2d4:	df 91       	pop	r29
 2d6:	08 95       	ret

000002d8 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	df 93       	push	r29
 2e8:	cf 93       	push	r28
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
	cli();
 2ee:	f8 94       	cli
	if(czasik<100) czasik++;
 2f0:	80 91 68 08 	lds	r24, 0x0868
 2f4:	90 91 69 08 	lds	r25, 0x0869
 2f8:	84 36       	cpi	r24, 0x64	; 100
 2fa:	91 05       	cpc	r25, r1
 2fc:	50 f4       	brcc	.+20     	; 0x312 <__vector_4+0x3a>
 2fe:	80 91 68 08 	lds	r24, 0x0868
 302:	90 91 69 08 	lds	r25, 0x0869
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	90 93 69 08 	sts	0x0869, r25
 30c:	80 93 68 08 	sts	0x0868, r24
 310:	04 c0       	rjmp	.+8      	; 0x31a <__vector_4+0x42>
	else czasik=0;
 312:	10 92 69 08 	sts	0x0869, r1
 316:	10 92 68 08 	sts	0x0868, r1
	sei();
 31a:	78 94       	sei
}
 31c:	cf 91       	pop	r28
 31e:	df 91       	pop	r29
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_9>:

/*! \brief Timer interrupt to control the sampling interval
 */
ISR(TIMER0_OVF_vect)	// void TIMER0_OVF_ISR( void )
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	2f 93       	push	r18
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	df 93       	push	r29
 340:	cf 93       	push	r28
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
	cli();
 346:	f8 94       	cli
  static uint16_t i = 0, a=0;
  if(i < TIME_INTERVAL)
 348:	80 91 6b 08 	lds	r24, 0x086B
 34c:	90 91 6c 08 	lds	r25, 0x086C
 350:	2c e0       	ldi	r18, 0x0C	; 12
 352:	85 33       	cpi	r24, 0x35	; 53
 354:	92 07       	cpc	r25, r18
 356:	50 f4       	brcc	.+20     	; 0x36c <__vector_9+0x3e>
    i++;
 358:	80 91 6b 08 	lds	r24, 0x086B
 35c:	90 91 6c 08 	lds	r25, 0x086C
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	90 93 6c 08 	sts	0x086C, r25
 366:	80 93 6b 08 	sts	0x086B, r24
 36a:	09 c0       	rjmp	.+18     	; 0x37e <__vector_9+0x50>
  else{
    gFlags.pidTimer = TRUE;
 36c:	80 91 6a 08 	lds	r24, 0x086A
 370:	81 60       	ori	r24, 0x01	; 1
 372:	80 93 6a 08 	sts	0x086A, r24
    i = 0;
 376:	10 92 6c 08 	sts	0x086C, r1
 37a:	10 92 6b 08 	sts	0x086B, r1
  }
  // Odliczanie sekund, można jeszcze dać moreSec/60 i będą minuty tylko
  // że to wogóle nie potrzebne do mojego projektu :)
  if(a<31372)
 37e:	80 91 6d 08 	lds	r24, 0x086D
 382:	90 91 6e 08 	lds	r25, 0x086E
 386:	2a e7       	ldi	r18, 0x7A	; 122
 388:	8c 38       	cpi	r24, 0x8C	; 140
 38a:	92 07       	cpc	r25, r18
 38c:	50 f4       	brcc	.+20     	; 0x3a2 <__vector_9+0x74>
  {
	  lessSec++;
 38e:	80 91 64 08 	lds	r24, 0x0864
 392:	90 91 65 08 	lds	r25, 0x0865
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	90 93 65 08 	sts	0x0865, r25
 39c:	80 93 64 08 	sts	0x0864, r24
 3a0:	11 c0       	rjmp	.+34     	; 0x3c4 <__vector_9+0x96>
  }else{
	  a=0;
 3a2:	10 92 6e 08 	sts	0x086E, r1
 3a6:	10 92 6d 08 	sts	0x086D, r1
	  lessSec=0;
 3aa:	10 92 65 08 	sts	0x0865, r1
 3ae:	10 92 64 08 	sts	0x0864, r1
	  moreSec++;
 3b2:	80 91 66 08 	lds	r24, 0x0866
 3b6:	90 91 67 08 	lds	r25, 0x0867
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	90 93 67 08 	sts	0x0867, r25
 3c0:	80 93 66 08 	sts	0x0866, r24
  }
  sei();
 3c4:	78 94       	sei
}
 3c6:	cf 91       	pop	r28
 3c8:	df 91       	pop	r29
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <Set_Input>:

/* Biblioteczny input do systemu - tj tu będę wykorzstywał wartości PID'a
 * Na razie wybieram 10Hz sterowanie Triakiem (Wzgl. 50Hz to zawsze 5 okresów
 * a steruję obiektem rezystancyjnym więc może będzie ok */
void Set_Input(int16_t inputValue)
{
 3da:	df 93       	push	r29
 3dc:	cf 93       	push	r28
 3de:	00 d0       	rcall	.+0      	; 0x3e0 <Set_Input+0x6>
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	9a 83       	std	Y+2, r25	; 0x02
 3e6:	89 83       	std	Y+1, r24	; 0x01
	// TODO Oh dear - to trzeba jakoś sensownie zrobić - tylko nie mam teraz pomysłu.
	if(inputValue < czasik)
 3e8:	29 81       	ldd	r18, Y+1	; 0x01
 3ea:	3a 81       	ldd	r19, Y+2	; 0x02
 3ec:	80 91 68 08 	lds	r24, 0x0868
 3f0:	90 91 69 08 	lds	r25, 0x0869
 3f4:	28 17       	cp	r18, r24
 3f6:	39 07       	cpc	r19, r25
 3f8:	50 f4       	brcc	.+20     	; 0x40e <Set_Input+0x34>
		PORTC|=(1<<PC5);
 3fa:	85 e3       	ldi	r24, 0x35	; 53
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	25 e3       	ldi	r18, 0x35	; 53
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	f9 01       	movw	r30, r18
 404:	20 81       	ld	r18, Z
 406:	20 62       	ori	r18, 0x20	; 32
 408:	fc 01       	movw	r30, r24
 40a:	20 83       	st	Z, r18
 40c:	09 c0       	rjmp	.+18     	; 0x420 <Set_Input+0x46>
	else PORTC&=~(1<<PC5);
 40e:	85 e3       	ldi	r24, 0x35	; 53
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	25 e3       	ldi	r18, 0x35	; 53
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	f9 01       	movw	r30, r18
 418:	20 81       	ld	r18, Z
 41a:	2f 7d       	andi	r18, 0xDF	; 223
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
}
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	cf 91       	pop	r28
 426:	df 91       	pop	r29
 428:	08 95       	ret

0000042a <main>:

/*! \brief Demo of PID controller
 */
int main()
{
 42a:	df 93       	push	r29
 42c:	cf 93       	push	r28
 42e:	00 d0       	rcall	.+0      	; 0x430 <main+0x6>
 430:	00 d0       	rcall	.+0      	; 0x432 <main+0x8>
 432:	00 d0       	rcall	.+0      	; 0x434 <main+0xa>
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
	adc_on(1);
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	b5 de       	rcall	.-662    	; 0x1a6 <adc_on>
	pwm_on();
 43c:	26 df       	rcall	.-436    	; 0x28a <pwm_on>
  int16_t referenceValue, measurementValue, inputValue;
  Init();
 43e:	0f de       	rcall	.-994    	; 0x5e <Init>
  sei();
 440:	78 94       	sei
 442:	01 c0       	rjmp	.+2      	; 0x446 <main+0x1c>

      Set_Input(inputValue);

      gFlags.pidTimer = FALSE;
    }
  }
 444:	00 00       	nop

  while(1)
 {

    // Run PID calculations once every PID timer timeout
    if(gFlags.pidTimer)
 446:	80 91 6a 08 	lds	r24, 0x086A
 44a:	81 70       	andi	r24, 0x01	; 1
 44c:	88 23       	and	r24, r24
 44e:	d1 f3       	breq	.-12     	; 0x444 <main+0x1a>
    {
      referenceValue = Get_Reference();
 450:	24 de       	rcall	.-952    	; 0x9a <Get_Reference>
 452:	9a 83       	std	Y+2, r25	; 0x02
 454:	89 83       	std	Y+1, r24	; 0x01
      measurementValue = Get_Measurement();
 456:	80 de       	rcall	.-768    	; 0x158 <Get_Measurement>
 458:	9c 83       	std	Y+4, r25	; 0x04
 45a:	8b 83       	std	Y+3, r24	; 0x03

      inputValue = pid_Controller(referenceValue, measurementValue, &pidData);
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	4b 81       	ldd	r20, Y+3	; 0x03
 462:	5c 81       	ldd	r21, Y+4	; 0x04
 464:	2f e6       	ldi	r18, 0x6F	; 111
 466:	38 e0       	ldi	r19, 0x08	; 8
 468:	ba 01       	movw	r22, r20
 46a:	a9 01       	movw	r20, r18
 46c:	74 d0       	rcall	.+232    	; 0x556 <pid_Controller>
 46e:	9e 83       	std	Y+6, r25	; 0x06
 470:	8d 83       	std	Y+5, r24	; 0x05

      Set_Input(inputValue);
 472:	8d 81       	ldd	r24, Y+5	; 0x05
 474:	9e 81       	ldd	r25, Y+6	; 0x06
 476:	b1 df       	rcall	.-158    	; 0x3da <Set_Input>

      gFlags.pidTimer = FALSE;
 478:	80 91 6a 08 	lds	r24, 0x086A
 47c:	8e 7f       	andi	r24, 0xFE	; 254
 47e:	80 93 6a 08 	sts	0x086A, r24
    }
  }
 482:	e1 cf       	rjmp	.-62     	; 0x446 <main+0x1c>

00000484 <pid_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
 484:	df 93       	push	r29
 486:	cf 93       	push	r28
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	28 97       	sbiw	r28, 0x08	; 8
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
 498:	9a 83       	std	Y+2, r25	; 0x02
 49a:	89 83       	std	Y+1, r24	; 0x01
 49c:	7c 83       	std	Y+4, r23	; 0x04
 49e:	6b 83       	std	Y+3, r22	; 0x03
 4a0:	5e 83       	std	Y+6, r21	; 0x06
 4a2:	4d 83       	std	Y+5, r20	; 0x05
 4a4:	38 87       	std	Y+8, r19	; 0x08
 4a6:	2f 83       	std	Y+7, r18	; 0x07
  // Start values for PID controller
  pid->sumError = 0;
 4a8:	8f 81       	ldd	r24, Y+7	; 0x07
 4aa:	98 85       	ldd	r25, Y+8	; 0x08
 4ac:	fc 01       	movw	r30, r24
 4ae:	12 82       	std	Z+2, r1	; 0x02
 4b0:	13 82       	std	Z+3, r1	; 0x03
 4b2:	14 82       	std	Z+4, r1	; 0x04
 4b4:	15 82       	std	Z+5, r1	; 0x05
  pid->lastProcessValue = 0;
 4b6:	8f 81       	ldd	r24, Y+7	; 0x07
 4b8:	98 85       	ldd	r25, Y+8	; 0x08
 4ba:	fc 01       	movw	r30, r24
 4bc:	11 82       	std	Z+1, r1	; 0x01
 4be:	10 82       	st	Z, r1
  // Tuning constants for PID loop
  pid->P_Factor = p_factor;
 4c0:	8f 81       	ldd	r24, Y+7	; 0x07
 4c2:	98 85       	ldd	r25, Y+8	; 0x08
 4c4:	29 81       	ldd	r18, Y+1	; 0x01
 4c6:	3a 81       	ldd	r19, Y+2	; 0x02
 4c8:	fc 01       	movw	r30, r24
 4ca:	37 83       	std	Z+7, r19	; 0x07
 4cc:	26 83       	std	Z+6, r18	; 0x06
  pid->I_Factor = i_factor;
 4ce:	8f 81       	ldd	r24, Y+7	; 0x07
 4d0:	98 85       	ldd	r25, Y+8	; 0x08
 4d2:	2b 81       	ldd	r18, Y+3	; 0x03
 4d4:	3c 81       	ldd	r19, Y+4	; 0x04
 4d6:	fc 01       	movw	r30, r24
 4d8:	31 87       	std	Z+9, r19	; 0x09
 4da:	20 87       	std	Z+8, r18	; 0x08
  pid->D_Factor = d_factor;
 4dc:	8f 81       	ldd	r24, Y+7	; 0x07
 4de:	98 85       	ldd	r25, Y+8	; 0x08
 4e0:	2d 81       	ldd	r18, Y+5	; 0x05
 4e2:	3e 81       	ldd	r19, Y+6	; 0x06
 4e4:	fc 01       	movw	r30, r24
 4e6:	33 87       	std	Z+11, r19	; 0x0b
 4e8:	22 87       	std	Z+10, r18	; 0x0a
  // Limits to avoid overflow
  pid->maxError = MAX_INT / (pid->P_Factor + 1);
 4ea:	8f 81       	ldd	r24, Y+7	; 0x07
 4ec:	98 85       	ldd	r25, Y+8	; 0x08
 4ee:	fc 01       	movw	r30, r24
 4f0:	86 81       	ldd	r24, Z+6	; 0x06
 4f2:	97 81       	ldd	r25, Z+7	; 0x07
 4f4:	9c 01       	movw	r18, r24
 4f6:	2f 5f       	subi	r18, 0xFF	; 255
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	9f e7       	ldi	r25, 0x7F	; 127
 4fe:	b9 01       	movw	r22, r18
 500:	b3 d1       	rcall	.+870    	; 0x868 <__divmodhi4>
 502:	9b 01       	movw	r18, r22
 504:	8f 81       	ldd	r24, Y+7	; 0x07
 506:	98 85       	ldd	r25, Y+8	; 0x08
 508:	fc 01       	movw	r30, r24
 50a:	35 87       	std	Z+13, r19	; 0x0d
 50c:	24 87       	std	Z+12, r18	; 0x0c
  pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
 50e:	8f 81       	ldd	r24, Y+7	; 0x07
 510:	98 85       	ldd	r25, Y+8	; 0x08
 512:	fc 01       	movw	r30, r24
 514:	80 85       	ldd	r24, Z+8	; 0x08
 516:	91 85       	ldd	r25, Z+9	; 0x09
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	9c 01       	movw	r18, r24
 51c:	44 27       	eor	r20, r20
 51e:	37 fd       	sbrc	r19, 7
 520:	40 95       	com	r20
 522:	54 2f       	mov	r21, r20
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	9f ef       	ldi	r25, 0xFF	; 255
 528:	af ef       	ldi	r26, 0xFF	; 255
 52a:	bf e3       	ldi	r27, 0x3F	; 63
 52c:	bc 01       	movw	r22, r24
 52e:	cd 01       	movw	r24, r26
 530:	ae d1       	rcall	.+860    	; 0x88e <__divmodsi4>
 532:	da 01       	movw	r26, r20
 534:	c9 01       	movw	r24, r18
 536:	2f 81       	ldd	r18, Y+7	; 0x07
 538:	38 85       	ldd	r19, Y+8	; 0x08
 53a:	f9 01       	movw	r30, r18
 53c:	86 87       	std	Z+14, r24	; 0x0e
 53e:	97 87       	std	Z+15, r25	; 0x0f
 540:	a0 8b       	std	Z+16, r26	; 0x10
 542:	b1 8b       	std	Z+17, r27	; 0x11
}
 544:	28 96       	adiw	r28, 0x08	; 8
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	f8 94       	cli
 54a:	de bf       	out	0x3e, r29	; 62
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	cd bf       	out	0x3d, r28	; 61
 550:	cf 91       	pop	r28
 552:	df 91       	pop	r29
 554:	08 95       	ret

00000556 <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
 556:	df 93       	push	r29
 558:	cf 93       	push	r28
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	68 97       	sbiw	r28, 0x18	; 24
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	f8 94       	cli
 564:	de bf       	out	0x3e, r29	; 62
 566:	0f be       	out	0x3f, r0	; 63
 568:	cd bf       	out	0x3d, r28	; 61
 56a:	9c 8b       	std	Y+20, r25	; 0x14
 56c:	8b 8b       	std	Y+19, r24	; 0x13
 56e:	7e 8b       	std	Y+22, r23	; 0x16
 570:	6d 8b       	std	Y+21, r22	; 0x15
 572:	58 8f       	std	Y+24, r21	; 0x18
 574:	4f 8b       	std	Y+23, r20	; 0x17
  int16_t error, p_term, d_term;
  int32_t i_term, ret, temp;

  error = setPoint - processValue;
 576:	2b 89       	ldd	r18, Y+19	; 0x13
 578:	3c 89       	ldd	r19, Y+20	; 0x14
 57a:	8d 89       	ldd	r24, Y+21	; 0x15
 57c:	9e 89       	ldd	r25, Y+22	; 0x16
 57e:	a9 01       	movw	r20, r18
 580:	48 1b       	sub	r20, r24
 582:	59 0b       	sbc	r21, r25
 584:	ca 01       	movw	r24, r20
 586:	9c 87       	std	Y+12, r25	; 0x0c
 588:	8b 87       	std	Y+11, r24	; 0x0b

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError){
 58a:	8f 89       	ldd	r24, Y+23	; 0x17
 58c:	98 8d       	ldd	r25, Y+24	; 0x18
 58e:	fc 01       	movw	r30, r24
 590:	24 85       	ldd	r18, Z+12	; 0x0c
 592:	35 85       	ldd	r19, Z+13	; 0x0d
 594:	8b 85       	ldd	r24, Y+11	; 0x0b
 596:	9c 85       	ldd	r25, Y+12	; 0x0c
 598:	28 17       	cp	r18, r24
 59a:	39 07       	cpc	r19, r25
 59c:	2c f4       	brge	.+10     	; 0x5a8 <pid_Controller+0x52>
    p_term = MAX_INT;
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	9f e7       	ldi	r25, 0x7F	; 127
 5a2:	9a 83       	std	Y+2, r25	; 0x02
 5a4:	89 83       	std	Y+1, r24	; 0x01
 5a6:	23 c0       	rjmp	.+70     	; 0x5ee <pid_Controller+0x98>
  }
  else if (error < -pid_st->maxError){
 5a8:	8f 89       	ldd	r24, Y+23	; 0x17
 5aa:	98 8d       	ldd	r25, Y+24	; 0x18
 5ac:	fc 01       	movw	r30, r24
 5ae:	84 85       	ldd	r24, Z+12	; 0x0c
 5b0:	95 85       	ldd	r25, Z+13	; 0x0d
 5b2:	22 27       	eor	r18, r18
 5b4:	33 27       	eor	r19, r19
 5b6:	28 1b       	sub	r18, r24
 5b8:	39 0b       	sbc	r19, r25
 5ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 5bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 5be:	82 17       	cp	r24, r18
 5c0:	93 07       	cpc	r25, r19
 5c2:	2c f4       	brge	.+10     	; 0x5ce <pid_Controller+0x78>
    p_term = -MAX_INT;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e8       	ldi	r25, 0x80	; 128
 5c8:	9a 83       	std	Y+2, r25	; 0x02
 5ca:	89 83       	std	Y+1, r24	; 0x01
 5cc:	10 c0       	rjmp	.+32     	; 0x5ee <pid_Controller+0x98>
  }
  else{
    p_term = pid_st->P_Factor * error;
 5ce:	8f 89       	ldd	r24, Y+23	; 0x17
 5d0:	98 8d       	ldd	r25, Y+24	; 0x18
 5d2:	fc 01       	movw	r30, r24
 5d4:	46 81       	ldd	r20, Z+6	; 0x06
 5d6:	57 81       	ldd	r21, Z+7	; 0x07
 5d8:	2b 85       	ldd	r18, Y+11	; 0x0b
 5da:	3c 85       	ldd	r19, Y+12	; 0x0c
 5dc:	42 9f       	mul	r20, r18
 5de:	c0 01       	movw	r24, r0
 5e0:	43 9f       	mul	r20, r19
 5e2:	90 0d       	add	r25, r0
 5e4:	52 9f       	mul	r21, r18
 5e6:	90 0d       	add	r25, r0
 5e8:	11 24       	eor	r1, r1
 5ea:	9a 83       	std	Y+2, r25	; 0x02
 5ec:	89 83       	std	Y+1, r24	; 0x01
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
 5ee:	8f 89       	ldd	r24, Y+23	; 0x17
 5f0:	98 8d       	ldd	r25, Y+24	; 0x18
 5f2:	fc 01       	movw	r30, r24
 5f4:	22 81       	ldd	r18, Z+2	; 0x02
 5f6:	33 81       	ldd	r19, Z+3	; 0x03
 5f8:	44 81       	ldd	r20, Z+4	; 0x04
 5fa:	55 81       	ldd	r21, Z+5	; 0x05
 5fc:	8b 85       	ldd	r24, Y+11	; 0x0b
 5fe:	9c 85       	ldd	r25, Y+12	; 0x0c
 600:	aa 27       	eor	r26, r26
 602:	97 fd       	sbrc	r25, 7
 604:	a0 95       	com	r26
 606:	ba 2f       	mov	r27, r26
 608:	82 0f       	add	r24, r18
 60a:	93 1f       	adc	r25, r19
 60c:	a4 1f       	adc	r26, r20
 60e:	b5 1f       	adc	r27, r21
 610:	8d 87       	std	Y+13, r24	; 0x0d
 612:	9e 87       	std	Y+14, r25	; 0x0e
 614:	af 87       	std	Y+15, r26	; 0x0f
 616:	b8 8b       	std	Y+16, r27	; 0x10
  if(temp > pid_st->maxSumError){
 618:	8f 89       	ldd	r24, Y+23	; 0x17
 61a:	98 8d       	ldd	r25, Y+24	; 0x18
 61c:	fc 01       	movw	r30, r24
 61e:	26 85       	ldd	r18, Z+14	; 0x0e
 620:	37 85       	ldd	r19, Z+15	; 0x0f
 622:	40 89       	ldd	r20, Z+16	; 0x10
 624:	51 89       	ldd	r21, Z+17	; 0x11
 626:	8d 85       	ldd	r24, Y+13	; 0x0d
 628:	9e 85       	ldd	r25, Y+14	; 0x0e
 62a:	af 85       	ldd	r26, Y+15	; 0x0f
 62c:	b8 89       	ldd	r27, Y+16	; 0x10
 62e:	28 17       	cp	r18, r24
 630:	39 07       	cpc	r19, r25
 632:	4a 07       	cpc	r20, r26
 634:	5b 07       	cpc	r21, r27
 636:	bc f4       	brge	.+46     	; 0x666 <pid_Controller+0x110>
    i_term = MAX_I_TERM;
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	9f ef       	ldi	r25, 0xFF	; 255
 63c:	af ef       	ldi	r26, 0xFF	; 255
 63e:	bf e3       	ldi	r27, 0x3F	; 63
 640:	8b 83       	std	Y+3, r24	; 0x03
 642:	9c 83       	std	Y+4, r25	; 0x04
 644:	ad 83       	std	Y+5, r26	; 0x05
 646:	be 83       	std	Y+6, r27	; 0x06
    pid_st->sumError = pid_st->maxSumError;
 648:	8f 89       	ldd	r24, Y+23	; 0x17
 64a:	98 8d       	ldd	r25, Y+24	; 0x18
 64c:	fc 01       	movw	r30, r24
 64e:	86 85       	ldd	r24, Z+14	; 0x0e
 650:	97 85       	ldd	r25, Z+15	; 0x0f
 652:	a0 89       	ldd	r26, Z+16	; 0x10
 654:	b1 89       	ldd	r27, Z+17	; 0x11
 656:	2f 89       	ldd	r18, Y+23	; 0x17
 658:	38 8d       	ldd	r19, Y+24	; 0x18
 65a:	f9 01       	movw	r30, r18
 65c:	82 83       	std	Z+2, r24	; 0x02
 65e:	93 83       	std	Z+3, r25	; 0x03
 660:	a4 83       	std	Z+4, r26	; 0x04
 662:	b5 83       	std	Z+5, r27	; 0x05
 664:	59 c0       	rjmp	.+178    	; 0x718 <pid_Controller+0x1c2>
  }
  else if(temp < -pid_st->maxSumError){
 666:	8f 89       	ldd	r24, Y+23	; 0x17
 668:	98 8d       	ldd	r25, Y+24	; 0x18
 66a:	fc 01       	movw	r30, r24
 66c:	86 85       	ldd	r24, Z+14	; 0x0e
 66e:	97 85       	ldd	r25, Z+15	; 0x0f
 670:	a0 89       	ldd	r26, Z+16	; 0x10
 672:	b1 89       	ldd	r27, Z+17	; 0x11
 674:	22 27       	eor	r18, r18
 676:	33 27       	eor	r19, r19
 678:	a9 01       	movw	r20, r18
 67a:	28 1b       	sub	r18, r24
 67c:	39 0b       	sbc	r19, r25
 67e:	4a 0b       	sbc	r20, r26
 680:	5b 0b       	sbc	r21, r27
 682:	8d 85       	ldd	r24, Y+13	; 0x0d
 684:	9e 85       	ldd	r25, Y+14	; 0x0e
 686:	af 85       	ldd	r26, Y+15	; 0x0f
 688:	b8 89       	ldd	r27, Y+16	; 0x10
 68a:	82 17       	cp	r24, r18
 68c:	93 07       	cpc	r25, r19
 68e:	a4 07       	cpc	r26, r20
 690:	b5 07       	cpc	r27, r21
 692:	f4 f4       	brge	.+60     	; 0x6d0 <pid_Controller+0x17a>
    i_term = -MAX_I_TERM;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	a0 e0       	ldi	r26, 0x00	; 0
 69a:	b0 ec       	ldi	r27, 0xC0	; 192
 69c:	8b 83       	std	Y+3, r24	; 0x03
 69e:	9c 83       	std	Y+4, r25	; 0x04
 6a0:	ad 83       	std	Y+5, r26	; 0x05
 6a2:	be 83       	std	Y+6, r27	; 0x06
    pid_st->sumError = -pid_st->maxSumError;
 6a4:	8f 89       	ldd	r24, Y+23	; 0x17
 6a6:	98 8d       	ldd	r25, Y+24	; 0x18
 6a8:	fc 01       	movw	r30, r24
 6aa:	86 85       	ldd	r24, Z+14	; 0x0e
 6ac:	97 85       	ldd	r25, Z+15	; 0x0f
 6ae:	a0 89       	ldd	r26, Z+16	; 0x10
 6b0:	b1 89       	ldd	r27, Z+17	; 0x11
 6b2:	b0 95       	com	r27
 6b4:	a0 95       	com	r26
 6b6:	90 95       	com	r25
 6b8:	81 95       	neg	r24
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	af 4f       	sbci	r26, 0xFF	; 255
 6be:	bf 4f       	sbci	r27, 0xFF	; 255
 6c0:	2f 89       	ldd	r18, Y+23	; 0x17
 6c2:	38 8d       	ldd	r19, Y+24	; 0x18
 6c4:	f9 01       	movw	r30, r18
 6c6:	82 83       	std	Z+2, r24	; 0x02
 6c8:	93 83       	std	Z+3, r25	; 0x03
 6ca:	a4 83       	std	Z+4, r26	; 0x04
 6cc:	b5 83       	std	Z+5, r27	; 0x05
 6ce:	24 c0       	rjmp	.+72     	; 0x718 <pid_Controller+0x1c2>
  }
  else{
    pid_st->sumError = temp;
 6d0:	2f 89       	ldd	r18, Y+23	; 0x17
 6d2:	38 8d       	ldd	r19, Y+24	; 0x18
 6d4:	8d 85       	ldd	r24, Y+13	; 0x0d
 6d6:	9e 85       	ldd	r25, Y+14	; 0x0e
 6d8:	af 85       	ldd	r26, Y+15	; 0x0f
 6da:	b8 89       	ldd	r27, Y+16	; 0x10
 6dc:	f9 01       	movw	r30, r18
 6de:	82 83       	std	Z+2, r24	; 0x02
 6e0:	93 83       	std	Z+3, r25	; 0x03
 6e2:	a4 83       	std	Z+4, r26	; 0x04
 6e4:	b5 83       	std	Z+5, r27	; 0x05
    i_term = pid_st->I_Factor * pid_st->sumError;
 6e6:	8f 89       	ldd	r24, Y+23	; 0x17
 6e8:	98 8d       	ldd	r25, Y+24	; 0x18
 6ea:	fc 01       	movw	r30, r24
 6ec:	80 85       	ldd	r24, Z+8	; 0x08
 6ee:	91 85       	ldd	r25, Z+9	; 0x09
 6f0:	aa 27       	eor	r26, r26
 6f2:	97 fd       	sbrc	r25, 7
 6f4:	a0 95       	com	r26
 6f6:	ba 2f       	mov	r27, r26
 6f8:	2f 89       	ldd	r18, Y+23	; 0x17
 6fa:	38 8d       	ldd	r19, Y+24	; 0x18
 6fc:	f9 01       	movw	r30, r18
 6fe:	22 81       	ldd	r18, Z+2	; 0x02
 700:	33 81       	ldd	r19, Z+3	; 0x03
 702:	44 81       	ldd	r20, Z+4	; 0x04
 704:	55 81       	ldd	r21, Z+5	; 0x05
 706:	bc 01       	movw	r22, r24
 708:	cd 01       	movw	r24, r26
 70a:	8f d0       	rcall	.+286    	; 0x82a <__mulsi3>
 70c:	dc 01       	movw	r26, r24
 70e:	cb 01       	movw	r24, r22
 710:	8b 83       	std	Y+3, r24	; 0x03
 712:	9c 83       	std	Y+4, r25	; 0x04
 714:	ad 83       	std	Y+5, r26	; 0x05
 716:	be 83       	std	Y+6, r27	; 0x06
  }

  // Calculate Dterm
  d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
 718:	8f 89       	ldd	r24, Y+23	; 0x17
 71a:	98 8d       	ldd	r25, Y+24	; 0x18
 71c:	fc 01       	movw	r30, r24
 71e:	42 85       	ldd	r20, Z+10	; 0x0a
 720:	53 85       	ldd	r21, Z+11	; 0x0b
 722:	8f 89       	ldd	r24, Y+23	; 0x17
 724:	98 8d       	ldd	r25, Y+24	; 0x18
 726:	fc 01       	movw	r30, r24
 728:	20 81       	ld	r18, Z
 72a:	31 81       	ldd	r19, Z+1	; 0x01
 72c:	8d 89       	ldd	r24, Y+21	; 0x15
 72e:	9e 89       	ldd	r25, Y+22	; 0x16
 730:	28 1b       	sub	r18, r24
 732:	39 0b       	sbc	r19, r25
 734:	42 9f       	mul	r20, r18
 736:	c0 01       	movw	r24, r0
 738:	43 9f       	mul	r20, r19
 73a:	90 0d       	add	r25, r0
 73c:	52 9f       	mul	r21, r18
 73e:	90 0d       	add	r25, r0
 740:	11 24       	eor	r1, r1
 742:	9a 8b       	std	Y+18, r25	; 0x12
 744:	89 8b       	std	Y+17, r24	; 0x11

  pid_st->lastProcessValue = processValue;
 746:	8f 89       	ldd	r24, Y+23	; 0x17
 748:	98 8d       	ldd	r25, Y+24	; 0x18
 74a:	2d 89       	ldd	r18, Y+21	; 0x15
 74c:	3e 89       	ldd	r19, Y+22	; 0x16
 74e:	fc 01       	movw	r30, r24
 750:	31 83       	std	Z+1, r19	; 0x01
 752:	20 83       	st	Z, r18

  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
 754:	89 81       	ldd	r24, Y+1	; 0x01
 756:	9a 81       	ldd	r25, Y+2	; 0x02
 758:	9c 01       	movw	r18, r24
 75a:	44 27       	eor	r20, r20
 75c:	37 fd       	sbrc	r19, 7
 75e:	40 95       	com	r20
 760:	54 2f       	mov	r21, r20
 762:	8b 81       	ldd	r24, Y+3	; 0x03
 764:	9c 81       	ldd	r25, Y+4	; 0x04
 766:	ad 81       	ldd	r26, Y+5	; 0x05
 768:	be 81       	ldd	r27, Y+6	; 0x06
 76a:	28 0f       	add	r18, r24
 76c:	39 1f       	adc	r19, r25
 76e:	4a 1f       	adc	r20, r26
 770:	5b 1f       	adc	r21, r27
 772:	89 89       	ldd	r24, Y+17	; 0x11
 774:	9a 89       	ldd	r25, Y+18	; 0x12
 776:	aa 27       	eor	r26, r26
 778:	97 fd       	sbrc	r25, 7
 77a:	a0 95       	com	r26
 77c:	ba 2f       	mov	r27, r26
 77e:	82 0f       	add	r24, r18
 780:	93 1f       	adc	r25, r19
 782:	a4 1f       	adc	r26, r20
 784:	b5 1f       	adc	r27, r21
 786:	20 e8       	ldi	r18, 0x80	; 128
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	40 e0       	ldi	r20, 0x00	; 0
 78c:	50 e0       	ldi	r21, 0x00	; 0
 78e:	bc 01       	movw	r22, r24
 790:	cd 01       	movw	r24, r26
 792:	7d d0       	rcall	.+250    	; 0x88e <__divmodsi4>
 794:	2f 83       	std	Y+7, r18	; 0x07
 796:	38 87       	std	Y+8, r19	; 0x08
 798:	49 87       	std	Y+9, r20	; 0x09
 79a:	5a 87       	std	Y+10, r21	; 0x0a
  if(ret > MAX_INT){
 79c:	8f 81       	ldd	r24, Y+7	; 0x07
 79e:	98 85       	ldd	r25, Y+8	; 0x08
 7a0:	a9 85       	ldd	r26, Y+9	; 0x09
 7a2:	ba 85       	ldd	r27, Y+10	; 0x0a
 7a4:	80 30       	cpi	r24, 0x00	; 0
 7a6:	f0 e8       	ldi	r31, 0x80	; 128
 7a8:	9f 07       	cpc	r25, r31
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	af 07       	cpc	r26, r31
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	bf 07       	cpc	r27, r31
 7b2:	4c f0       	brlt	.+18     	; 0x7c6 <pid_Controller+0x270>
    ret = MAX_INT;
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	9f e7       	ldi	r25, 0x7F	; 127
 7b8:	a0 e0       	ldi	r26, 0x00	; 0
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	8f 83       	std	Y+7, r24	; 0x07
 7be:	98 87       	std	Y+8, r25	; 0x08
 7c0:	a9 87       	std	Y+9, r26	; 0x09
 7c2:	ba 87       	std	Y+10, r27	; 0x0a
 7c4:	14 c0       	rjmp	.+40     	; 0x7ee <pid_Controller+0x298>
  }
  else if(ret < -MAX_INT){
 7c6:	8f 81       	ldd	r24, Y+7	; 0x07
 7c8:	98 85       	ldd	r25, Y+8	; 0x08
 7ca:	a9 85       	ldd	r26, Y+9	; 0x09
 7cc:	ba 85       	ldd	r27, Y+10	; 0x0a
 7ce:	81 30       	cpi	r24, 0x01	; 1
 7d0:	20 e8       	ldi	r18, 0x80	; 128
 7d2:	92 07       	cpc	r25, r18
 7d4:	2f ef       	ldi	r18, 0xFF	; 255
 7d6:	a2 07       	cpc	r26, r18
 7d8:	2f ef       	ldi	r18, 0xFF	; 255
 7da:	b2 07       	cpc	r27, r18
 7dc:	44 f4       	brge	.+16     	; 0x7ee <pid_Controller+0x298>
    ret = -MAX_INT;
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e8       	ldi	r25, 0x80	; 128
 7e2:	af ef       	ldi	r26, 0xFF	; 255
 7e4:	bf ef       	ldi	r27, 0xFF	; 255
 7e6:	8f 83       	std	Y+7, r24	; 0x07
 7e8:	98 87       	std	Y+8, r25	; 0x08
 7ea:	a9 87       	std	Y+9, r26	; 0x09
 7ec:	ba 87       	std	Y+10, r27	; 0x0a
  }

  return((int16_t)ret);
 7ee:	8f 81       	ldd	r24, Y+7	; 0x07
 7f0:	98 85       	ldd	r25, Y+8	; 0x08
}
 7f2:	68 96       	adiw	r28, 0x18	; 24
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	f8 94       	cli
 7f8:	de bf       	out	0x3e, r29	; 62
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	cd bf       	out	0x3d, r28	; 61
 7fe:	cf 91       	pop	r28
 800:	df 91       	pop	r29
 802:	08 95       	ret

00000804 <pid_Reset_Integrator>:
/*! \brief Resets the integrator.
 *
 *  Calling this function will reset the integrator in the PID regulator.
 */
void pid_Reset_Integrator(pidData_t *pid_st)
{
 804:	df 93       	push	r29
 806:	cf 93       	push	r28
 808:	00 d0       	rcall	.+0      	; 0x80a <pid_Reset_Integrator+0x6>
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
 80e:	9a 83       	std	Y+2, r25	; 0x02
 810:	89 83       	std	Y+1, r24	; 0x01
  pid_st->sumError = 0;
 812:	89 81       	ldd	r24, Y+1	; 0x01
 814:	9a 81       	ldd	r25, Y+2	; 0x02
 816:	fc 01       	movw	r30, r24
 818:	12 82       	std	Z+2, r1	; 0x02
 81a:	13 82       	std	Z+3, r1	; 0x03
 81c:	14 82       	std	Z+4, r1	; 0x04
 81e:	15 82       	std	Z+5, r1	; 0x05
}
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	cf 91       	pop	r28
 826:	df 91       	pop	r29
 828:	08 95       	ret

0000082a <__mulsi3>:
 82a:	62 9f       	mul	r22, r18
 82c:	d0 01       	movw	r26, r0
 82e:	73 9f       	mul	r23, r19
 830:	f0 01       	movw	r30, r0
 832:	82 9f       	mul	r24, r18
 834:	e0 0d       	add	r30, r0
 836:	f1 1d       	adc	r31, r1
 838:	64 9f       	mul	r22, r20
 83a:	e0 0d       	add	r30, r0
 83c:	f1 1d       	adc	r31, r1
 83e:	92 9f       	mul	r25, r18
 840:	f0 0d       	add	r31, r0
 842:	83 9f       	mul	r24, r19
 844:	f0 0d       	add	r31, r0
 846:	74 9f       	mul	r23, r20
 848:	f0 0d       	add	r31, r0
 84a:	65 9f       	mul	r22, r21
 84c:	f0 0d       	add	r31, r0
 84e:	99 27       	eor	r25, r25
 850:	72 9f       	mul	r23, r18
 852:	b0 0d       	add	r27, r0
 854:	e1 1d       	adc	r30, r1
 856:	f9 1f       	adc	r31, r25
 858:	63 9f       	mul	r22, r19
 85a:	b0 0d       	add	r27, r0
 85c:	e1 1d       	adc	r30, r1
 85e:	f9 1f       	adc	r31, r25
 860:	bd 01       	movw	r22, r26
 862:	cf 01       	movw	r24, r30
 864:	11 24       	eor	r1, r1
 866:	08 95       	ret

00000868 <__divmodhi4>:
 868:	97 fb       	bst	r25, 7
 86a:	09 2e       	mov	r0, r25
 86c:	07 26       	eor	r0, r23
 86e:	0a d0       	rcall	.+20     	; 0x884 <__divmodhi4_neg1>
 870:	77 fd       	sbrc	r23, 7
 872:	04 d0       	rcall	.+8      	; 0x87c <__divmodhi4_neg2>
 874:	27 d0       	rcall	.+78     	; 0x8c4 <__udivmodhi4>
 876:	06 d0       	rcall	.+12     	; 0x884 <__divmodhi4_neg1>
 878:	00 20       	and	r0, r0
 87a:	1a f4       	brpl	.+6      	; 0x882 <__divmodhi4_exit>

0000087c <__divmodhi4_neg2>:
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255

00000882 <__divmodhi4_exit>:
 882:	08 95       	ret

00000884 <__divmodhi4_neg1>:
 884:	f6 f7       	brtc	.-4      	; 0x882 <__divmodhi4_exit>
 886:	90 95       	com	r25
 888:	81 95       	neg	r24
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	08 95       	ret

0000088e <__divmodsi4>:
 88e:	97 fb       	bst	r25, 7
 890:	09 2e       	mov	r0, r25
 892:	05 26       	eor	r0, r21
 894:	0e d0       	rcall	.+28     	; 0x8b2 <__divmodsi4_neg1>
 896:	57 fd       	sbrc	r21, 7
 898:	04 d0       	rcall	.+8      	; 0x8a2 <__divmodsi4_neg2>
 89a:	28 d0       	rcall	.+80     	; 0x8ec <__udivmodsi4>
 89c:	0a d0       	rcall	.+20     	; 0x8b2 <__divmodsi4_neg1>
 89e:	00 1c       	adc	r0, r0
 8a0:	38 f4       	brcc	.+14     	; 0x8b0 <__divmodsi4_exit>

000008a2 <__divmodsi4_neg2>:
 8a2:	50 95       	com	r21
 8a4:	40 95       	com	r20
 8a6:	30 95       	com	r19
 8a8:	21 95       	neg	r18
 8aa:	3f 4f       	sbci	r19, 0xFF	; 255
 8ac:	4f 4f       	sbci	r20, 0xFF	; 255
 8ae:	5f 4f       	sbci	r21, 0xFF	; 255

000008b0 <__divmodsi4_exit>:
 8b0:	08 95       	ret

000008b2 <__divmodsi4_neg1>:
 8b2:	f6 f7       	brtc	.-4      	; 0x8b0 <__divmodsi4_exit>
 8b4:	90 95       	com	r25
 8b6:	80 95       	com	r24
 8b8:	70 95       	com	r23
 8ba:	61 95       	neg	r22
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	08 95       	ret

000008c4 <__udivmodhi4>:
 8c4:	aa 1b       	sub	r26, r26
 8c6:	bb 1b       	sub	r27, r27
 8c8:	51 e1       	ldi	r21, 0x11	; 17
 8ca:	07 c0       	rjmp	.+14     	; 0x8da <__udivmodhi4_ep>

000008cc <__udivmodhi4_loop>:
 8cc:	aa 1f       	adc	r26, r26
 8ce:	bb 1f       	adc	r27, r27
 8d0:	a6 17       	cp	r26, r22
 8d2:	b7 07       	cpc	r27, r23
 8d4:	10 f0       	brcs	.+4      	; 0x8da <__udivmodhi4_ep>
 8d6:	a6 1b       	sub	r26, r22
 8d8:	b7 0b       	sbc	r27, r23

000008da <__udivmodhi4_ep>:
 8da:	88 1f       	adc	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	5a 95       	dec	r21
 8e0:	a9 f7       	brne	.-22     	; 0x8cc <__udivmodhi4_loop>
 8e2:	80 95       	com	r24
 8e4:	90 95       	com	r25
 8e6:	bc 01       	movw	r22, r24
 8e8:	cd 01       	movw	r24, r26
 8ea:	08 95       	ret

000008ec <__udivmodsi4>:
 8ec:	a1 e2       	ldi	r26, 0x21	; 33
 8ee:	1a 2e       	mov	r1, r26
 8f0:	aa 1b       	sub	r26, r26
 8f2:	bb 1b       	sub	r27, r27
 8f4:	fd 01       	movw	r30, r26
 8f6:	0d c0       	rjmp	.+26     	; 0x912 <__udivmodsi4_ep>

000008f8 <__udivmodsi4_loop>:
 8f8:	aa 1f       	adc	r26, r26
 8fa:	bb 1f       	adc	r27, r27
 8fc:	ee 1f       	adc	r30, r30
 8fe:	ff 1f       	adc	r31, r31
 900:	a2 17       	cp	r26, r18
 902:	b3 07       	cpc	r27, r19
 904:	e4 07       	cpc	r30, r20
 906:	f5 07       	cpc	r31, r21
 908:	20 f0       	brcs	.+8      	; 0x912 <__udivmodsi4_ep>
 90a:	a2 1b       	sub	r26, r18
 90c:	b3 0b       	sbc	r27, r19
 90e:	e4 0b       	sbc	r30, r20
 910:	f5 0b       	sbc	r31, r21

00000912 <__udivmodsi4_ep>:
 912:	66 1f       	adc	r22, r22
 914:	77 1f       	adc	r23, r23
 916:	88 1f       	adc	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	1a 94       	dec	r1
 91c:	69 f7       	brne	.-38     	; 0x8f8 <__udivmodsi4_loop>
 91e:	60 95       	com	r22
 920:	70 95       	com	r23
 922:	80 95       	com	r24
 924:	90 95       	com	r25
 926:	9b 01       	movw	r18, r22
 928:	ac 01       	movw	r20, r24
 92a:	bd 01       	movw	r22, r26
 92c:	cf 01       	movw	r24, r30
 92e:	08 95       	ret

00000930 <_exit>:
 930:	f8 94       	cli

00000932 <__stop_program>:
 932:	ff cf       	rjmp	.-2      	; 0x932 <__stop_program>
