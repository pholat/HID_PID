Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_udivmodhi4.o)
                              ./n5110.o (__udivmodhi4)
/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
                              ./usbdrv/usbdrv.o (__do_copy_data)
/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
                              ./usbdrv/usbdrv.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

usbTxBuf            0xb               ./usbdrv/usbdrv.o
usbDeviceAddr       0x1               ./usbdrv/usbdrv.o
usbRxToken          0x1               ./usbdrv/usbdrv.o
usbInputBufOffset   0x1               ./usbdrv/usbdrv.o
usbMsgPtr           0x2               ./usbdrv/usbdrv.o
usbRxLen            0x1               ./usbdrv/usbdrv.o
usbNewDeviceAddr    0x1               ./usbdrv/usbdrv.o
usbCurrentTok       0x1               ./usbdrv/usbdrv.o
usbConfiguration    0x1               ./usbdrv/usbdrv.o
usbRxBuf            0x16              ./usbdrv/usbdrv.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00002000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
LOAD ./usbdrv/oddebug.o
LOAD ./usbdrv/usbdrv.o
LOAD ./usbdrv/usbdrvasm.o
LOAD ./adc.o
LOAD ./main.o
LOAD ./n5110.o
LOAD ./spi.o
LOAD /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0x91c
 *(.vectors)
 .vectors       0x00000000       0x26 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x00000026       0x48 ./usbdrv/usbdrv.o
                0x00000026                usbDescriptorString0
                0x0000002a                usbDescriptorStringVendor
                0x00000040                usbDescriptorStringDevice
                0x0000004a                usbDescriptorDevice
                0x0000005c                usbDescriptorConfiguration
                0x0000006e                . = ALIGN (0x2)
                0x0000006e                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000006e        0x0 linker stubs
 *(.trampolines*)
                0x0000006e                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000006e                __ctors_start = .
 *(.ctors)
                0x0000006e                __ctors_end = .
                0x0000006e                __dtors_start = .
 *(.dtors)
                0x0000006e                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000006e        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
                0x0000006e                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000006e        0xc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000007a       0x16 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
                0x0000007a                __do_copy_data
 .init4         0x00000090       0x10 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
                0x00000090                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000a0        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x000000a4        0x2 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
                0x000000a4                __vector_1
                0x000000a4                __vector_12
                0x000000a4                __bad_interrupt
                0x000000a4                __vector_6
                0x000000a4                __vector_3
                0x000000a4                __vector_11
                0x000000a4                __vector_13
                0x000000a4                __vector_17
                0x000000a4                __vector_7
                0x000000a4                __vector_5
                0x000000a4                __vector_4
                0x000000a4                __vector_9
                0x000000a4                __vector_15
                0x000000a4                __vector_8
                0x000000a4                __vector_14
                0x000000a4                __vector_10
                0x000000a4                __vector_16
                0x000000a4                __vector_18
 .text          0x000000a6        0x0 ./usbdrv/oddebug.o
 .text          0x000000a6        0x0 ./usbdrv/usbdrv.o
 .text          0x000000a6      0x28c ./usbdrv/usbdrvasm.o
                0x000000a6                usbCrc16
                0x000000d0                usbCrc16Append
                0x000000d8                __vector_2
 .text          0x00000332        0x0 ./adc.o
 .text          0x00000332        0x0 ./main.o
 .text          0x00000332        0x0 ./n5110.o
 .text          0x00000332        0x0 ./spi.o
 .text          0x00000332        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_udivmodhi4.o)
 .text          0x00000332        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .text          0x00000332        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
 .text          0x00000332        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
                0x00000332                . = ALIGN (0x2)
 *(.text.*)
 .text.usbPoll  0x00000332      0x202 ./usbdrv/usbdrv.o
                0x00000332                usbPoll
 .text.usbInit  0x00000534        0xe ./usbdrv/usbdrv.o
                0x00000534                usbInit
 .text.adc_on   0x00000542       0x14 ./adc.o
                0x00000542                adc_on
 .text.adc_one  0x00000556       0x24 ./adc.o
                0x00000556                adc_one
 .text.adc_multiple
                0x0000057a       0x52 ./adc.o
                0x0000057a                adc_multiple
 .text.adc_off  0x000005cc        0x4 ./adc.o
                0x000005cc                adc_off
 .text.usbFunctionSetup
                0x000005d0       0x3e ./main.o
                0x000005d0                usbFunctionSetup
 .text.usbFunctionWrite
                0x0000060e       0x36 ./main.o
                0x0000060e                usbFunctionWrite
 .text.main     0x00000644       0x60 ./main.o
                0x00000644                main
 .text.lcd_write_byte
                0x000006a4       0x16 ./n5110.o
                0x000006a4                lcd_write_byte
 .text.lcd_dot  0x000006ba       0x44 ./n5110.o
                0x000006ba                lcd_dot
 .text.lcd_char
                0x000006fe       0x52 ./n5110.o
                0x000006fe                lcd_char
 .text.lcd_string
                0x00000750       0x26 ./n5110.o
                0x00000750                lcd_string
 .text.lcd_place
                0x00000776       0x18 ./n5110.o
                0x00000776                lcd_place
 .text.lcd_clear
                0x0000078e       0x24 ./n5110.o
                0x0000078e                lcd_clear
 .text.lcd_init
                0x000007b2       0x6a ./n5110.o
                0x000007b2                lcd_init
 .text.lcd_int  0x0000081c       0x60 ./n5110.o
                0x0000081c                lcd_int
 .text.lcd_bin  0x0000087c       0x5a ./n5110.o
                0x0000087c                lcd_bin
 .text.spi_init
                0x000008d6       0x10 ./spi.o
                0x000008d6                spi_init
 .text.spi_write_byte
                0x000008e6        0xa ./spi.o
                0x000008e6                spi_write_byte
 .text.libgcc   0x000008f0       0x28 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_udivmodhi4.o)
                0x000008f0                __udivmodhi4
 .text.libgcc   0x00000918        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x00000918        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000918        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
                0x00000918                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000918        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
                0x00000918                exit
                0x00000918                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000918        0x4 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x0000091c                _etext = .

.data           0x00800060      0x1e6 load address 0x0000091c
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 .data          0x00800060        0x0 ./usbdrv/oddebug.o
 .data          0x00800060        0x0 ./usbdrv/usbdrv.o
 .data          0x00800060        0x0 ./usbdrv/usbdrvasm.o
 .data          0x00800060        0x0 ./adc.o
 .data          0x00800060        0x0 ./main.o
 .data          0x00800060        0x4 ./n5110.o
 .data          0x00800064        0x0 ./spi.o
 .data          0x00800064        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_udivmodhi4.o)
 .data          0x00800064        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .data          0x00800064        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
 .data          0x00800064        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
 *(.data*)
 .data.usbTxLen
                0x00800064        0x1 ./usbdrv/usbdrv.o
                0x00800064                usbTxLen
 .data.usbMsgLen
                0x00800065        0x1 ./usbdrv/usbdrv.o
 *(.rodata)
 *(.rodata*)
 .rodata.ASCII  0x00800066      0x1e0 ./n5110.o
 *(.gnu.linkonce.d*)
                0x00800246                . = ALIGN (0x2)
                0x00800246                _edata = .
                0x00800246                PROVIDE (__data_end, .)

.bss            0x00800246       0x44
                0x00800246                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800246        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 .bss           0x00800246        0x0 ./usbdrv/oddebug.o
 .bss           0x00800246        0x0 ./usbdrv/usbdrv.o
 .bss           0x00800246        0x0 ./usbdrv/usbdrvasm.o
 .bss           0x00800246        0x0 ./adc.o
 .bss           0x00800246        0x0 ./main.o
 .bss           0x00800246        0x0 ./n5110.o
 .bss           0x00800246        0x0 ./spi.o
 .bss           0x00800246        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_udivmodhi4.o)
 .bss           0x00800246        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .bss           0x00800246        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
 .bss           0x00800246        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
 *(.bss*)
 .bss.usbMsgFlags
                0x00800246        0x1 ./usbdrv/usbdrv.o
 .bss.walues.1391
                0x00800247        0xe ./adc.o
 .bss.flag      0x00800255        0x1 ./main.o
                0x00800255                flag
 .bss.replyBuf  0x00800256        0x8 ./main.o
                0x00800256                replyBuf
 .bss.dataReceived
                0x0080025e        0x1 ./main.o
 .bss.dataLength
                0x0080025f        0x1 ./main.o
 *(COMMON)
 COMMON         0x00800260       0x2a ./usbdrv/usbdrv.o
                0x00800260                usbTxBuf
                0x0080026b                usbDeviceAddr
                0x0080026c                usbRxToken
                0x0080026d                usbInputBufOffset
                0x0080026e                usbMsgPtr
                0x00800270                usbRxLen
                0x00800271                usbNewDeviceAddr
                0x00800272                usbCurrentTok
                0x00800273                usbConfiguration
                0x00800274                usbRxBuf
                0x0080028a                PROVIDE (__bss_end, .)
                0x0000091c                __data_load_start = LOADADDR (.data)
                0x00000b02                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0080028a        0x0
                0x0080028a                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0080028a                PROVIDE (__noinit_end, .)
                0x0080028a                _end = .
                0x0080028a                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000      0x6cc
 *(.stab)
 .stab          0x00000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o

.stabstr        0x00000000       0x54
 *(.stabstr)
 .stabstr       0x00000000       0x54 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(m8testboard3_vusb_PID.elf elf32-avr)
LOAD linker stubs
