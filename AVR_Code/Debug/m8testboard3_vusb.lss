
m8testboard3_vusb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000142e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000142e  000014c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  0080006a  0080006a  000014cc  2**0
                  ALLOC
  3 .stab         000019b0  00000000  00000000  000014cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f22  00000000  00000000  00002e7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	36 c0       	rjmp	.+108    	; 0x6e <__ctors_end>
       2:	ab c2       	rjmp	.+1366   	; 0x55a <__vector_1>
       4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
       6:	4e c0       	rjmp	.+156    	; 0xa4 <__bad_interrupt>
       8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
       a:	4c c0       	rjmp	.+152    	; 0xa4 <__bad_interrupt>
       c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
       e:	4a c0       	rjmp	.+148    	; 0xa4 <__bad_interrupt>
      10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
      12:	48 c0       	rjmp	.+144    	; 0xa4 <__bad_interrupt>
      14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
      16:	46 c0       	rjmp	.+140    	; 0xa4 <__bad_interrupt>
      18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
      1a:	44 c0       	rjmp	.+136    	; 0xa4 <__bad_interrupt>
      1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
      1e:	42 c0       	rjmp	.+132    	; 0xa4 <__bad_interrupt>
      20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
      22:	40 c0       	rjmp	.+128    	; 0xa4 <__bad_interrupt>
      24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>

00000026 <usbDescriptorString0>:
      26:	04 03 09 04                                         ....

0000002a <usbDescriptorStringVendor>:
      2a:	16 03 50 00 68 00 6c 00 74 00 20 00 6d 00 38 00     ..P.h.l.t. .m.8.
      3a:	62 00 72 00 64 00                                   b.r.d.

00000040 <usbDescriptorStringDevice>:
      40:	0a 03 54 00 65 00 73 00 74 00                       ..T.e.s.t.

0000004a <usbDescriptorDevice>:
      4a:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
      5a:	00 01                                               ..

0000005c <usbDescriptorConfiguration>:
      5c:	09 02 12 00 01 01 00 80 3c 09 04 00 00 00 00 00     ........<.......
	...

0000006e <__ctors_end>:
      6e:	11 24       	eor	r1, r1
      70:	1f be       	out	0x3f, r1	; 63
      72:	cf e5       	ldi	r28, 0x5F	; 95
      74:	d4 e0       	ldi	r29, 0x04	; 4
      76:	de bf       	out	0x3e, r29	; 62
      78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
      7a:	10 e0       	ldi	r17, 0x00	; 0
      7c:	a0 e6       	ldi	r26, 0x60	; 96
      7e:	b0 e0       	ldi	r27, 0x00	; 0
      80:	ee e2       	ldi	r30, 0x2E	; 46
      82:	f4 e1       	ldi	r31, 0x14	; 20
      84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
      86:	05 90       	lpm	r0, Z+
      88:	0d 92       	st	X+, r0
      8a:	aa 36       	cpi	r26, 0x6A	; 106
      8c:	b1 07       	cpc	r27, r17
      8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
      90:	10 e0       	ldi	r17, 0x00	; 0
      92:	aa e6       	ldi	r26, 0x6A	; 106
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	a5 39       	cpi	r26, 0x95	; 149
      9c:	b1 07       	cpc	r27, r17
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
      a0:	be d3       	rcall	.+1916   	; 0x81e <main>
      a2:	c3 c9       	rjmp	.-3194   	; 0xfffff42a <__eeprom_end+0xff7ef42a>

000000a4 <__bad_interrupt>:
      a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <usbResetDataToggling>:
#endif

/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
#   endif
#endif
}
      ae:	cf 91       	pop	r28
      b0:	df 91       	pop	r29
      b2:	08 95       	ret

000000b4 <usbResetStall>:

static inline void  usbResetStall(void)
{
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
        usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        usbTxLen3 = USBPID_NAK;
#endif
#endif
}
      bc:	cf 91       	pop	r28
      be:	df 91       	pop	r29
      c0:	08 95       	ret

000000c2 <usbDriverDescriptor>:

/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	00 d0       	rcall	.+0      	; 0xc8 <usbDriverDescriptor+0x6>
      c8:	00 d0       	rcall	.+0      	; 0xca <usbDriverDescriptor+0x8>
      ca:	00 d0       	rcall	.+0      	; 0xcc <usbDriverDescriptor+0xa>
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	9e 83       	std	Y+6, r25	; 0x06
      d2:	8d 83       	std	Y+5, r24	; 0x05
usbMsgLen_t len = 0;
      d4:	19 82       	std	Y+1, r1	; 0x01
uchar       flags = USB_FLG_MSGPTR_IS_ROM;
      d6:	80 e4       	ldi	r24, 0x40	; 64
      d8:	8a 83       	std	Y+2, r24	; 0x02

    SWITCH_START(rq->wValue.bytes[1])
      da:	8d 81       	ldd	r24, Y+5	; 0x05
      dc:	9e 81       	ldd	r25, Y+6	; 0x06
      de:	fc 01       	movw	r30, r24
      e0:	83 81       	ldd	r24, Z+3	; 0x03
      e2:	8b 83       	std	Y+3, r24	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
      e4:	8b 81       	ldd	r24, Y+3	; 0x03
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	49 f4       	brne	.+18     	; 0xfc <usbDriverDescriptor+0x3a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
      ea:	82 e1       	ldi	r24, 0x12	; 18
      ec:	89 83       	std	Y+1, r24	; 0x01
      ee:	8a e4       	ldi	r24, 0x4A	; 74
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	90 93 7a 00 	sts	0x007A, r25
      f6:	80 93 79 00 	sts	0x0079, r24
      fa:	37 c0       	rjmp	.+110    	; 0x16a <usbDriverDescriptor+0xa8>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
      fc:	8b 81       	ldd	r24, Y+3	; 0x03
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	49 f4       	brne	.+18     	; 0x114 <usbDriverDescriptor+0x52>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     102:	82 e1       	ldi	r24, 0x12	; 18
     104:	89 83       	std	Y+1, r24	; 0x01
     106:	8c e5       	ldi	r24, 0x5C	; 92
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	90 93 7a 00 	sts	0x007A, r25
     10e:	80 93 79 00 	sts	0x0079, r24
     112:	2b c0       	rjmp	.+86     	; 0x16a <usbDriverDescriptor+0xa8>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     114:	8b 81       	ldd	r24, Y+3	; 0x03
     116:	83 30       	cpi	r24, 0x03	; 3
     118:	41 f5       	brne	.+80     	; 0x16a <usbDriverDescriptor+0xa8>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     11a:	8d 81       	ldd	r24, Y+5	; 0x05
     11c:	9e 81       	ldd	r25, Y+6	; 0x06
     11e:	fc 01       	movw	r30, r24
     120:	82 81       	ldd	r24, Z+2	; 0x02
     122:	8c 83       	std	Y+4, r24	; 0x04
        SWITCH_CASE(0)
     124:	8c 81       	ldd	r24, Y+4	; 0x04
     126:	88 23       	and	r24, r24
     128:	49 f4       	brne	.+18     	; 0x13c <usbDriverDescriptor+0x7a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     12a:	84 e0       	ldi	r24, 0x04	; 4
     12c:	89 83       	std	Y+1, r24	; 0x01
     12e:	86 e2       	ldi	r24, 0x26	; 38
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	90 93 7a 00 	sts	0x007A, r25
     136:	80 93 79 00 	sts	0x0079, r24
     13a:	17 c0       	rjmp	.+46     	; 0x16a <usbDriverDescriptor+0xa8>
        SWITCH_CASE(1)
     13c:	8c 81       	ldd	r24, Y+4	; 0x04
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	49 f4       	brne	.+18     	; 0x154 <usbDriverDescriptor+0x92>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     142:	86 e1       	ldi	r24, 0x16	; 22
     144:	89 83       	std	Y+1, r24	; 0x01
     146:	8a e2       	ldi	r24, 0x2A	; 42
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	90 93 7a 00 	sts	0x007A, r25
     14e:	80 93 79 00 	sts	0x0079, r24
     152:	0b c0       	rjmp	.+22     	; 0x16a <usbDriverDescriptor+0xa8>
        SWITCH_CASE(2)
     154:	8c 81       	ldd	r24, Y+4	; 0x04
     156:	82 30       	cpi	r24, 0x02	; 2
     158:	41 f4       	brne	.+16     	; 0x16a <usbDriverDescriptor+0xa8>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     15a:	8a e0       	ldi	r24, 0x0A	; 10
     15c:	89 83       	std	Y+1, r24	; 0x01
     15e:	80 e4       	ldi	r24, 0x40	; 64
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	90 93 7a 00 	sts	0x007A, r25
     166:	80 93 79 00 	sts	0x0079, r24
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     16a:	8a 81       	ldd	r24, Y+2	; 0x02
     16c:	80 93 6a 00 	sts	0x006A, r24
    return len;
     170:	89 81       	ldd	r24, Y+1	; 0x01
}
     172:	26 96       	adiw	r28, 0x06	; 6
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	f8 94       	cli
     178:	de bf       	out	0x3e, r29	; 62
     17a:	0f be       	out	0x3f, r0	; 63
     17c:	cd bf       	out	0x3d, r28	; 61
     17e:	cf 91       	pop	r28
     180:	df 91       	pop	r29
     182:	08 95       	ret

00000184 <usbDriverSetup>:

/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
     184:	df 93       	push	r29
     186:	cf 93       	push	r28
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
     18c:	28 97       	sbiw	r28, 0x08	; 8
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	f8 94       	cli
     192:	de bf       	out	0x3e, r29	; 62
     194:	0f be       	out	0x3f, r0	; 63
     196:	cd bf       	out	0x3d, r28	; 61
     198:	98 87       	std	Y+8, r25	; 0x08
     19a:	8f 83       	std	Y+7, r24	; 0x07
usbMsgLen_t len = 0;
     19c:	19 82       	std	Y+1, r1	; 0x01
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     19e:	84 e7       	ldi	r24, 0x74	; 116
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	9b 83       	std	Y+3, r25	; 0x03
     1a4:	8a 83       	std	Y+2, r24	; 0x02
uchar   value = rq->wValue.bytes[0];
     1a6:	8f 81       	ldd	r24, Y+7	; 0x07
     1a8:	98 85       	ldd	r25, Y+8	; 0x08
     1aa:	fc 01       	movw	r30, r24
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	8c 83       	std	Y+4, r24	; 0x04
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     1b0:	8a 81       	ldd	r24, Y+2	; 0x02
     1b2:	9b 81       	ldd	r25, Y+3	; 0x03
     1b4:	fc 01       	movw	r30, r24
     1b6:	10 82       	st	Z, r1
    SWITCH_START(rq->bRequest)
     1b8:	8f 81       	ldd	r24, Y+7	; 0x07
     1ba:	98 85       	ldd	r25, Y+8	; 0x08
     1bc:	fc 01       	movw	r30, r24
     1be:	81 81       	ldd	r24, Z+1	; 0x01
     1c0:	8d 83       	std	Y+5, r24	; 0x05
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     1c2:	8d 81       	ldd	r24, Y+5	; 0x05
     1c4:	88 23       	and	r24, r24
     1c6:	71 f4       	brne	.+28     	; 0x1e4 <usbDriverSetup+0x60>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
     1c8:	8f 81       	ldd	r24, Y+7	; 0x07
     1ca:	98 85       	ldd	r25, Y+8	; 0x08
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	8f 71       	andi	r24, 0x1F	; 31
     1d2:	8e 83       	std	Y+6, r24	; 0x06
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     1d4:	8a 81       	ldd	r24, Y+2	; 0x02
     1d6:	9b 81       	ldd	r25, Y+3	; 0x03
     1d8:	01 96       	adiw	r24, 0x01	; 1
     1da:	fc 01       	movw	r30, r24
     1dc:	10 82       	st	Z, r1
        len = 2;
     1de:	82 e0       	ldi	r24, 0x02	; 2
     1e0:	89 83       	std	Y+1, r24	; 0x01
     1e2:	26 c0       	rjmp	.+76     	; 0x230 <usbDriverSetup+0xac>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     1e4:	8d 81       	ldd	r24, Y+5	; 0x05
     1e6:	85 30       	cpi	r24, 0x05	; 5
     1e8:	21 f4       	brne	.+8      	; 0x1f2 <usbDriverSetup+0x6e>
        usbNewDeviceAddr = value;
     1ea:	8c 81       	ldd	r24, Y+4	; 0x04
     1ec:	80 93 7c 00 	sts	0x007C, r24
     1f0:	1f c0       	rjmp	.+62     	; 0x230 <usbDriverSetup+0xac>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
     1f4:	86 30       	cpi	r24, 0x06	; 6
     1f6:	29 f4       	brne	.+10     	; 0x202 <usbDriverSetup+0x7e>
        len = usbDriverDescriptor(rq);
     1f8:	8f 81       	ldd	r24, Y+7	; 0x07
     1fa:	98 85       	ldd	r25, Y+8	; 0x08
     1fc:	62 df       	rcall	.-316    	; 0xc2 <usbDriverDescriptor>
     1fe:	89 83       	std	Y+1, r24	; 0x01
        goto skipMsgPtrAssignment;
     200:	1d c0       	rjmp	.+58     	; 0x23c <usbDriverSetup+0xb8>
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	88 30       	cpi	r24, 0x08	; 8
     206:	39 f4       	brne	.+14     	; 0x216 <usbDriverSetup+0x92>
        dataPtr = &usbConfiguration;  /* send current configuration value */
     208:	8e e7       	ldi	r24, 0x7E	; 126
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	9b 83       	std	Y+3, r25	; 0x03
     20e:	8a 83       	std	Y+2, r24	; 0x02
        len = 1;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	89 83       	std	Y+1, r24	; 0x01
     214:	0d c0       	rjmp	.+26     	; 0x230 <usbDriverSetup+0xac>
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     216:	8d 81       	ldd	r24, Y+5	; 0x05
     218:	89 30       	cpi	r24, 0x09	; 9
     21a:	29 f4       	brne	.+10     	; 0x226 <usbDriverSetup+0xa2>
        usbConfiguration = value;
     21c:	8c 81       	ldd	r24, Y+4	; 0x04
     21e:	80 93 7e 00 	sts	0x007E, r24
        usbResetStall();
     222:	48 df       	rcall	.-368    	; 0xb4 <usbResetStall>
     224:	05 c0       	rjmp	.+10     	; 0x230 <usbDriverSetup+0xac>
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     226:	8d 81       	ldd	r24, Y+5	; 0x05
     228:	8a 30       	cpi	r24, 0x0A	; 10
     22a:	11 f4       	brne	.+4      	; 0x230 <usbDriverSetup+0xac>
        len = 1;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	89 83       	std	Y+1, r24	; 0x01
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
     230:	8a 81       	ldd	r24, Y+2	; 0x02
     232:	9b 81       	ldd	r25, Y+3	; 0x03
     234:	90 93 7a 00 	sts	0x007A, r25
     238:	80 93 79 00 	sts	0x0079, r24
skipMsgPtrAssignment:
    return len;
     23c:	89 81       	ldd	r24, Y+1	; 0x01
}
     23e:	28 96       	adiw	r28, 0x08	; 8
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	cf 91       	pop	r28
     24c:	df 91       	pop	r29
     24e:	08 95       	ret

00000250 <usbProcessRx>:
/* usbProcessRx() is called for every message received by the interrupt
 * routine. It distinguishes between SETUP and DATA packets and processes
 * them accordingly.
 */
static inline void usbProcessRx(uchar *data, uchar len)
{
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	27 97       	sbiw	r28, 0x07	; 7
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	9e 83       	std	Y+6, r25	; 0x06
     266:	8d 83       	std	Y+5, r24	; 0x05
     268:	6f 83       	std	Y+7, r22	; 0x07
usbRequest_t    *rq = (void *)data;
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	9b 83       	std	Y+3, r25	; 0x03
     270:	8a 83       	std	Y+2, r24	; 0x02
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     272:	80 91 77 00 	lds	r24, 0x0077
     276:	8d 32       	cpi	r24, 0x2D	; 45
     278:	a1 f5       	brne	.+104    	; 0x2e2 <usbProcessRx+0x92>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     27a:	8f 81       	ldd	r24, Y+7	; 0x07
     27c:	88 30       	cpi	r24, 0x08	; 8
     27e:	81 f5       	brne	.+96     	; 0x2e0 <usbProcessRx+0x90>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     280:	83 ec       	ldi	r24, 0xC3	; 195
     282:	80 93 6b 00 	sts	0x006B, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     286:	8a e5       	ldi	r24, 0x5A	; 90
     288:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
     28c:	10 92 6a 00 	sts	0x006A, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     290:	8a 81       	ldd	r24, Y+2	; 0x02
     292:	9b 81       	ldd	r25, Y+3	; 0x03
     294:	fc 01       	movw	r30, r24
     296:	80 81       	ld	r24, Z
     298:	80 76       	andi	r24, 0x60	; 96
     29a:	8c 83       	std	Y+4, r24	; 0x04
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     29c:	8c 81       	ldd	r24, Y+4	; 0x04
     29e:	88 23       	and	r24, r24
     2a0:	29 f0       	breq	.+10     	; 0x2ac <usbProcessRx+0x5c>
            replyLen = usbFunctionSetup(data);
     2a2:	8d 81       	ldd	r24, Y+5	; 0x05
     2a4:	9e 81       	ldd	r25, Y+6	; 0x06
     2a6:	86 d2       	rcall	.+1292   	; 0x7b4 <usbFunctionSetup>
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <usbProcessRx+0x64>
        }else{
            replyLen = usbDriverSetup(rq);
     2ac:	8a 81       	ldd	r24, Y+2	; 0x02
     2ae:	9b 81       	ldd	r25, Y+3	; 0x03
     2b0:	69 df       	rcall	.-302    	; 0x184 <usbDriverSetup>
     2b2:	89 83       	std	Y+1, r24	; 0x01
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     2b4:	8a 81       	ldd	r24, Y+2	; 0x02
     2b6:	9b 81       	ldd	r25, Y+3	; 0x03
     2b8:	fc 01       	movw	r30, r24
     2ba:	87 81       	ldd	r24, Z+7	; 0x07
     2bc:	88 23       	and	r24, r24
     2be:	61 f4       	brne	.+24     	; 0x2d8 <usbProcessRx+0x88>
     2c0:	8a 81       	ldd	r24, Y+2	; 0x02
     2c2:	9b 81       	ldd	r25, Y+3	; 0x03
     2c4:	fc 01       	movw	r30, r24
     2c6:	96 81       	ldd	r25, Z+6	; 0x06
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	98 17       	cp	r25, r24
     2cc:	28 f4       	brcc	.+10     	; 0x2d8 <usbProcessRx+0x88>
                replyLen = rq->wLength.bytes[0];
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	9b 81       	ldd	r25, Y+3	; 0x03
     2d2:	fc 01       	movw	r30, r24
     2d4:	86 81       	ldd	r24, Z+6	; 0x06
     2d6:	89 83       	std	Y+1, r24	; 0x01
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     2d8:	89 81       	ldd	r24, Y+1	; 0x01
     2da:	80 93 61 00 	sts	0x0061, r24
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <usbProcessRx+0x92>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
     2e0:	00 00       	nop
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
            }
        }
#endif
    }
}
     2e2:	27 96       	adiw	r28, 0x07	; 7
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	cf 91       	pop	r28
     2f0:	df 91       	pop	r29
     2f2:	08 95       	ret

000002f4 <usbDeviceRead>:

/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
     2f4:	1f 93       	push	r17
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	2a 97       	sbiw	r28, 0x0a	; 10
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	99 87       	std	Y+9, r25	; 0x09
     30c:	88 87       	std	Y+8, r24	; 0x08
     30e:	6a 87       	std	Y+10, r22	; 0x0a
    if(len > 0){    /* don't bother app with 0 sized reads */
     310:	8a 85       	ldd	r24, Y+10	; 0x0a
     312:	88 23       	and	r24, r24
     314:	09 f4       	brne	.+2      	; 0x318 <usbDeviceRead+0x24>
     316:	4f c0       	rjmp	.+158    	; 0x3b6 <usbDeviceRead+0xc2>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
     318:	8a 85       	ldd	r24, Y+10	; 0x0a
     31a:	89 83       	std	Y+1, r24	; 0x01
            usbMsgPtr_t r = usbMsgPtr;
     31c:	80 91 79 00 	lds	r24, 0x0079
     320:	90 91 7a 00 	lds	r25, 0x007A
     324:	9b 83       	std	Y+3, r25	; 0x03
     326:	8a 83       	std	Y+2, r24	; 0x02
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     328:	80 91 6a 00 	lds	r24, 0x006A
     32c:	88 2f       	mov	r24, r24
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	80 74       	andi	r24, 0x40	; 64
     332:	90 70       	andi	r25, 0x00	; 0
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	09 f1       	breq	.+66     	; 0x37a <usbDeviceRead+0x86>
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	9b 81       	ldd	r25, Y+3	; 0x03
     33c:	9d 83       	std	Y+5, r25	; 0x05
     33e:	8c 83       	std	Y+4, r24	; 0x04
     340:	8c 81       	ldd	r24, Y+4	; 0x04
     342:	9d 81       	ldd	r25, Y+5	; 0x05
     344:	fc 01       	movw	r30, r24
     346:	14 91       	lpm	r17, Z+
     348:	1e 83       	std	Y+6, r17	; 0x06
     34a:	8e 81       	ldd	r24, Y+6	; 0x06
     34c:	8f 83       	std	Y+7, r24	; 0x07
                    *data++ = c;
     34e:	88 85       	ldd	r24, Y+8	; 0x08
     350:	99 85       	ldd	r25, Y+9	; 0x09
     352:	2f 81       	ldd	r18, Y+7	; 0x07
     354:	fc 01       	movw	r30, r24
     356:	20 83       	st	Z, r18
     358:	88 85       	ldd	r24, Y+8	; 0x08
     35a:	99 85       	ldd	r25, Y+9	; 0x09
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	99 87       	std	Y+9, r25	; 0x09
     360:	88 87       	std	Y+8, r24	; 0x08
                    r++;
     362:	8a 81       	ldd	r24, Y+2	; 0x02
     364:	9b 81       	ldd	r25, Y+3	; 0x03
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	9b 83       	std	Y+3, r25	; 0x03
     36a:	8a 83       	std	Y+2, r24	; 0x02
                }while(--i);
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	81 50       	subi	r24, 0x01	; 1
     370:	89 83       	std	Y+1, r24	; 0x01
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	88 23       	and	r24, r24
     376:	01 f7       	brne	.-64     	; 0x338 <usbDeviceRead+0x44>
     378:	18 c0       	rjmp	.+48     	; 0x3aa <usbDeviceRead+0xb6>
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	9b 81       	ldd	r25, Y+3	; 0x03
     37e:	fc 01       	movw	r30, r24
     380:	20 81       	ld	r18, Z
     382:	88 85       	ldd	r24, Y+8	; 0x08
     384:	99 85       	ldd	r25, Y+9	; 0x09
     386:	fc 01       	movw	r30, r24
     388:	20 83       	st	Z, r18
     38a:	88 85       	ldd	r24, Y+8	; 0x08
     38c:	99 85       	ldd	r25, Y+9	; 0x09
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	99 87       	std	Y+9, r25	; 0x09
     392:	88 87       	std	Y+8, r24	; 0x08
                    r++;
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	9b 81       	ldd	r25, Y+3	; 0x03
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	9b 83       	std	Y+3, r25	; 0x03
     39c:	8a 83       	std	Y+2, r24	; 0x02
                }while(--i);
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	81 50       	subi	r24, 0x01	; 1
     3a2:	89 83       	std	Y+1, r24	; 0x01
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	88 23       	and	r24, r24
     3a8:	41 f7       	brne	.-48     	; 0x37a <usbDeviceRead+0x86>
            }
            usbMsgPtr = r;
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	9b 81       	ldd	r25, Y+3	; 0x03
     3ae:	90 93 7a 00 	sts	0x007A, r25
     3b2:	80 93 79 00 	sts	0x0079, r24
        }
    }
    return len;
     3b6:	8a 85       	ldd	r24, Y+10	; 0x0a
}
     3b8:	2a 96       	adiw	r28, 0x0a	; 10
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	cf 91       	pop	r28
     3c6:	df 91       	pop	r29
     3c8:	1f 91       	pop	r17
     3ca:	08 95       	ret

000003cc <usbBuildTxBlock>:

/* usbBuildTxBlock() is called when we have data to transmit and the
 * interrupt routine's transmit buffer is empty.
 */
static inline void usbBuildTxBlock(void)
{
     3cc:	df 93       	push	r29
     3ce:	cf 93       	push	r28
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <usbBuildTxBlock+0x6>
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
     3d6:	80 91 61 00 	lds	r24, 0x0061
     3da:	89 83       	std	Y+1, r24	; 0x01
    if(wantLen > 8)
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	89 30       	cpi	r24, 0x09	; 9
     3e0:	10 f0       	brcs	.+4      	; 0x3e6 <usbBuildTxBlock+0x1a>
        wantLen = 8;
     3e2:	88 e0       	ldi	r24, 0x08	; 8
     3e4:	89 83       	std	Y+1, r24	; 0x01
    usbMsgLen -= wantLen;
     3e6:	90 91 61 00 	lds	r25, 0x0061
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	29 2f       	mov	r18, r25
     3ee:	28 1b       	sub	r18, r24
     3f0:	82 2f       	mov	r24, r18
     3f2:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     3f6:	90 91 6b 00 	lds	r25, 0x006B
     3fa:	88 e8       	ldi	r24, 0x88	; 136
     3fc:	89 27       	eor	r24, r25
     3fe:	80 93 6b 00 	sts	0x006B, r24
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
     402:	8c e6       	ldi	r24, 0x6C	; 108
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	69 81       	ldd	r22, Y+1	; 0x01
     408:	75 df       	rcall	.-278    	; 0x2f4 <usbDeviceRead>
     40a:	8a 83       	std	Y+2, r24	; 0x02
    if(len <= 8){           /* valid data packet */
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	89 30       	cpi	r24, 0x09	; 9
     410:	70 f4       	brcc	.+28     	; 0x42e <usbBuildTxBlock+0x62>
        usbCrc16Append(&usbTxBuf[1], len);
     412:	8c e6       	ldi	r24, 0x6C	; 108
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	6a 81       	ldd	r22, Y+2	; 0x02
     418:	9c d0       	rcall	.+312    	; 0x552 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	8c 5f       	subi	r24, 0xFC	; 252
     41e:	8a 83       	std	Y+2, r24	; 0x02
        if(len < 12)        /* a partial package identifies end of message */
     420:	8a 81       	ldd	r24, Y+2	; 0x02
     422:	8c 30       	cpi	r24, 0x0C	; 12
     424:	48 f4       	brcc	.+18     	; 0x438 <usbBuildTxBlock+0x6c>
            usbMsgLen = USB_NO_MSG;
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	80 93 61 00 	sts	0x0061, r24
     42c:	05 c0       	rjmp	.+10     	; 0x438 <usbBuildTxBlock+0x6c>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
     42e:	8e e1       	ldi	r24, 0x1E	; 30
     430:	8a 83       	std	Y+2, r24	; 0x02
        usbMsgLen = USB_NO_MSG;
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	80 93 61 00 	sts	0x0061, r24
    }
    usbTxLen = len;
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	80 93 60 00 	sts	0x0060, r24
    DBG2(0x20, usbTxBuf, len-1);
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <usbHandleResetHook>:

/* ------------------------------------------------------------------------- */

static inline void usbHandleResetHook(uchar notResetState)
{
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	0f 92       	push	r0
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	89 83       	std	Y+1, r24	; 0x01
        wasReset = isReset;
    }
#else
    notResetState = notResetState;  // avoid compiler warning
#endif
}
     454:	0f 90       	pop	r0
     456:	cf 91       	pop	r28
     458:	df 91       	pop	r29
     45a:	08 95       	ret

0000045c <usbPoll>:

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     45c:	df 93       	push	r29
     45e:	cf 93       	push	r28
     460:	00 d0       	rcall	.+0      	; 0x462 <__stack+0x3>
     462:	0f 92       	push	r0
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
schar   len;
uchar   i;

    len = usbRxLen - 3;
     468:	80 91 7b 00 	lds	r24, 0x007B
     46c:	83 50       	subi	r24, 0x03	; 3
     46e:	8a 83       	std	Y+2, r24	; 0x02
    if(len >= 0){
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	88 23       	and	r24, r24
     474:	8c f0       	brlt	.+34     	; 0x498 <__stack+0x39>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     476:	80 91 78 00 	lds	r24, 0x0078
     47a:	88 2f       	mov	r24, r24
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	2c e0       	ldi	r18, 0x0C	; 12
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	a9 01       	movw	r20, r18
     484:	48 1b       	sub	r20, r24
     486:	59 0b       	sbc	r21, r25
     488:	ca 01       	movw	r24, r20
     48a:	81 58       	subi	r24, 0x81	; 129
     48c:	9f 4f       	sbci	r25, 0xFF	; 255
     48e:	2a 81       	ldd	r18, Y+2	; 0x02
     490:	62 2f       	mov	r22, r18
     492:	de de       	rcall	.-580    	; 0x250 <usbProcessRx>
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     494:	10 92 7b 00 	sts	0x007B, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     498:	80 91 60 00 	lds	r24, 0x0060
     49c:	88 2f       	mov	r24, r24
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	80 71       	andi	r24, 0x10	; 16
     4a2:	90 70       	andi	r25, 0x00	; 0
     4a4:	00 97       	sbiw	r24, 0x00	; 0
     4a6:	29 f0       	breq	.+10     	; 0x4b2 <__stack+0x53>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     4a8:	80 91 61 00 	lds	r24, 0x0061
     4ac:	8f 3f       	cpi	r24, 0xFF	; 255
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <__stack+0x53>
            usbBuildTxBlock();
     4b0:	8d df       	rcall	.-230    	; 0x3cc <usbBuildTxBlock>
        }
    }
    for(i = 20; i > 0; i--){
     4b2:	84 e1       	ldi	r24, 0x14	; 20
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <__stack+0x71>
        uchar usbLineStatus = USBIN & USBMASK;
     4b8:	80 e3       	ldi	r24, 0x30	; 48
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	fc 01       	movw	r30, r24
     4be:	80 81       	ld	r24, Z
     4c0:	89 70       	andi	r24, 0x09	; 9
     4c2:	8b 83       	std	Y+3, r24	; 0x03
        if(usbLineStatus != 0)  /* SE0 has ended */
     4c4:	8b 81       	ldd	r24, Y+3	; 0x03
     4c6:	88 23       	and	r24, r24
     4c8:	61 f4       	brne	.+24     	; 0x4e2 <__stack+0x83>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	81 50       	subi	r24, 0x01	; 1
     4ce:	89 83       	std	Y+1, r24	; 0x01
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	88 23       	and	r24, r24
     4d4:	89 f7       	brne	.-30     	; 0x4b8 <__stack+0x59>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     4d6:	10 92 7c 00 	sts	0x007C, r1
    usbDeviceAddr = 0;
     4da:	10 92 76 00 	sts	0x0076, r1
    usbResetStall();
     4de:	ea dd       	rcall	.-1068   	; 0xb4 <usbResetStall>
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <__stack+0x85>
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
     4e2:	00 00       	nop
    usbNewDeviceAddr = 0;
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	b0 df       	rcall	.-160    	; 0x448 <usbHandleResetHook>
}
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	cf 91       	pop	r28
     4f0:	df 91       	pop	r29
     4f2:	08 95       	ret

000004f4 <usbInit>:

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     4fc:	85 e5       	ldi	r24, 0x55	; 85
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	25 e5       	ldi	r18, 0x55	; 85
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	f9 01       	movw	r30, r18
     506:	20 81       	ld	r18, Z
     508:	22 60       	ori	r18, 0x02	; 2
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     50e:	8b e5       	ldi	r24, 0x5B	; 91
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	2b e5       	ldi	r18, 0x5B	; 91
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	f9 01       	movw	r30, r18
     518:	20 81       	ld	r18, Z
     51a:	20 64       	ori	r18, 0x40	; 64
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
    usbResetDataToggling();
     520:	c2 dd       	rcall	.-1148   	; 0xa6 <usbResetDataToggling>
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     522:	cf 91       	pop	r28
     524:	df 91       	pop	r29
     526:	08 95       	ret

00000528 <usbCrc16>:
     528:	a8 2f       	mov	r26, r24
     52a:	b9 2f       	mov	r27, r25
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	41 e0       	ldi	r20, 0x01	; 1
     532:	50 ea       	ldi	r21, 0xA0	; 160
     534:	60 95       	com	r22
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	09 c0       	rjmp	.+18     	; 0x54c <usbCrcLoopEntry>

0000053a <usbCrcByteLoop>:
     53a:	2d 91       	ld	r18, X+
     53c:	82 27       	eor	r24, r18

0000053e <usbCrcBitLoop>:
     53e:	97 95       	ror	r25
     540:	87 95       	ror	r24
     542:	10 f0       	brcs	.+4      	; 0x548 <usbCrcNoXor>
     544:	84 27       	eor	r24, r20
     546:	95 27       	eor	r25, r21

00000548 <usbCrcNoXor>:
     548:	30 5e       	subi	r19, 0xE0	; 224
     54a:	c8 f3       	brcs	.-14     	; 0x53e <usbCrcBitLoop>

0000054c <usbCrcLoopEntry>:
     54c:	6f 5f       	subi	r22, 0xFF	; 255
     54e:	a8 f3       	brcs	.-22     	; 0x53a <usbCrcByteLoop>

00000550 <usbCrcReady>:
     550:	08 95       	ret

00000552 <usbCrc16Append>:
     552:	ea df       	rcall	.-44     	; 0x528 <usbCrc16>
     554:	8d 93       	st	X+, r24
     556:	9d 93       	st	X+, r25
     558:	08 95       	ret

0000055a <__vector_1>:
     55a:	cf 93       	push	r28
     55c:	cf b7       	in	r28, 0x3f	; 63
     55e:	cf 93       	push	r28

00000560 <waitForJ>:
     560:	c3 95       	inc	r28
     562:	80 9b       	sbis	0x10, 0	; 16
     564:	e9 f7       	brne	.-6      	; 0x560 <waitForJ>

00000566 <waitForK>:
     566:	80 9b       	sbis	0x10, 0	; 16
     568:	09 c0       	rjmp	.+18     	; 0x57c <foundK>
     56a:	80 9b       	sbis	0x10, 0	; 16
     56c:	07 c0       	rjmp	.+14     	; 0x57c <foundK>
     56e:	80 9b       	sbis	0x10, 0	; 16
     570:	05 c0       	rjmp	.+10     	; 0x57c <foundK>
     572:	80 9b       	sbis	0x10, 0	; 16
     574:	03 c0       	rjmp	.+6      	; 0x57c <foundK>
     576:	80 9b       	sbis	0x10, 0	; 16
     578:	01 c0       	rjmp	.+2      	; 0x57c <foundK>
     57a:	a1 c0       	rjmp	.+322    	; 0x6be <sofError>

0000057c <foundK>:
     57c:	df 93       	push	r29
     57e:	c0 91 78 00 	lds	r28, 0x0078
     582:	dd 27       	eor	r29, r29
     584:	c1 58       	subi	r28, 0x81	; 129
     586:	df 4f       	sbci	r29, 0xFF	; 255
     588:	80 9b       	sbis	0x10, 0	; 16
     58a:	02 c0       	rjmp	.+4      	; 0x590 <haveTwoBitsK>
     58c:	df 91       	pop	r29
     58e:	eb cf       	rjmp	.-42     	; 0x566 <waitForK>

00000590 <haveTwoBitsK>:
     590:	2f 93       	push	r18
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	00 b3       	in	r16, 0x10	; 16
     598:	2f ef       	ldi	r18, 0xFF	; 255
     59a:	00 fb       	bst	r16, 0
     59c:	20 f9       	bld	r18, 0
     59e:	4f 93       	push	r20
     5a0:	3f 93       	push	r19
     5a2:	10 b3       	in	r17, 0x10	; 16
     5a4:	4f ef       	ldi	r20, 0xFF	; 255
     5a6:	01 27       	eor	r16, r17
     5a8:	00 fb       	bst	r16, 0
     5aa:	21 f9       	bld	r18, 1
     5ac:	3b e0       	ldi	r19, 0x0B	; 11
     5ae:	31 c0       	rjmp	.+98     	; 0x612 <rxbit2>

000005b0 <unstuff0>:
     5b0:	4e 7f       	andi	r20, 0xFE	; 254
     5b2:	01 2f       	mov	r16, r17
     5b4:	10 b3       	in	r17, 0x10	; 16
     5b6:	21 60       	ori	r18, 0x01	; 1
     5b8:	28 c0       	rjmp	.+80     	; 0x60a <didUnstuff0>

000005ba <unstuff1>:
     5ba:	10 2f       	mov	r17, r16
     5bc:	4d 7f       	andi	r20, 0xFD	; 253
     5be:	22 60       	ori	r18, 0x02	; 2
     5c0:	00 00       	nop
     5c2:	00 b3       	in	r16, 0x10	; 16
     5c4:	29 c0       	rjmp	.+82     	; 0x618 <didUnstuff1>

000005c6 <unstuff2>:
     5c6:	4b 7f       	andi	r20, 0xFB	; 251
     5c8:	24 60       	ori	r18, 0x04	; 4
     5ca:	01 2f       	mov	r16, r17
     5cc:	00 00       	nop
     5ce:	10 b3       	in	r17, 0x10	; 16
     5d0:	2b c0       	rjmp	.+86     	; 0x628 <didUnstuff2>

000005d2 <unstuff3>:
     5d2:	10 b3       	in	r17, 0x10	; 16
     5d4:	47 7f       	andi	r20, 0xF7	; 247
     5d6:	28 60       	ori	r18, 0x08	; 8
     5d8:	2a c0       	rjmp	.+84     	; 0x62e <didUnstuff3>

000005da <unstuff4>:
     5da:	4f 7e       	andi	r20, 0xEF	; 239
     5dc:	00 b3       	in	r16, 0x10	; 16
     5de:	20 61       	ori	r18, 0x10	; 16
     5e0:	2c c0       	rjmp	.+88     	; 0x63a <didUnstuff4>

000005e2 <unstuff5>:
     5e2:	4f 7d       	andi	r20, 0xDF	; 223
     5e4:	10 b3       	in	r17, 0x10	; 16
     5e6:	20 62       	ori	r18, 0x20	; 32
     5e8:	2f c0       	rjmp	.+94     	; 0x648 <didUnstuff5>

000005ea <unstuff6>:
     5ea:	4f 7b       	andi	r20, 0xBF	; 191
     5ec:	00 b3       	in	r16, 0x10	; 16
     5ee:	20 64       	ori	r18, 0x40	; 64
     5f0:	32 c0       	rjmp	.+100    	; 0x656 <didUnstuff6>

000005f2 <rxLoop>:
     5f2:	42 27       	eor	r20, r18
     5f4:	00 b3       	in	r16, 0x10	; 16
     5f6:	49 93       	st	Y+, r20
     5f8:	4f ef       	ldi	r20, 0xFF	; 255
     5fa:	00 00       	nop
     5fc:	10 27       	eor	r17, r16
     5fe:	10 fb       	bst	r17, 0
     600:	20 f9       	bld	r18, 0
     602:	10 b3       	in	r17, 0x10	; 16
     604:	19 70       	andi	r17, 0x09	; 9
     606:	c9 f1       	breq	.+114    	; 0x67a <se0>
     608:	29 7f       	andi	r18, 0xF9	; 249

0000060a <didUnstuff0>:
     60a:	91 f2       	breq	.-92     	; 0x5b0 <unstuff0>
     60c:	01 27       	eor	r16, r17
     60e:	00 fb       	bst	r16, 0
     610:	21 f9       	bld	r18, 1

00000612 <rxbit2>:
     612:	00 b3       	in	r16, 0x10	; 16
     614:	23 7f       	andi	r18, 0xF3	; 243
     616:	89 f2       	breq	.-94     	; 0x5ba <unstuff1>

00000618 <didUnstuff1>:
     618:	31 50       	subi	r19, 0x01	; 1
     61a:	58 f1       	brcs	.+86     	; 0x672 <overflow>
     61c:	10 27       	eor	r17, r16
     61e:	10 fb       	bst	r17, 0
     620:	22 f9       	bld	r18, 2
     622:	10 b3       	in	r17, 0x10	; 16
     624:	27 7e       	andi	r18, 0xE7	; 231
     626:	79 f2       	breq	.-98     	; 0x5c6 <unstuff2>

00000628 <didUnstuff2>:
     628:	01 27       	eor	r16, r17
     62a:	00 fb       	bst	r16, 0
     62c:	23 f9       	bld	r18, 3

0000062e <didUnstuff3>:
     62e:	2f 7c       	andi	r18, 0xCF	; 207
     630:	81 f2       	breq	.-96     	; 0x5d2 <unstuff3>
     632:	00 b3       	in	r16, 0x10	; 16
     634:	10 27       	eor	r17, r16
     636:	10 fb       	bst	r17, 0
     638:	24 f9       	bld	r18, 4

0000063a <didUnstuff4>:
     63a:	2f 79       	andi	r18, 0x9F	; 159
     63c:	71 f2       	breq	.-100    	; 0x5da <unstuff4>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <didUnstuff4+0x6>
     640:	10 b3       	in	r17, 0x10	; 16
     642:	01 27       	eor	r16, r17
     644:	00 fb       	bst	r16, 0
     646:	25 f9       	bld	r18, 5

00000648 <didUnstuff5>:
     648:	2f 73       	andi	r18, 0x3F	; 63
     64a:	59 f2       	breq	.-106    	; 0x5e2 <unstuff5>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <didUnstuff5+0x6>
     64e:	00 b3       	in	r16, 0x10	; 16
     650:	10 27       	eor	r17, r16
     652:	10 fb       	bst	r17, 0
     654:	26 f9       	bld	r18, 6

00000656 <didUnstuff6>:
     656:	22 30       	cpi	r18, 0x02	; 2
     658:	40 f2       	brcs	.-112    	; 0x5ea <unstuff6>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <didUnstuff6+0x6>
     65c:	10 b3       	in	r17, 0x10	; 16
     65e:	01 27       	eor	r16, r17
     660:	00 fb       	bst	r16, 0
     662:	27 f9       	bld	r18, 7

00000664 <didUnstuff7>:
     664:	24 30       	cpi	r18, 0x04	; 4
     666:	28 f6       	brcc	.-118    	; 0x5f2 <rxLoop>

00000668 <unstuff7>:
     668:	4f 77       	andi	r20, 0x7F	; 127
     66a:	20 68       	ori	r18, 0x80	; 128
     66c:	10 b3       	in	r17, 0x10	; 16
     66e:	00 00       	nop
     670:	f9 cf       	rjmp	.-14     	; 0x664 <didUnstuff7>

00000672 <overflow>:
     672:	10 e4       	ldi	r17, 0x40	; 64
     674:	1a bf       	out	0x3a, r17	; 58

00000676 <ignorePacket>:
     676:	00 27       	eor	r16, r16
     678:	17 c0       	rjmp	.+46     	; 0x6a8 <handleSetupOrOut>

0000067a <se0>:
     67a:	3b 50       	subi	r19, 0x0B	; 11
     67c:	31 95       	neg	r19
     67e:	c3 1b       	sub	r28, r19
     680:	d0 40       	sbci	r29, 0x00	; 0
     682:	10 e4       	ldi	r17, 0x40	; 64
     684:	1a bf       	out	0x3a, r17	; 58
     686:	08 81       	ld	r16, Y
     688:	03 3c       	cpi	r16, 0xC3	; 195
     68a:	e9 f0       	breq	.+58     	; 0x6c6 <handleData>
     68c:	0b 34       	cpi	r16, 0x4B	; 75
     68e:	d9 f0       	breq	.+54     	; 0x6c6 <handleData>
     690:	20 91 76 00 	lds	r18, 0x0076
     694:	19 81       	ldd	r17, Y+1	; 0x01
     696:	11 0f       	add	r17, r17
     698:	12 13       	cpse	r17, r18
     69a:	ed cf       	rjmp	.-38     	; 0x676 <ignorePacket>
     69c:	09 36       	cpi	r16, 0x69	; 105
     69e:	41 f1       	breq	.+80     	; 0x6f0 <handleIn>
     6a0:	0d 32       	cpi	r16, 0x2D	; 45
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <handleSetupOrOut>
     6a4:	01 3e       	cpi	r16, 0xE1	; 225
     6a6:	39 f7       	brne	.-50     	; 0x676 <ignorePacket>

000006a8 <handleSetupOrOut>:
     6a8:	00 93 7d 00 	sts	0x007D, r16

000006ac <doReturn>:
     6ac:	3f 91       	pop	r19
     6ae:	4f 91       	pop	r20
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	2f 91       	pop	r18
     6b6:	df 91       	pop	r29
     6b8:	ca b7       	in	r28, 0x3a	; 58
     6ba:	c6 fd       	sbrc	r28, 6
     6bc:	51 cf       	rjmp	.-350    	; 0x560 <waitForJ>

000006be <sofError>:
     6be:	cf 91       	pop	r28
     6c0:	cf bf       	out	0x3f, r28	; 63
     6c2:	cf 91       	pop	r28
     6c4:	18 95       	reti

000006c6 <handleData>:
     6c6:	20 91 7d 00 	lds	r18, 0x007D
     6ca:	22 23       	and	r18, r18
     6cc:	79 f3       	breq	.-34     	; 0x6ac <doReturn>
     6ce:	10 91 7b 00 	lds	r17, 0x007B
     6d2:	11 23       	and	r17, r17
     6d4:	11 f5       	brne	.+68     	; 0x71a <sendNakAndReti>
     6d6:	34 30       	cpi	r19, 0x04	; 4
     6d8:	12 f1       	brmi	.+68     	; 0x71e <sendAckAndReti>
     6da:	30 93 7b 00 	sts	0x007B, r19
     6de:	20 93 77 00 	sts	0x0077, r18
     6e2:	10 91 78 00 	lds	r17, 0x0078
     6e6:	3b e0       	ldi	r19, 0x0B	; 11
     6e8:	31 1b       	sub	r19, r17
     6ea:	30 93 78 00 	sts	0x0078, r19
     6ee:	17 c0       	rjmp	.+46     	; 0x71e <sendAckAndReti>

000006f0 <handleIn>:
     6f0:	00 91 7b 00 	lds	r16, 0x007B
     6f4:	01 30       	cpi	r16, 0x01	; 1
     6f6:	8c f4       	brge	.+34     	; 0x71a <sendNakAndReti>
     6f8:	0a e5       	ldi	r16, 0x5A	; 90
     6fa:	30 91 60 00 	lds	r19, 0x0060
     6fe:	34 fd       	sbrc	r19, 4
     700:	10 c0       	rjmp	.+32     	; 0x722 <sendCntAndReti>
     702:	00 93 60 00 	sts	0x0060, r16
     706:	cb e6       	ldi	r28, 0x6B	; 107
     708:	d0 e0       	ldi	r29, 0x00	; 0
     70a:	0f c0       	rjmp	.+30     	; 0x72a <usbSendAndReti>

0000070c <stuffN1Delay>:
     70c:	27 95       	ror	r18
     70e:	a8 f4       	brcc	.+42     	; 0x73a <doExorN1>
     710:	51 50       	subi	r21, 0x01	; 1
     712:	a9 f4       	brne	.+42     	; 0x73e <commonN1>
     714:	22 0f       	add	r18, r18
     716:	00 00       	nop
     718:	f9 cf       	rjmp	.-14     	; 0x70c <stuffN1Delay>

0000071a <sendNakAndReti>:
     71a:	4a e5       	ldi	r20, 0x5A	; 90
     71c:	03 c0       	rjmp	.+6      	; 0x724 <usbSendX3>

0000071e <sendAckAndReti>:
     71e:	42 ed       	ldi	r20, 0xD2	; 210
     720:	01 c0       	rjmp	.+2      	; 0x724 <usbSendX3>

00000722 <sendCntAndReti>:
     722:	43 2f       	mov	r20, r19

00000724 <usbSendX3>:
     724:	c4 e1       	ldi	r28, 0x14	; 20
     726:	d0 e0       	ldi	r29, 0x00	; 0
     728:	32 e0       	ldi	r19, 0x02	; 2

0000072a <usbSendAndReti>:
     72a:	11 b3       	in	r17, 0x11	; 17
     72c:	19 60       	ori	r17, 0x09	; 9
     72e:	90 9a       	sbi	0x12, 0	; 18
     730:	11 bb       	out	0x11, r17	; 17
     732:	02 b3       	in	r16, 0x12	; 18
     734:	20 e4       	ldi	r18, 0x40	; 64
     736:	19 e0       	ldi	r17, 0x09	; 9
     738:	5f 93       	push	r21

0000073a <doExorN1>:
     73a:	01 27       	eor	r16, r17
     73c:	56 e0       	ldi	r21, 0x06	; 6

0000073e <commonN1>:
     73e:	02 bb       	out	0x12, r16	; 18
     740:	27 95       	ror	r18
     742:	20 f4       	brcc	.+8      	; 0x74c <doExorN2>
     744:	51 50       	subi	r21, 0x01	; 1
     746:	21 f4       	brne	.+8      	; 0x750 <commonN2>
     748:	22 0f       	add	r18, r18
     74a:	f9 cf       	rjmp	.-14     	; 0x73e <commonN1>

0000074c <doExorN2>:
     74c:	01 27       	eor	r16, r17
     74e:	56 e0       	ldi	r21, 0x06	; 6

00000750 <commonN2>:
     750:	00 00       	nop
     752:	3b 5a       	subi	r19, 0xAB	; 171
     754:	02 bb       	out	0x12, r16	; 18
     756:	d0 f2       	brcs	.-76     	; 0x70c <stuffN1Delay>

00000758 <stuff6Delay>:
     758:	27 95       	ror	r18
     75a:	28 f4       	brcc	.+10     	; 0x766 <doExor6>
     75c:	51 50       	subi	r21, 0x01	; 1
     75e:	29 f4       	brne	.+10     	; 0x76a <common6>
     760:	22 0f       	add	r18, r18
     762:	00 00       	nop
     764:	f9 cf       	rjmp	.-14     	; 0x758 <stuff6Delay>

00000766 <doExor6>:
     766:	01 27       	eor	r16, r17
     768:	56 e0       	ldi	r21, 0x06	; 6

0000076a <common6>:
     76a:	27 95       	ror	r18
     76c:	02 bb       	out	0x12, r16	; 18
     76e:	20 f4       	brcc	.+8      	; 0x778 <doExor7>
     770:	51 50       	subi	r21, 0x01	; 1
     772:	21 f4       	brne	.+8      	; 0x77c <common7>
     774:	22 0f       	add	r18, r18
     776:	f9 cf       	rjmp	.-14     	; 0x76a <common6>

00000778 <doExor7>:
     778:	01 27       	eor	r16, r17
     77a:	56 e0       	ldi	r21, 0x06	; 6

0000077c <common7>:
     77c:	29 91       	ld	r18, Y+
     77e:	33 23       	and	r19, r19
     780:	02 bb       	out	0x12, r16	; 18
     782:	21 f6       	brne	.-120    	; 0x70c <stuffN1Delay>
     784:	06 7f       	andi	r16, 0xF6	; 246
     786:	10 91 7c 00 	lds	r17, 0x007C
     78a:	11 0f       	add	r17, r17
     78c:	c6 51       	subi	r28, 0x16	; 22
     78e:	d0 40       	sbci	r29, 0x00	; 0
     790:	02 bb       	out	0x12, r16	; 18
     792:	11 f0       	breq	.+4      	; 0x798 <skipAddrAssign>
     794:	10 93 76 00 	sts	0x0076, r17

00000798 <skipAddrAssign>:
     798:	10 e4       	ldi	r17, 0x40	; 64
     79a:	1a bf       	out	0x3a, r17	; 58
     79c:	01 60       	ori	r16, 0x01	; 1
     79e:	11 b3       	in	r17, 0x11	; 17
     7a0:	16 7f       	andi	r17, 0xF6	; 246
     7a2:	40 2f       	mov	r20, r16
     7a4:	46 7f       	andi	r20, 0xF6	; 246
     7a6:	5f 91       	pop	r21
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <skipAddrAssign+0x12>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <skipAddrAssign+0x14>
     7ac:	02 bb       	out	0x12, r16	; 18
     7ae:	11 bb       	out	0x11, r17	; 17
     7b0:	42 bb       	out	0x12, r20	; 18
     7b2:	7c cf       	rjmp	.-264    	; 0x6ac <doReturn>

000007b4 <usbFunctionSetup>:
#define USB_LED_ON  1
//////////////// Output LED macro	/////////////////////
#define LED0_ON PORTC|=(1<<PC0);
#define LED0_OFF PORTC&=~(1<<PC0);

USB_PUBLIC uchar usbFunctionSetup(uchar data[8]) {
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <usbFunctionSetup+0x6>
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <usbFunctionSetup+0x8>
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	9c 83       	std	Y+4, r25	; 0x04
     7c2:	8b 83       	std	Y+3, r24	; 0x03
    usbRequest_t *rq = (void *)data; // cast data to correct type
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	9c 81       	ldd	r25, Y+4	; 0x04
     7c8:	9a 83       	std	Y+2, r25	; 0x02
     7ca:	89 83       	std	Y+1, r24	; 0x01

    switch(rq->bRequest)
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	fc 01       	movw	r30, r24
     7d2:	81 81       	ldd	r24, Z+1	; 0x01
     7d4:	88 2f       	mov	r24, r24
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	00 97       	sbiw	r24, 0x00	; 0
     7da:	71 f0       	breq	.+28     	; 0x7f8 <usbFunctionSetup+0x44>
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	91 05       	cpc	r25, r1
     7e0:	b1 f4       	brne	.+44     	; 0x80e <usbFunctionSetup+0x5a>
    { 	// custom command is in the bRequest field
    	case USB_LED_ON:
    		LED0_ON;
     7e2:	85 e3       	ldi	r24, 0x35	; 53
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	25 e3       	ldi	r18, 0x35	; 53
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	f9 01       	movw	r30, r18
     7ec:	20 81       	ld	r18, Z
     7ee:	21 60       	ori	r18, 0x01	; 1
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 83       	st	Z, r18
    		return 0;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0c c0       	rjmp	.+24     	; 0x810 <usbFunctionSetup+0x5c>
    	case USB_LED_OFF:
    		LED0_OFF;
     7f8:	85 e3       	ldi	r24, 0x35	; 53
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	25 e3       	ldi	r18, 0x35	; 53
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	f9 01       	movw	r30, r18
     802:	20 81       	ld	r18, Z
     804:	2e 7f       	andi	r18, 0xFE	; 254
     806:	fc 01       	movw	r30, r24
     808:	20 83       	st	Z, r18
        return 0;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	01 c0       	rjmp	.+2      	; 0x810 <usbFunctionSetup+0x5c>
    }

    return 0; // should not get here
     80e:	80 e0       	ldi	r24, 0x00	; 0
}
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	cf 91       	pop	r28
     81a:	df 91       	pop	r29
     81c:	08 95       	ret

0000081e <main>:

int main() {
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	df 93       	push	r29
     824:	cf 93       	push	r28
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	2f 97       	sbiw	r28, 0x0f	; 15
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
	uchar i;
	DDRC|=(1<<PC0);
     836:	84 e3       	ldi	r24, 0x34	; 52
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	24 e3       	ldi	r18, 0x34	; 52
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	f9 01       	movw	r30, r18
     840:	20 81       	ld	r18, Z
     842:	21 60       	ori	r18, 0x01	; 1
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18

    wdt_enable(WDTO_1S); // enable 1s watchdog timer
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	2e e0       	ldi	r18, 0x0E	; 14
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	a8 95       	wdr
     854:	81 bd       	out	0x21, r24	; 33
     856:	0f be       	out	0x3f, r0	; 63
     858:	21 bd       	out	0x21, r18	; 33

    usbInit();
     85a:	4c de       	rcall	.-872    	; 0x4f4 <usbInit>

    usbDeviceDisconnect(); // enforce re-enumeration
     85c:	81 e3       	ldi	r24, 0x31	; 49
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	21 e3       	ldi	r18, 0x31	; 49
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	f9 01       	movw	r30, r18
     866:	20 81       	ld	r18, Z
     868:	21 60       	ori	r18, 0x01	; 1
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
    for(i = 0; i<250; i++) { // wait 500 ms
     86e:	19 82       	std	Y+1, r1	; 0x01
     870:	7e c0       	rjmp	.+252    	; 0x96e <main+0x150>
        wdt_reset(); // keep the watchdog happy
     872:	a8 95       	wdr
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e4       	ldi	r27, 0x40	; 64
     87c:	8a 83       	std	Y+2, r24	; 0x02
     87e:	9b 83       	std	Y+3, r25	; 0x03
     880:	ac 83       	std	Y+4, r26	; 0x04
     882:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     884:	6a 81       	ldd	r22, Y+2	; 0x02
     886:	7b 81       	ldd	r23, Y+3	; 0x03
     888:	8c 81       	ldd	r24, Y+4	; 0x04
     88a:	9d 81       	ldd	r25, Y+5	; 0x05
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e8       	ldi	r19, 0x80	; 128
     890:	4b e3       	ldi	r20, 0x3B	; 59
     892:	55 e4       	ldi	r21, 0x45	; 69
     894:	3f d2       	rcall	.+1150   	; 0xd14 <__mulsf3>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	8e 83       	std	Y+6, r24	; 0x06
     89c:	9f 83       	std	Y+7, r25	; 0x07
     89e:	a8 87       	std	Y+8, r26	; 0x08
     8a0:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     8a2:	11 e0       	ldi	r17, 0x01	; 1
     8a4:	6e 81       	ldd	r22, Y+6	; 0x06
     8a6:	7f 81       	ldd	r23, Y+7	; 0x07
     8a8:	88 85       	ldd	r24, Y+8	; 0x08
     8aa:	99 85       	ldd	r25, Y+9	; 0x09
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	40 e8       	ldi	r20, 0x80	; 128
     8b2:	5f e3       	ldi	r21, 0x3F	; 63
     8b4:	7a d3       	rcall	.+1780   	; 0xfaa <__ltsf2>
     8b6:	88 23       	and	r24, r24
     8b8:	0c f0       	brlt	.+2      	; 0x8bc <main+0x9e>
     8ba:	10 e0       	ldi	r17, 0x00	; 0
     8bc:	11 23       	and	r17, r17
     8be:	29 f0       	breq	.+10     	; 0x8ca <main+0xac>
		__ticks = 1;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	9b 87       	std	Y+11, r25	; 0x0b
     8c6:	8a 87       	std	Y+10, r24	; 0x0a
     8c8:	42 c0       	rjmp	.+132    	; 0x94e <main+0x130>
	else if (__tmp > 65535)
     8ca:	11 e0       	ldi	r17, 0x01	; 1
     8cc:	6e 81       	ldd	r22, Y+6	; 0x06
     8ce:	7f 81       	ldd	r23, Y+7	; 0x07
     8d0:	88 85       	ldd	r24, Y+8	; 0x08
     8d2:	99 85       	ldd	r25, Y+9	; 0x09
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f e7       	ldi	r20, 0x7F	; 127
     8da:	57 e4       	ldi	r21, 0x47	; 71
     8dc:	10 d3       	rcall	.+1568   	; 0xefe <__gtsf2>
     8de:	18 16       	cp	r1, r24
     8e0:	0c f0       	brlt	.+2      	; 0x8e4 <main+0xc6>
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	11 23       	and	r17, r17
     8e6:	51 f1       	breq	.+84     	; 0x93c <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8e8:	6a 81       	ldd	r22, Y+2	; 0x02
     8ea:	7b 81       	ldd	r23, Y+3	; 0x03
     8ec:	8c 81       	ldd	r24, Y+4	; 0x04
     8ee:	9d 81       	ldd	r25, Y+5	; 0x05
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e2       	ldi	r20, 0x20	; 32
     8f6:	51 e4       	ldi	r21, 0x41	; 65
     8f8:	0d d2       	rcall	.+1050   	; 0xd14 <__mulsf3>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	bc 01       	movw	r22, r24
     900:	cd 01       	movw	r24, r26
     902:	46 d0       	rcall	.+140    	; 0x990 <__fixunssfsi>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	9b 87       	std	Y+11, r25	; 0x0b
     90a:	8a 87       	std	Y+10, r24	; 0x0a
     90c:	12 c0       	rjmp	.+36     	; 0x932 <main+0x114>
     90e:	8c e2       	ldi	r24, 0x2C	; 44
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	9d 87       	std	Y+13, r25	; 0x0d
     914:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     916:	8c 85       	ldd	r24, Y+12	; 0x0c
     918:	9d 85       	ldd	r25, Y+13	; 0x0d
     91a:	8c 01       	movw	r16, r24
     91c:	c8 01       	movw	r24, r16
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	f1 f7       	brne	.-4      	; 0x91e <main+0x100>
     922:	8c 01       	movw	r16, r24
     924:	1d 87       	std	Y+13, r17	; 0x0d
     926:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     928:	8a 85       	ldd	r24, Y+10	; 0x0a
     92a:	9b 85       	ldd	r25, Y+11	; 0x0b
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	9b 87       	std	Y+11, r25	; 0x0b
     930:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     932:	8a 85       	ldd	r24, Y+10	; 0x0a
     934:	9b 85       	ldd	r25, Y+11	; 0x0b
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	51 f7       	brne	.-44     	; 0x90e <main+0xf0>
     93a:	16 c0       	rjmp	.+44     	; 0x968 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     93c:	6e 81       	ldd	r22, Y+6	; 0x06
     93e:	7f 81       	ldd	r23, Y+7	; 0x07
     940:	88 85       	ldd	r24, Y+8	; 0x08
     942:	99 85       	ldd	r25, Y+9	; 0x09
     944:	25 d0       	rcall	.+74     	; 0x990 <__fixunssfsi>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	9b 87       	std	Y+11, r25	; 0x0b
     94c:	8a 87       	std	Y+10, r24	; 0x0a
     94e:	8a 85       	ldd	r24, Y+10	; 0x0a
     950:	9b 85       	ldd	r25, Y+11	; 0x0b
     952:	9f 87       	std	Y+15, r25	; 0x0f
     954:	8e 87       	std	Y+14, r24	; 0x0e
     956:	8e 85       	ldd	r24, Y+14	; 0x0e
     958:	9f 85       	ldd	r25, Y+15	; 0x0f
     95a:	8c 01       	movw	r16, r24
     95c:	f8 01       	movw	r30, r16
     95e:	31 97       	sbiw	r30, 0x01	; 1
     960:	f1 f7       	brne	.-4      	; 0x95e <main+0x140>
     962:	8f 01       	movw	r16, r30
     964:	1f 87       	std	Y+15, r17	; 0x0f
     966:	0e 87       	std	Y+14, r16	; 0x0e
    wdt_enable(WDTO_1S); // enable 1s watchdog timer

    usbInit();

    usbDeviceDisconnect(); // enforce re-enumeration
    for(i = 0; i<250; i++) { // wait 500 ms
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	8f 5f       	subi	r24, 0xFF	; 255
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	8a 3f       	cpi	r24, 0xFA	; 250
     972:	08 f4       	brcc	.+2      	; 0x976 <main+0x158>
     974:	7e cf       	rjmp	.-260    	; 0x872 <main+0x54>
        wdt_reset(); // keep the watchdog happy
        _delay_ms(2);
    }
    usbDeviceConnect();
     976:	81 e3       	ldi	r24, 0x31	; 49
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	21 e3       	ldi	r18, 0x31	; 49
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	f9 01       	movw	r30, r18
     980:	20 81       	ld	r18, Z
     982:	2e 7f       	andi	r18, 0xFE	; 254
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18

    sei(); // Enable interrupts after re-enumeration
     988:	78 94       	sei

    while(1) {
        wdt_reset(); // keep the watchdog happy
     98a:	a8 95       	wdr
        usbPoll();
     98c:	67 dd       	rcall	.-1330   	; 0x45c <usbPoll>
    }
     98e:	fd cf       	rjmp	.-6      	; 0x98a <main+0x16c>

00000990 <__fixunssfsi>:
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	7b 01       	movw	r14, r22
     99a:	8c 01       	movw	r16, r24
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	5f e4       	ldi	r21, 0x4F	; 79
     9a4:	d7 d2       	rcall	.+1454   	; 0xf54 <__gesf2>
     9a6:	87 fd       	sbrc	r24, 7
     9a8:	0f c0       	rjmp	.+30     	; 0x9c8 <__fixunssfsi+0x38>
     9aa:	c8 01       	movw	r24, r16
     9ac:	b7 01       	movw	r22, r14
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	5f e4       	ldi	r21, 0x4F	; 79
     9b6:	83 d1       	rcall	.+774    	; 0xcbe <__subsf3>
     9b8:	23 d3       	rcall	.+1606   	; 0x1000 <__fixsfsi>
     9ba:	9b 01       	movw	r18, r22
     9bc:	ac 01       	movw	r20, r24
     9be:	20 50       	subi	r18, 0x00	; 0
     9c0:	30 40       	sbci	r19, 0x00	; 0
     9c2:	40 40       	sbci	r20, 0x00	; 0
     9c4:	50 48       	sbci	r21, 0x80	; 128
     9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <__fixunssfsi+0x42>
     9c8:	c8 01       	movw	r24, r16
     9ca:	b7 01       	movw	r22, r14
     9cc:	19 d3       	rcall	.+1586   	; 0x1000 <__fixsfsi>
     9ce:	9b 01       	movw	r18, r22
     9d0:	ac 01       	movw	r20, r24
     9d2:	b9 01       	movw	r22, r18
     9d4:	ca 01       	movw	r24, r20
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	08 95       	ret

000009e0 <_fpadd_parts>:
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	e5 ef       	ldi	r30, 0xF5	; 245
     9e6:	f4 e0       	ldi	r31, 0x04	; 4
     9e8:	ed c4       	rjmp	.+2522   	; 0x13c4 <__prologue_saves__+0x8>
     9ea:	fc 01       	movw	r30, r24
     9ec:	ea 01       	movw	r28, r20
     9ee:	80 81       	ld	r24, Z
     9f0:	82 30       	cpi	r24, 0x02	; 2
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <_fpadd_parts+0x16>
     9f4:	38 c1       	rjmp	.+624    	; 0xc66 <_fpadd_parts+0x286>
     9f6:	db 01       	movw	r26, r22
     9f8:	9c 91       	ld	r25, X
     9fa:	92 30       	cpi	r25, 0x02	; 2
     9fc:	08 f4       	brcc	.+2      	; 0xa00 <_fpadd_parts+0x20>
     9fe:	30 c1       	rjmp	.+608    	; 0xc60 <_fpadd_parts+0x280>
     a00:	84 30       	cpi	r24, 0x04	; 4
     a02:	59 f4       	brne	.+22     	; 0xa1a <_fpadd_parts+0x3a>
     a04:	94 30       	cpi	r25, 0x04	; 4
     a06:	09 f0       	breq	.+2      	; 0xa0a <_fpadd_parts+0x2a>
     a08:	2e c1       	rjmp	.+604    	; 0xc66 <_fpadd_parts+0x286>
     a0a:	91 81       	ldd	r25, Z+1	; 0x01
     a0c:	11 96       	adiw	r26, 0x01	; 1
     a0e:	8c 91       	ld	r24, X
     a10:	11 97       	sbiw	r26, 0x01	; 1
     a12:	98 17       	cp	r25, r24
     a14:	09 f0       	breq	.+2      	; 0xa18 <_fpadd_parts+0x38>
     a16:	21 c1       	rjmp	.+578    	; 0xc5a <_fpadd_parts+0x27a>
     a18:	26 c1       	rjmp	.+588    	; 0xc66 <_fpadd_parts+0x286>
     a1a:	94 30       	cpi	r25, 0x04	; 4
     a1c:	09 f4       	brne	.+2      	; 0xa20 <_fpadd_parts+0x40>
     a1e:	20 c1       	rjmp	.+576    	; 0xc60 <_fpadd_parts+0x280>
     a20:	92 30       	cpi	r25, 0x02	; 2
     a22:	b1 f4       	brne	.+44     	; 0xa50 <_fpadd_parts+0x70>
     a24:	82 30       	cpi	r24, 0x02	; 2
     a26:	09 f0       	breq	.+2      	; 0xa2a <_fpadd_parts+0x4a>
     a28:	1e c1       	rjmp	.+572    	; 0xc66 <_fpadd_parts+0x286>
     a2a:	ca 01       	movw	r24, r20
     a2c:	af 01       	movw	r20, r30
     a2e:	28 e0       	ldi	r18, 0x08	; 8
     a30:	da 01       	movw	r26, r20
     a32:	0d 90       	ld	r0, X+
     a34:	ad 01       	movw	r20, r26
     a36:	dc 01       	movw	r26, r24
     a38:	0d 92       	st	X+, r0
     a3a:	cd 01       	movw	r24, r26
     a3c:	21 50       	subi	r18, 0x01	; 1
     a3e:	c1 f7       	brne	.-16     	; 0xa30 <_fpadd_parts+0x50>
     a40:	db 01       	movw	r26, r22
     a42:	11 96       	adiw	r26, 0x01	; 1
     a44:	8c 91       	ld	r24, X
     a46:	11 97       	sbiw	r26, 0x01	; 1
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	89 23       	and	r24, r25
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	0a c1       	rjmp	.+532    	; 0xc64 <_fpadd_parts+0x284>
     a50:	82 30       	cpi	r24, 0x02	; 2
     a52:	09 f4       	brne	.+2      	; 0xa56 <_fpadd_parts+0x76>
     a54:	05 c1       	rjmp	.+522    	; 0xc60 <_fpadd_parts+0x280>
     a56:	c2 80       	ldd	r12, Z+2	; 0x02
     a58:	d3 80       	ldd	r13, Z+3	; 0x03
     a5a:	db 01       	movw	r26, r22
     a5c:	12 96       	adiw	r26, 0x02	; 2
     a5e:	6d 90       	ld	r6, X+
     a60:	7c 90       	ld	r7, X
     a62:	13 97       	sbiw	r26, 0x03	; 3
     a64:	24 81       	ldd	r18, Z+4	; 0x04
     a66:	35 81       	ldd	r19, Z+5	; 0x05
     a68:	46 81       	ldd	r20, Z+6	; 0x06
     a6a:	57 81       	ldd	r21, Z+7	; 0x07
     a6c:	14 96       	adiw	r26, 0x04	; 4
     a6e:	ed 90       	ld	r14, X+
     a70:	fd 90       	ld	r15, X+
     a72:	0d 91       	ld	r16, X+
     a74:	1c 91       	ld	r17, X
     a76:	17 97       	sbiw	r26, 0x07	; 7
     a78:	c6 01       	movw	r24, r12
     a7a:	86 19       	sub	r24, r6
     a7c:	97 09       	sbc	r25, r7
     a7e:	5c 01       	movw	r10, r24
     a80:	97 ff       	sbrs	r25, 7
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <_fpadd_parts+0xac>
     a84:	aa 24       	eor	r10, r10
     a86:	bb 24       	eor	r11, r11
     a88:	a8 1a       	sub	r10, r24
     a8a:	b9 0a       	sbc	r11, r25
     a8c:	b0 e2       	ldi	r27, 0x20	; 32
     a8e:	ab 16       	cp	r10, r27
     a90:	b1 04       	cpc	r11, r1
     a92:	0c f0       	brlt	.+2      	; 0xa96 <_fpadd_parts+0xb6>
     a94:	61 c0       	rjmp	.+194    	; 0xb58 <_fpadd_parts+0x178>
     a96:	18 16       	cp	r1, r24
     a98:	19 06       	cpc	r1, r25
     a9a:	6c f5       	brge	.+90     	; 0xaf6 <_fpadd_parts+0x116>
     a9c:	37 01       	movw	r6, r14
     a9e:	48 01       	movw	r8, r16
     aa0:	0a 2c       	mov	r0, r10
     aa2:	04 c0       	rjmp	.+8      	; 0xaac <_fpadd_parts+0xcc>
     aa4:	96 94       	lsr	r9
     aa6:	87 94       	ror	r8
     aa8:	77 94       	ror	r7
     aaa:	67 94       	ror	r6
     aac:	0a 94       	dec	r0
     aae:	d2 f7       	brpl	.-12     	; 0xaa4 <_fpadd_parts+0xc4>
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	0a 2c       	mov	r0, r10
     aba:	04 c0       	rjmp	.+8      	; 0xac4 <_fpadd_parts+0xe4>
     abc:	88 0f       	add	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	aa 1f       	adc	r26, r26
     ac2:	bb 1f       	adc	r27, r27
     ac4:	0a 94       	dec	r0
     ac6:	d2 f7       	brpl	.-12     	; 0xabc <_fpadd_parts+0xdc>
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	a1 09       	sbc	r26, r1
     acc:	b1 09       	sbc	r27, r1
     ace:	8e 21       	and	r24, r14
     ad0:	9f 21       	and	r25, r15
     ad2:	a0 23       	and	r26, r16
     ad4:	b1 23       	and	r27, r17
     ad6:	ee 24       	eor	r14, r14
     ad8:	ff 24       	eor	r15, r15
     ada:	87 01       	movw	r16, r14
     adc:	e3 94       	inc	r14
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	a1 05       	cpc	r26, r1
     ae2:	b1 05       	cpc	r27, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <_fpadd_parts+0x10c>
     ae6:	ee 24       	eor	r14, r14
     ae8:	ff 24       	eor	r15, r15
     aea:	87 01       	movw	r16, r14
     aec:	e6 28       	or	r14, r6
     aee:	f7 28       	or	r15, r7
     af0:	08 29       	or	r16, r8
     af2:	19 29       	or	r17, r9
     af4:	3c c0       	rjmp	.+120    	; 0xb6e <_fpadd_parts+0x18e>
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	d1 f1       	breq	.+116    	; 0xb6e <_fpadd_parts+0x18e>
     afa:	ca 0c       	add	r12, r10
     afc:	db 1c       	adc	r13, r11
     afe:	39 01       	movw	r6, r18
     b00:	4a 01       	movw	r8, r20
     b02:	0a 2c       	mov	r0, r10
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <_fpadd_parts+0x12e>
     b06:	96 94       	lsr	r9
     b08:	87 94       	ror	r8
     b0a:	77 94       	ror	r7
     b0c:	67 94       	ror	r6
     b0e:	0a 94       	dec	r0
     b10:	d2 f7       	brpl	.-12     	; 0xb06 <_fpadd_parts+0x126>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	a0 e0       	ldi	r26, 0x00	; 0
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	0a 2c       	mov	r0, r10
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <_fpadd_parts+0x146>
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	aa 1f       	adc	r26, r26
     b24:	bb 1f       	adc	r27, r27
     b26:	0a 94       	dec	r0
     b28:	d2 f7       	brpl	.-12     	; 0xb1e <_fpadd_parts+0x13e>
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	a1 09       	sbc	r26, r1
     b2e:	b1 09       	sbc	r27, r1
     b30:	82 23       	and	r24, r18
     b32:	93 23       	and	r25, r19
     b34:	a4 23       	and	r26, r20
     b36:	b5 23       	and	r27, r21
     b38:	21 e0       	ldi	r18, 0x01	; 1
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	a1 05       	cpc	r26, r1
     b44:	b1 05       	cpc	r27, r1
     b46:	19 f4       	brne	.+6      	; 0xb4e <_fpadd_parts+0x16e>
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	a9 01       	movw	r20, r18
     b4e:	26 29       	or	r18, r6
     b50:	37 29       	or	r19, r7
     b52:	48 29       	or	r20, r8
     b54:	59 29       	or	r21, r9
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <_fpadd_parts+0x18e>
     b58:	6c 14       	cp	r6, r12
     b5a:	7d 04       	cpc	r7, r13
     b5c:	24 f4       	brge	.+8      	; 0xb66 <_fpadd_parts+0x186>
     b5e:	ee 24       	eor	r14, r14
     b60:	ff 24       	eor	r15, r15
     b62:	87 01       	movw	r16, r14
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <_fpadd_parts+0x18e>
     b66:	63 01       	movw	r12, r6
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	a9 01       	movw	r20, r18
     b6e:	81 81       	ldd	r24, Z+1	; 0x01
     b70:	fb 01       	movw	r30, r22
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	89 17       	cp	r24, r25
     b76:	09 f4       	brne	.+2      	; 0xb7a <_fpadd_parts+0x19a>
     b78:	45 c0       	rjmp	.+138    	; 0xc04 <_fpadd_parts+0x224>
     b7a:	88 23       	and	r24, r24
     b7c:	49 f0       	breq	.+18     	; 0xb90 <_fpadd_parts+0x1b0>
     b7e:	d8 01       	movw	r26, r16
     b80:	c7 01       	movw	r24, r14
     b82:	82 1b       	sub	r24, r18
     b84:	93 0b       	sbc	r25, r19
     b86:	a4 0b       	sbc	r26, r20
     b88:	b5 0b       	sbc	r27, r21
     b8a:	9c 01       	movw	r18, r24
     b8c:	ad 01       	movw	r20, r26
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <_fpadd_parts+0x1b8>
     b90:	2e 19       	sub	r18, r14
     b92:	3f 09       	sbc	r19, r15
     b94:	40 0b       	sbc	r20, r16
     b96:	51 0b       	sbc	r21, r17
     b98:	57 fd       	sbrc	r21, 7
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <_fpadd_parts+0x1c4>
     b9c:	19 82       	std	Y+1, r1	; 0x01
     b9e:	db 82       	std	Y+3, r13	; 0x03
     ba0:	ca 82       	std	Y+2, r12	; 0x02
     ba2:	0b c0       	rjmp	.+22     	; 0xbba <_fpadd_parts+0x1da>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	db 82       	std	Y+3, r13	; 0x03
     baa:	ca 82       	std	Y+2, r12	; 0x02
     bac:	50 95       	com	r21
     bae:	40 95       	com	r20
     bb0:	30 95       	com	r19
     bb2:	21 95       	neg	r18
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	4f 4f       	sbci	r20, 0xFF	; 255
     bb8:	5f 4f       	sbci	r21, 0xFF	; 255
     bba:	2c 83       	std	Y+4, r18	; 0x04
     bbc:	3d 83       	std	Y+5, r19	; 0x05
     bbe:	4e 83       	std	Y+6, r20	; 0x06
     bc0:	5f 83       	std	Y+7, r21	; 0x07
     bc2:	0d c0       	rjmp	.+26     	; 0xbde <_fpadd_parts+0x1fe>
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	aa 1f       	adc	r26, r26
     bca:	bb 1f       	adc	r27, r27
     bcc:	8c 83       	std	Y+4, r24	; 0x04
     bce:	9d 83       	std	Y+5, r25	; 0x05
     bd0:	ae 83       	std	Y+6, r26	; 0x06
     bd2:	bf 83       	std	Y+7, r27	; 0x07
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	9b 81       	ldd	r25, Y+3	; 0x03
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	9b 83       	std	Y+3, r25	; 0x03
     bdc:	8a 83       	std	Y+2, r24	; 0x02
     bde:	8c 81       	ldd	r24, Y+4	; 0x04
     be0:	9d 81       	ldd	r25, Y+5	; 0x05
     be2:	ae 81       	ldd	r26, Y+6	; 0x06
     be4:	bf 81       	ldd	r27, Y+7	; 0x07
     be6:	9c 01       	movw	r18, r24
     be8:	ad 01       	movw	r20, r26
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	30 40       	sbci	r19, 0x00	; 0
     bee:	40 40       	sbci	r20, 0x00	; 0
     bf0:	50 40       	sbci	r21, 0x00	; 0
     bf2:	2f 3f       	cpi	r18, 0xFF	; 255
     bf4:	ef ef       	ldi	r30, 0xFF	; 255
     bf6:	3e 07       	cpc	r19, r30
     bf8:	ef ef       	ldi	r30, 0xFF	; 255
     bfa:	4e 07       	cpc	r20, r30
     bfc:	ef e3       	ldi	r30, 0x3F	; 63
     bfe:	5e 07       	cpc	r21, r30
     c00:	08 f3       	brcs	.-62     	; 0xbc4 <_fpadd_parts+0x1e4>
     c02:	0b c0       	rjmp	.+22     	; 0xc1a <_fpadd_parts+0x23a>
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	db 82       	std	Y+3, r13	; 0x03
     c08:	ca 82       	std	Y+2, r12	; 0x02
     c0a:	2e 0d       	add	r18, r14
     c0c:	3f 1d       	adc	r19, r15
     c0e:	40 1f       	adc	r20, r16
     c10:	51 1f       	adc	r21, r17
     c12:	2c 83       	std	Y+4, r18	; 0x04
     c14:	3d 83       	std	Y+5, r19	; 0x05
     c16:	4e 83       	std	Y+6, r20	; 0x06
     c18:	5f 83       	std	Y+7, r21	; 0x07
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	88 83       	st	Y, r24
     c1e:	2c 81       	ldd	r18, Y+4	; 0x04
     c20:	3d 81       	ldd	r19, Y+5	; 0x05
     c22:	4e 81       	ldd	r20, Y+6	; 0x06
     c24:	5f 81       	ldd	r21, Y+7	; 0x07
     c26:	57 ff       	sbrs	r21, 7
     c28:	1d c0       	rjmp	.+58     	; 0xc64 <_fpadd_parts+0x284>
     c2a:	da 01       	movw	r26, r20
     c2c:	c9 01       	movw	r24, r18
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	a0 70       	andi	r26, 0x00	; 0
     c34:	b0 70       	andi	r27, 0x00	; 0
     c36:	56 95       	lsr	r21
     c38:	47 95       	ror	r20
     c3a:	37 95       	ror	r19
     c3c:	27 95       	ror	r18
     c3e:	82 2b       	or	r24, r18
     c40:	93 2b       	or	r25, r19
     c42:	a4 2b       	or	r26, r20
     c44:	b5 2b       	or	r27, r21
     c46:	8c 83       	std	Y+4, r24	; 0x04
     c48:	9d 83       	std	Y+5, r25	; 0x05
     c4a:	ae 83       	std	Y+6, r26	; 0x06
     c4c:	bf 83       	std	Y+7, r27	; 0x07
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	9b 81       	ldd	r25, Y+3	; 0x03
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	9b 83       	std	Y+3, r25	; 0x03
     c56:	8a 83       	std	Y+2, r24	; 0x02
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <_fpadd_parts+0x284>
     c5a:	e2 e6       	ldi	r30, 0x62	; 98
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	03 c0       	rjmp	.+6      	; 0xc66 <_fpadd_parts+0x286>
     c60:	fb 01       	movw	r30, r22
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <_fpadd_parts+0x286>
     c64:	fe 01       	movw	r30, r28
     c66:	cf 01       	movw	r24, r30
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	ee e0       	ldi	r30, 0x0E	; 14
     c6e:	c6 c3       	rjmp	.+1932   	; 0x13fc <__epilogue_restores__+0x8>

00000c70 <__addsf3>:
     c70:	a0 e2       	ldi	r26, 0x20	; 32
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	ed e3       	ldi	r30, 0x3D	; 61
     c76:	f6 e0       	ldi	r31, 0x06	; 6
     c78:	ad c3       	rjmp	.+1882   	; 0x13d4 <__prologue_saves__+0x18>
     c7a:	69 83       	std	Y+1, r22	; 0x01
     c7c:	7a 83       	std	Y+2, r23	; 0x02
     c7e:	8b 83       	std	Y+3, r24	; 0x03
     c80:	9c 83       	std	Y+4, r25	; 0x04
     c82:	2d 83       	std	Y+5, r18	; 0x05
     c84:	3e 83       	std	Y+6, r19	; 0x06
     c86:	4f 83       	std	Y+7, r20	; 0x07
     c88:	58 87       	std	Y+8, r21	; 0x08
     c8a:	89 e0       	ldi	r24, 0x09	; 9
     c8c:	e8 2e       	mov	r14, r24
     c8e:	f1 2c       	mov	r15, r1
     c90:	ec 0e       	add	r14, r28
     c92:	fd 1e       	adc	r15, r29
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	b7 01       	movw	r22, r14
     c9a:	ce d2       	rcall	.+1436   	; 0x1238 <__unpack_f>
     c9c:	8e 01       	movw	r16, r28
     c9e:	0f 5e       	subi	r16, 0xEF	; 239
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	ce 01       	movw	r24, r28
     ca4:	05 96       	adiw	r24, 0x05	; 5
     ca6:	b8 01       	movw	r22, r16
     ca8:	c7 d2       	rcall	.+1422   	; 0x1238 <__unpack_f>
     caa:	c7 01       	movw	r24, r14
     cac:	b8 01       	movw	r22, r16
     cae:	ae 01       	movw	r20, r28
     cb0:	47 5e       	subi	r20, 0xE7	; 231
     cb2:	5f 4f       	sbci	r21, 0xFF	; 255
     cb4:	95 de       	rcall	.-726    	; 0x9e0 <_fpadd_parts>
     cb6:	f3 d1       	rcall	.+998    	; 0x109e <__pack_f>
     cb8:	a0 96       	adiw	r28, 0x20	; 32
     cba:	e6 e0       	ldi	r30, 0x06	; 6
     cbc:	a7 c3       	rjmp	.+1870   	; 0x140c <__epilogue_restores__+0x18>

00000cbe <__subsf3>:
     cbe:	a0 e2       	ldi	r26, 0x20	; 32
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e4 e6       	ldi	r30, 0x64	; 100
     cc4:	f6 e0       	ldi	r31, 0x06	; 6
     cc6:	86 c3       	rjmp	.+1804   	; 0x13d4 <__prologue_saves__+0x18>
     cc8:	69 83       	std	Y+1, r22	; 0x01
     cca:	7a 83       	std	Y+2, r23	; 0x02
     ccc:	8b 83       	std	Y+3, r24	; 0x03
     cce:	9c 83       	std	Y+4, r25	; 0x04
     cd0:	2d 83       	std	Y+5, r18	; 0x05
     cd2:	3e 83       	std	Y+6, r19	; 0x06
     cd4:	4f 83       	std	Y+7, r20	; 0x07
     cd6:	58 87       	std	Y+8, r21	; 0x08
     cd8:	8e 01       	movw	r16, r28
     cda:	07 5f       	subi	r16, 0xF7	; 247
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	b8 01       	movw	r22, r16
     ce4:	a9 d2       	rcall	.+1362   	; 0x1238 <__unpack_f>
     ce6:	91 e1       	ldi	r25, 0x11	; 17
     ce8:	e9 2e       	mov	r14, r25
     cea:	f1 2c       	mov	r15, r1
     cec:	ec 0e       	add	r14, r28
     cee:	fd 1e       	adc	r15, r29
     cf0:	ce 01       	movw	r24, r28
     cf2:	05 96       	adiw	r24, 0x05	; 5
     cf4:	b7 01       	movw	r22, r14
     cf6:	a0 d2       	rcall	.+1344   	; 0x1238 <__unpack_f>
     cf8:	8a 89       	ldd	r24, Y+18	; 0x12
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	89 27       	eor	r24, r25
     cfe:	8a 8b       	std	Y+18, r24	; 0x12
     d00:	c8 01       	movw	r24, r16
     d02:	b7 01       	movw	r22, r14
     d04:	ae 01       	movw	r20, r28
     d06:	47 5e       	subi	r20, 0xE7	; 231
     d08:	5f 4f       	sbci	r21, 0xFF	; 255
     d0a:	6a de       	rcall	.-812    	; 0x9e0 <_fpadd_parts>
     d0c:	c8 d1       	rcall	.+912    	; 0x109e <__pack_f>
     d0e:	a0 96       	adiw	r28, 0x20	; 32
     d10:	e6 e0       	ldi	r30, 0x06	; 6
     d12:	7c c3       	rjmp	.+1784   	; 0x140c <__epilogue_restores__+0x18>

00000d14 <__mulsf3>:
     d14:	a0 e2       	ldi	r26, 0x20	; 32
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ef e8       	ldi	r30, 0x8F	; 143
     d1a:	f6 e0       	ldi	r31, 0x06	; 6
     d1c:	4f c3       	rjmp	.+1694   	; 0x13bc <__prologue_saves__>
     d1e:	69 83       	std	Y+1, r22	; 0x01
     d20:	7a 83       	std	Y+2, r23	; 0x02
     d22:	8b 83       	std	Y+3, r24	; 0x03
     d24:	9c 83       	std	Y+4, r25	; 0x04
     d26:	2d 83       	std	Y+5, r18	; 0x05
     d28:	3e 83       	std	Y+6, r19	; 0x06
     d2a:	4f 83       	std	Y+7, r20	; 0x07
     d2c:	58 87       	std	Y+8, r21	; 0x08
     d2e:	ce 01       	movw	r24, r28
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	be 01       	movw	r22, r28
     d34:	67 5f       	subi	r22, 0xF7	; 247
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	7f d2       	rcall	.+1278   	; 0x1238 <__unpack_f>
     d3a:	ce 01       	movw	r24, r28
     d3c:	05 96       	adiw	r24, 0x05	; 5
     d3e:	be 01       	movw	r22, r28
     d40:	6f 5e       	subi	r22, 0xEF	; 239
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	79 d2       	rcall	.+1266   	; 0x1238 <__unpack_f>
     d46:	99 85       	ldd	r25, Y+9	; 0x09
     d48:	92 30       	cpi	r25, 0x02	; 2
     d4a:	78 f0       	brcs	.+30     	; 0xd6a <__mulsf3+0x56>
     d4c:	89 89       	ldd	r24, Y+17	; 0x11
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	c0 f0       	brcs	.+48     	; 0xd82 <__mulsf3+0x6e>
     d52:	94 30       	cpi	r25, 0x04	; 4
     d54:	19 f4       	brne	.+6      	; 0xd5c <__mulsf3+0x48>
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	41 f4       	brne	.+16     	; 0xd6a <__mulsf3+0x56>
     d5a:	cb c0       	rjmp	.+406    	; 0xef2 <__mulsf3+0x1de>
     d5c:	84 30       	cpi	r24, 0x04	; 4
     d5e:	19 f4       	brne	.+6      	; 0xd66 <__mulsf3+0x52>
     d60:	92 30       	cpi	r25, 0x02	; 2
     d62:	79 f4       	brne	.+30     	; 0xd82 <__mulsf3+0x6e>
     d64:	c6 c0       	rjmp	.+396    	; 0xef2 <__mulsf3+0x1de>
     d66:	92 30       	cpi	r25, 0x02	; 2
     d68:	51 f4       	brne	.+20     	; 0xd7e <__mulsf3+0x6a>
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	2a 85       	ldd	r18, Y+10	; 0x0a
     d6e:	9a 89       	ldd	r25, Y+18	; 0x12
     d70:	29 17       	cp	r18, r25
     d72:	09 f4       	brne	.+2      	; 0xd76 <__mulsf3+0x62>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	8a 87       	std	Y+10, r24	; 0x0a
     d78:	ce 01       	movw	r24, r28
     d7a:	09 96       	adiw	r24, 0x09	; 9
     d7c:	bc c0       	rjmp	.+376    	; 0xef6 <__mulsf3+0x1e2>
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	51 f4       	brne	.+20     	; 0xd96 <__mulsf3+0x82>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	2a 85       	ldd	r18, Y+10	; 0x0a
     d86:	9a 89       	ldd	r25, Y+18	; 0x12
     d88:	29 17       	cp	r18, r25
     d8a:	09 f4       	brne	.+2      	; 0xd8e <__mulsf3+0x7a>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	8a 8b       	std	Y+18, r24	; 0x12
     d90:	ce 01       	movw	r24, r28
     d92:	41 96       	adiw	r24, 0x11	; 17
     d94:	b0 c0       	rjmp	.+352    	; 0xef6 <__mulsf3+0x1e2>
     d96:	6d 84       	ldd	r6, Y+13	; 0x0d
     d98:	7e 84       	ldd	r7, Y+14	; 0x0e
     d9a:	8f 84       	ldd	r8, Y+15	; 0x0f
     d9c:	98 88       	ldd	r9, Y+16	; 0x10
     d9e:	ed 88       	ldd	r14, Y+21	; 0x15
     da0:	fe 88       	ldd	r15, Y+22	; 0x16
     da2:	0f 89       	ldd	r16, Y+23	; 0x17
     da4:	18 8d       	ldd	r17, Y+24	; 0x18
     da6:	e0 e2       	ldi	r30, 0x20	; 32
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	dc 01       	movw	r26, r24
     db0:	aa 24       	eor	r10, r10
     db2:	bb 24       	eor	r11, r11
     db4:	65 01       	movw	r12, r10
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	a9 01       	movw	r20, r18
     dbc:	b3 01       	movw	r22, r6
     dbe:	61 70       	andi	r22, 0x01	; 1
     dc0:	70 70       	andi	r23, 0x00	; 0
     dc2:	61 15       	cp	r22, r1
     dc4:	71 05       	cpc	r23, r1
     dc6:	d1 f0       	breq	.+52     	; 0xdfc <__mulsf3+0xe8>
     dc8:	2e 0d       	add	r18, r14
     dca:	3f 1d       	adc	r19, r15
     dcc:	40 1f       	adc	r20, r16
     dce:	51 1f       	adc	r21, r17
     dd0:	15 01       	movw	r2, r10
     dd2:	26 01       	movw	r4, r12
     dd4:	28 0e       	add	r2, r24
     dd6:	39 1e       	adc	r3, r25
     dd8:	4a 1e       	adc	r4, r26
     dda:	5b 1e       	adc	r5, r27
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	2e 15       	cp	r18, r14
     de6:	3f 05       	cpc	r19, r15
     de8:	40 07       	cpc	r20, r16
     dea:	51 07       	cpc	r21, r17
     dec:	18 f0       	brcs	.+6      	; 0xdf4 <__mulsf3+0xe0>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	dc 01       	movw	r26, r24
     df4:	82 0d       	add	r24, r2
     df6:	93 1d       	adc	r25, r3
     df8:	a4 1d       	adc	r26, r4
     dfa:	b5 1d       	adc	r27, r5
     dfc:	aa 0c       	add	r10, r10
     dfe:	bb 1c       	adc	r11, r11
     e00:	cc 1c       	adc	r12, r12
     e02:	dd 1c       	adc	r13, r13
     e04:	17 ff       	sbrs	r17, 7
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <__mulsf3+0x106>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	26 2e       	mov	r2, r22
     e0c:	31 2c       	mov	r3, r1
     e0e:	41 2c       	mov	r4, r1
     e10:	51 2c       	mov	r5, r1
     e12:	a2 28       	or	r10, r2
     e14:	b3 28       	or	r11, r3
     e16:	c4 28       	or	r12, r4
     e18:	d5 28       	or	r13, r5
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	49 f0       	breq	.+18     	; 0xe30 <__mulsf3+0x11c>
     e1e:	ee 0c       	add	r14, r14
     e20:	ff 1c       	adc	r15, r15
     e22:	00 1f       	adc	r16, r16
     e24:	11 1f       	adc	r17, r17
     e26:	96 94       	lsr	r9
     e28:	87 94       	ror	r8
     e2a:	77 94       	ror	r7
     e2c:	67 94       	ror	r6
     e2e:	c6 cf       	rjmp	.-116    	; 0xdbc <__mulsf3+0xa8>
     e30:	6b 89       	ldd	r22, Y+19	; 0x13
     e32:	7c 89       	ldd	r23, Y+20	; 0x14
     e34:	eb 85       	ldd	r30, Y+11	; 0x0b
     e36:	fc 85       	ldd	r31, Y+12	; 0x0c
     e38:	6e 0f       	add	r22, r30
     e3a:	7f 1f       	adc	r23, r31
     e3c:	6e 5f       	subi	r22, 0xFE	; 254
     e3e:	7f 4f       	sbci	r23, 0xFF	; 255
     e40:	7c 8f       	std	Y+28, r23	; 0x1c
     e42:	6b 8f       	std	Y+27, r22	; 0x1b
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	ea 85       	ldd	r30, Y+10	; 0x0a
     e48:	7a 89       	ldd	r23, Y+18	; 0x12
     e4a:	e7 17       	cp	r30, r23
     e4c:	09 f4       	brne	.+2      	; 0xe50 <__mulsf3+0x13c>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	6a 8f       	std	Y+26, r22	; 0x1a
     e52:	6b 8d       	ldd	r22, Y+27	; 0x1b
     e54:	7c 8d       	ldd	r23, Y+28	; 0x1c
     e56:	10 c0       	rjmp	.+32     	; 0xe78 <__mulsf3+0x164>
     e58:	fc 01       	movw	r30, r24
     e5a:	e1 70       	andi	r30, 0x01	; 1
     e5c:	f0 70       	andi	r31, 0x00	; 0
     e5e:	30 97       	sbiw	r30, 0x00	; 0
     e60:	29 f0       	breq	.+10     	; 0xe6c <__mulsf3+0x158>
     e62:	56 95       	lsr	r21
     e64:	47 95       	ror	r20
     e66:	37 95       	ror	r19
     e68:	27 95       	ror	r18
     e6a:	50 68       	ori	r21, 0x80	; 128
     e6c:	b6 95       	lsr	r27
     e6e:	a7 95       	ror	r26
     e70:	97 95       	ror	r25
     e72:	87 95       	ror	r24
     e74:	6f 5f       	subi	r22, 0xFF	; 255
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	b7 fd       	sbrc	r27, 7
     e7a:	ee cf       	rjmp	.-36     	; 0xe58 <__mulsf3+0x144>
     e7c:	0c c0       	rjmp	.+24     	; 0xe96 <__mulsf3+0x182>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	aa 1f       	adc	r26, r26
     e84:	bb 1f       	adc	r27, r27
     e86:	57 fd       	sbrc	r21, 7
     e88:	81 60       	ori	r24, 0x01	; 1
     e8a:	22 0f       	add	r18, r18
     e8c:	33 1f       	adc	r19, r19
     e8e:	44 1f       	adc	r20, r20
     e90:	55 1f       	adc	r21, r21
     e92:	61 50       	subi	r22, 0x01	; 1
     e94:	70 40       	sbci	r23, 0x00	; 0
     e96:	80 30       	cpi	r24, 0x00	; 0
     e98:	e0 e0       	ldi	r30, 0x00	; 0
     e9a:	9e 07       	cpc	r25, r30
     e9c:	e0 e0       	ldi	r30, 0x00	; 0
     e9e:	ae 07       	cpc	r26, r30
     ea0:	e0 e4       	ldi	r30, 0x40	; 64
     ea2:	be 07       	cpc	r27, r30
     ea4:	60 f3       	brcs	.-40     	; 0xe7e <__mulsf3+0x16a>
     ea6:	6b 8f       	std	Y+27, r22	; 0x1b
     ea8:	7c 8f       	std	Y+28, r23	; 0x1c
     eaa:	6f e7       	ldi	r22, 0x7F	; 127
     eac:	e6 2e       	mov	r14, r22
     eae:	f1 2c       	mov	r15, r1
     eb0:	01 2d       	mov	r16, r1
     eb2:	11 2d       	mov	r17, r1
     eb4:	e8 22       	and	r14, r24
     eb6:	f9 22       	and	r15, r25
     eb8:	0a 23       	and	r16, r26
     eba:	1b 23       	and	r17, r27
     ebc:	60 e4       	ldi	r22, 0x40	; 64
     ebe:	e6 16       	cp	r14, r22
     ec0:	f1 04       	cpc	r15, r1
     ec2:	01 05       	cpc	r16, r1
     ec4:	11 05       	cpc	r17, r1
     ec6:	61 f4       	brne	.+24     	; 0xee0 <__mulsf3+0x1cc>
     ec8:	87 fd       	sbrc	r24, 7
     eca:	0a c0       	rjmp	.+20     	; 0xee0 <__mulsf3+0x1cc>
     ecc:	21 15       	cp	r18, r1
     ece:	31 05       	cpc	r19, r1
     ed0:	41 05       	cpc	r20, r1
     ed2:	51 05       	cpc	r21, r1
     ed4:	29 f0       	breq	.+10     	; 0xee0 <__mulsf3+0x1cc>
     ed6:	80 5c       	subi	r24, 0xC0	; 192
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	af 4f       	sbci	r26, 0xFF	; 255
     edc:	bf 4f       	sbci	r27, 0xFF	; 255
     ede:	80 78       	andi	r24, 0x80	; 128
     ee0:	8d 8f       	std	Y+29, r24	; 0x1d
     ee2:	9e 8f       	std	Y+30, r25	; 0x1e
     ee4:	af 8f       	std	Y+31, r26	; 0x1f
     ee6:	b8 a3       	std	Y+32, r27	; 0x20
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	89 8f       	std	Y+25, r24	; 0x19
     eec:	ce 01       	movw	r24, r28
     eee:	49 96       	adiw	r24, 0x19	; 25
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <__mulsf3+0x1e2>
     ef2:	82 e6       	ldi	r24, 0x62	; 98
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	d3 d0       	rcall	.+422    	; 0x109e <__pack_f>
     ef8:	a0 96       	adiw	r28, 0x20	; 32
     efa:	e2 e1       	ldi	r30, 0x12	; 18
     efc:	7b c2       	rjmp	.+1270   	; 0x13f4 <__epilogue_restores__>

00000efe <__gtsf2>:
     efe:	a8 e1       	ldi	r26, 0x18	; 24
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e4 e8       	ldi	r30, 0x84	; 132
     f04:	f7 e0       	ldi	r31, 0x07	; 7
     f06:	66 c2       	rjmp	.+1228   	; 0x13d4 <__prologue_saves__+0x18>
     f08:	69 83       	std	Y+1, r22	; 0x01
     f0a:	7a 83       	std	Y+2, r23	; 0x02
     f0c:	8b 83       	std	Y+3, r24	; 0x03
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	2d 83       	std	Y+5, r18	; 0x05
     f12:	3e 83       	std	Y+6, r19	; 0x06
     f14:	4f 83       	std	Y+7, r20	; 0x07
     f16:	58 87       	std	Y+8, r21	; 0x08
     f18:	8e 01       	movw	r16, r28
     f1a:	07 5f       	subi	r16, 0xF7	; 247
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	ce 01       	movw	r24, r28
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	b8 01       	movw	r22, r16
     f24:	89 d1       	rcall	.+786    	; 0x1238 <__unpack_f>
     f26:	81 e1       	ldi	r24, 0x11	; 17
     f28:	e8 2e       	mov	r14, r24
     f2a:	f1 2c       	mov	r15, r1
     f2c:	ec 0e       	add	r14, r28
     f2e:	fd 1e       	adc	r15, r29
     f30:	ce 01       	movw	r24, r28
     f32:	05 96       	adiw	r24, 0x05	; 5
     f34:	b7 01       	movw	r22, r14
     f36:	80 d1       	rcall	.+768    	; 0x1238 <__unpack_f>
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	38 f0       	brcs	.+14     	; 0xf4c <__gtsf2+0x4e>
     f3e:	89 89       	ldd	r24, Y+17	; 0x11
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	20 f0       	brcs	.+8      	; 0xf4c <__gtsf2+0x4e>
     f44:	c8 01       	movw	r24, r16
     f46:	b7 01       	movw	r22, r14
     f48:	e0 d1       	rcall	.+960    	; 0x130a <__fpcmp_parts_f>
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <__gtsf2+0x50>
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	68 96       	adiw	r28, 0x18	; 24
     f50:	e6 e0       	ldi	r30, 0x06	; 6
     f52:	5c c2       	rjmp	.+1208   	; 0x140c <__epilogue_restores__+0x18>

00000f54 <__gesf2>:
     f54:	a8 e1       	ldi	r26, 0x18	; 24
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ef ea       	ldi	r30, 0xAF	; 175
     f5a:	f7 e0       	ldi	r31, 0x07	; 7
     f5c:	3b c2       	rjmp	.+1142   	; 0x13d4 <__prologue_saves__+0x18>
     f5e:	69 83       	std	Y+1, r22	; 0x01
     f60:	7a 83       	std	Y+2, r23	; 0x02
     f62:	8b 83       	std	Y+3, r24	; 0x03
     f64:	9c 83       	std	Y+4, r25	; 0x04
     f66:	2d 83       	std	Y+5, r18	; 0x05
     f68:	3e 83       	std	Y+6, r19	; 0x06
     f6a:	4f 83       	std	Y+7, r20	; 0x07
     f6c:	58 87       	std	Y+8, r21	; 0x08
     f6e:	8e 01       	movw	r16, r28
     f70:	07 5f       	subi	r16, 0xF7	; 247
     f72:	1f 4f       	sbci	r17, 0xFF	; 255
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	b8 01       	movw	r22, r16
     f7a:	5e d1       	rcall	.+700    	; 0x1238 <__unpack_f>
     f7c:	81 e1       	ldi	r24, 0x11	; 17
     f7e:	e8 2e       	mov	r14, r24
     f80:	f1 2c       	mov	r15, r1
     f82:	ec 0e       	add	r14, r28
     f84:	fd 1e       	adc	r15, r29
     f86:	ce 01       	movw	r24, r28
     f88:	05 96       	adiw	r24, 0x05	; 5
     f8a:	b7 01       	movw	r22, r14
     f8c:	55 d1       	rcall	.+682    	; 0x1238 <__unpack_f>
     f8e:	89 85       	ldd	r24, Y+9	; 0x09
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	38 f0       	brcs	.+14     	; 0xfa2 <__gesf2+0x4e>
     f94:	89 89       	ldd	r24, Y+17	; 0x11
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <__gesf2+0x4e>
     f9a:	c8 01       	movw	r24, r16
     f9c:	b7 01       	movw	r22, r14
     f9e:	b5 d1       	rcall	.+874    	; 0x130a <__fpcmp_parts_f>
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <__gesf2+0x50>
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	68 96       	adiw	r28, 0x18	; 24
     fa6:	e6 e0       	ldi	r30, 0x06	; 6
     fa8:	31 c2       	rjmp	.+1122   	; 0x140c <__epilogue_restores__+0x18>

00000faa <__ltsf2>:
     faa:	a8 e1       	ldi	r26, 0x18	; 24
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ea ed       	ldi	r30, 0xDA	; 218
     fb0:	f7 e0       	ldi	r31, 0x07	; 7
     fb2:	10 c2       	rjmp	.+1056   	; 0x13d4 <__prologue_saves__+0x18>
     fb4:	69 83       	std	Y+1, r22	; 0x01
     fb6:	7a 83       	std	Y+2, r23	; 0x02
     fb8:	8b 83       	std	Y+3, r24	; 0x03
     fba:	9c 83       	std	Y+4, r25	; 0x04
     fbc:	2d 83       	std	Y+5, r18	; 0x05
     fbe:	3e 83       	std	Y+6, r19	; 0x06
     fc0:	4f 83       	std	Y+7, r20	; 0x07
     fc2:	58 87       	std	Y+8, r21	; 0x08
     fc4:	8e 01       	movw	r16, r28
     fc6:	07 5f       	subi	r16, 0xF7	; 247
     fc8:	1f 4f       	sbci	r17, 0xFF	; 255
     fca:	ce 01       	movw	r24, r28
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	b8 01       	movw	r22, r16
     fd0:	33 d1       	rcall	.+614    	; 0x1238 <__unpack_f>
     fd2:	81 e1       	ldi	r24, 0x11	; 17
     fd4:	e8 2e       	mov	r14, r24
     fd6:	f1 2c       	mov	r15, r1
     fd8:	ec 0e       	add	r14, r28
     fda:	fd 1e       	adc	r15, r29
     fdc:	ce 01       	movw	r24, r28
     fde:	05 96       	adiw	r24, 0x05	; 5
     fe0:	b7 01       	movw	r22, r14
     fe2:	2a d1       	rcall	.+596    	; 0x1238 <__unpack_f>
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	38 f0       	brcs	.+14     	; 0xff8 <__ltsf2+0x4e>
     fea:	89 89       	ldd	r24, Y+17	; 0x11
     fec:	82 30       	cpi	r24, 0x02	; 2
     fee:	20 f0       	brcs	.+8      	; 0xff8 <__ltsf2+0x4e>
     ff0:	c8 01       	movw	r24, r16
     ff2:	b7 01       	movw	r22, r14
     ff4:	8a d1       	rcall	.+788    	; 0x130a <__fpcmp_parts_f>
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <__ltsf2+0x50>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	68 96       	adiw	r28, 0x18	; 24
     ffc:	e6 e0       	ldi	r30, 0x06	; 6
     ffe:	06 c2       	rjmp	.+1036   	; 0x140c <__epilogue_restores__+0x18>

00001000 <__fixsfsi>:
    1000:	ac e0       	ldi	r26, 0x0C	; 12
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e0       	ldi	r30, 0x05	; 5
    1006:	f8 e0       	ldi	r31, 0x08	; 8
    1008:	e9 c1       	rjmp	.+978    	; 0x13dc <__prologue_saves__+0x20>
    100a:	69 83       	std	Y+1, r22	; 0x01
    100c:	7a 83       	std	Y+2, r23	; 0x02
    100e:	8b 83       	std	Y+3, r24	; 0x03
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	ce 01       	movw	r24, r28
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	be 01       	movw	r22, r28
    1018:	6b 5f       	subi	r22, 0xFB	; 251
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	0d d1       	rcall	.+538    	; 0x1238 <__unpack_f>
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	81 f1       	breq	.+96     	; 0x1084 <__fixsfsi+0x84>
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	70 f1       	brcs	.+92     	; 0x1084 <__fixsfsi+0x84>
    1028:	84 30       	cpi	r24, 0x04	; 4
    102a:	21 f4       	brne	.+8      	; 0x1034 <__fixsfsi+0x34>
    102c:	8e 81       	ldd	r24, Y+6	; 0x06
    102e:	88 23       	and	r24, r24
    1030:	69 f1       	breq	.+90     	; 0x108c <__fixsfsi+0x8c>
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <__fixsfsi+0x48>
    1034:	2f 81       	ldd	r18, Y+7	; 0x07
    1036:	38 85       	ldd	r19, Y+8	; 0x08
    1038:	37 fd       	sbrc	r19, 7
    103a:	24 c0       	rjmp	.+72     	; 0x1084 <__fixsfsi+0x84>
    103c:	6e 81       	ldd	r22, Y+6	; 0x06
    103e:	2f 31       	cpi	r18, 0x1F	; 31
    1040:	31 05       	cpc	r19, r1
    1042:	3c f0       	brlt	.+14     	; 0x1052 <__fixsfsi+0x52>
    1044:	66 23       	and	r22, r22
    1046:	11 f1       	breq	.+68     	; 0x108c <__fixsfsi+0x8c>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e8       	ldi	r21, 0x80	; 128
    1050:	21 c0       	rjmp	.+66     	; 0x1094 <__fixsfsi+0x94>
    1052:	8e e1       	ldi	r24, 0x1E	; 30
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	82 1b       	sub	r24, r18
    1058:	93 0b       	sbc	r25, r19
    105a:	29 85       	ldd	r18, Y+9	; 0x09
    105c:	3a 85       	ldd	r19, Y+10	; 0x0a
    105e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1060:	5c 85       	ldd	r21, Y+12	; 0x0c
    1062:	04 c0       	rjmp	.+8      	; 0x106c <__fixsfsi+0x6c>
    1064:	56 95       	lsr	r21
    1066:	47 95       	ror	r20
    1068:	37 95       	ror	r19
    106a:	27 95       	ror	r18
    106c:	8a 95       	dec	r24
    106e:	d2 f7       	brpl	.-12     	; 0x1064 <__fixsfsi+0x64>
    1070:	66 23       	and	r22, r22
    1072:	81 f0       	breq	.+32     	; 0x1094 <__fixsfsi+0x94>
    1074:	50 95       	com	r21
    1076:	40 95       	com	r20
    1078:	30 95       	com	r19
    107a:	21 95       	neg	r18
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
    107e:	4f 4f       	sbci	r20, 0xFF	; 255
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	08 c0       	rjmp	.+16     	; 0x1094 <__fixsfsi+0x94>
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	a9 01       	movw	r20, r18
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <__fixsfsi+0x94>
    108c:	2f ef       	ldi	r18, 0xFF	; 255
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	4f ef       	ldi	r20, 0xFF	; 255
    1092:	5f e7       	ldi	r21, 0x7F	; 127
    1094:	b9 01       	movw	r22, r18
    1096:	ca 01       	movw	r24, r20
    1098:	2c 96       	adiw	r28, 0x0c	; 12
    109a:	e2 e0       	ldi	r30, 0x02	; 2
    109c:	bb c1       	rjmp	.+886    	; 0x1414 <__epilogue_restores__+0x20>

0000109e <__pack_f>:
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	fc 01       	movw	r30, r24
    10ac:	24 81       	ldd	r18, Z+4	; 0x04
    10ae:	35 81       	ldd	r19, Z+5	; 0x05
    10b0:	46 81       	ldd	r20, Z+6	; 0x06
    10b2:	57 81       	ldd	r21, Z+7	; 0x07
    10b4:	61 81       	ldd	r22, Z+1	; 0x01
    10b6:	80 81       	ld	r24, Z
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	20 f4       	brcc	.+8      	; 0x10c4 <__pack_f+0x26>
    10bc:	40 61       	ori	r20, 0x10	; 16
    10be:	ef ef       	ldi	r30, 0xFF	; 255
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	a3 c0       	rjmp	.+326    	; 0x120a <__pack_f+0x16c>
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	09 f4       	brne	.+2      	; 0x10ca <__pack_f+0x2c>
    10c8:	9b c0       	rjmp	.+310    	; 0x1200 <__pack_f+0x162>
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <__pack_f+0x32>
    10ce:	92 c0       	rjmp	.+292    	; 0x11f4 <__pack_f+0x156>
    10d0:	21 15       	cp	r18, r1
    10d2:	31 05       	cpc	r19, r1
    10d4:	41 05       	cpc	r20, r1
    10d6:	51 05       	cpc	r21, r1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <__pack_f+0x3e>
    10da:	8f c0       	rjmp	.+286    	; 0x11fa <__pack_f+0x15c>
    10dc:	02 80       	ldd	r0, Z+2	; 0x02
    10de:	f3 81       	ldd	r31, Z+3	; 0x03
    10e0:	e0 2d       	mov	r30, r0
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	e2 38       	cpi	r30, 0x82	; 130
    10e6:	f8 07       	cpc	r31, r24
    10e8:	0c f0       	brlt	.+2      	; 0x10ec <__pack_f+0x4e>
    10ea:	5a c0       	rjmp	.+180    	; 0x11a0 <__pack_f+0x102>
    10ec:	c2 e8       	ldi	r28, 0x82	; 130
    10ee:	df ef       	ldi	r29, 0xFF	; 255
    10f0:	ce 1b       	sub	r28, r30
    10f2:	df 0b       	sbc	r29, r31
    10f4:	ca 31       	cpi	r28, 0x1A	; 26
    10f6:	d1 05       	cpc	r29, r1
    10f8:	6c f5       	brge	.+90     	; 0x1154 <__pack_f+0xb6>
    10fa:	79 01       	movw	r14, r18
    10fc:	8a 01       	movw	r16, r20
    10fe:	0c 2e       	mov	r0, r28
    1100:	04 c0       	rjmp	.+8      	; 0x110a <__pack_f+0x6c>
    1102:	16 95       	lsr	r17
    1104:	07 95       	ror	r16
    1106:	f7 94       	ror	r15
    1108:	e7 94       	ror	r14
    110a:	0a 94       	dec	r0
    110c:	d2 f7       	brpl	.-12     	; 0x1102 <__pack_f+0x64>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	0c 2e       	mov	r0, r28
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <__pack_f+0x84>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	aa 1f       	adc	r26, r26
    1120:	bb 1f       	adc	r27, r27
    1122:	0a 94       	dec	r0
    1124:	d2 f7       	brpl	.-12     	; 0x111a <__pack_f+0x7c>
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	a1 09       	sbc	r26, r1
    112a:	b1 09       	sbc	r27, r1
    112c:	82 23       	and	r24, r18
    112e:	93 23       	and	r25, r19
    1130:	a4 23       	and	r26, r20
    1132:	b5 23       	and	r27, r21
    1134:	21 e0       	ldi	r18, 0x01	; 1
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	a1 05       	cpc	r26, r1
    1140:	b1 05       	cpc	r27, r1
    1142:	19 f4       	brne	.+6      	; 0x114a <__pack_f+0xac>
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	a9 01       	movw	r20, r18
    114a:	2e 29       	or	r18, r14
    114c:	3f 29       	or	r19, r15
    114e:	40 2b       	or	r20, r16
    1150:	51 2b       	or	r21, r17
    1152:	03 c0       	rjmp	.+6      	; 0x115a <__pack_f+0xbc>
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	da 01       	movw	r26, r20
    115c:	c9 01       	movw	r24, r18
    115e:	8f 77       	andi	r24, 0x7F	; 127
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	a0 70       	andi	r26, 0x00	; 0
    1164:	b0 70       	andi	r27, 0x00	; 0
    1166:	80 34       	cpi	r24, 0x40	; 64
    1168:	91 05       	cpc	r25, r1
    116a:	a1 05       	cpc	r26, r1
    116c:	b1 05       	cpc	r27, r1
    116e:	39 f4       	brne	.+14     	; 0x117e <__pack_f+0xe0>
    1170:	27 ff       	sbrs	r18, 7
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <__pack_f+0xe8>
    1174:	20 5c       	subi	r18, 0xC0	; 192
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	4f 4f       	sbci	r20, 0xFF	; 255
    117a:	5f 4f       	sbci	r21, 0xFF	; 255
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <__pack_f+0xe8>
    117e:	21 5c       	subi	r18, 0xC1	; 193
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	4f 4f       	sbci	r20, 0xFF	; 255
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	e1 e0       	ldi	r30, 0x01	; 1
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	20 30       	cpi	r18, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	38 07       	cpc	r19, r24
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	48 07       	cpc	r20, r24
    1194:	80 e4       	ldi	r24, 0x40	; 64
    1196:	58 07       	cpc	r21, r24
    1198:	28 f5       	brcc	.+74     	; 0x11e4 <__pack_f+0x146>
    119a:	e0 e0       	ldi	r30, 0x00	; 0
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	22 c0       	rjmp	.+68     	; 0x11e4 <__pack_f+0x146>
    11a0:	e0 38       	cpi	r30, 0x80	; 128
    11a2:	f1 05       	cpc	r31, r1
    11a4:	6c f5       	brge	.+90     	; 0x1200 <__pack_f+0x162>
    11a6:	e1 58       	subi	r30, 0x81	; 129
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	da 01       	movw	r26, r20
    11ac:	c9 01       	movw	r24, r18
    11ae:	8f 77       	andi	r24, 0x7F	; 127
    11b0:	90 70       	andi	r25, 0x00	; 0
    11b2:	a0 70       	andi	r26, 0x00	; 0
    11b4:	b0 70       	andi	r27, 0x00	; 0
    11b6:	80 34       	cpi	r24, 0x40	; 64
    11b8:	91 05       	cpc	r25, r1
    11ba:	a1 05       	cpc	r26, r1
    11bc:	b1 05       	cpc	r27, r1
    11be:	39 f4       	brne	.+14     	; 0x11ce <__pack_f+0x130>
    11c0:	27 ff       	sbrs	r18, 7
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <__pack_f+0x138>
    11c4:	20 5c       	subi	r18, 0xC0	; 192
    11c6:	3f 4f       	sbci	r19, 0xFF	; 255
    11c8:	4f 4f       	sbci	r20, 0xFF	; 255
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <__pack_f+0x138>
    11ce:	21 5c       	subi	r18, 0xC1	; 193
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	4f 4f       	sbci	r20, 0xFF	; 255
    11d4:	5f 4f       	sbci	r21, 0xFF	; 255
    11d6:	57 ff       	sbrs	r21, 7
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <__pack_f+0x146>
    11da:	56 95       	lsr	r21
    11dc:	47 95       	ror	r20
    11de:	37 95       	ror	r19
    11e0:	27 95       	ror	r18
    11e2:	31 96       	adiw	r30, 0x01	; 1
    11e4:	87 e0       	ldi	r24, 0x07	; 7
    11e6:	56 95       	lsr	r21
    11e8:	47 95       	ror	r20
    11ea:	37 95       	ror	r19
    11ec:	27 95       	ror	r18
    11ee:	8a 95       	dec	r24
    11f0:	d1 f7       	brne	.-12     	; 0x11e6 <__pack_f+0x148>
    11f2:	0b c0       	rjmp	.+22     	; 0x120a <__pack_f+0x16c>
    11f4:	e0 e0       	ldi	r30, 0x00	; 0
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <__pack_f+0x166>
    11fa:	e0 e0       	ldi	r30, 0x00	; 0
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	05 c0       	rjmp	.+10     	; 0x120a <__pack_f+0x16c>
    1200:	ef ef       	ldi	r30, 0xFF	; 255
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	8e 2f       	mov	r24, r30
    120c:	87 95       	ror	r24
    120e:	88 27       	eor	r24, r24
    1210:	87 95       	ror	r24
    1212:	94 2f       	mov	r25, r20
    1214:	9f 77       	andi	r25, 0x7F	; 127
    1216:	67 95       	ror	r22
    1218:	66 27       	eor	r22, r22
    121a:	67 95       	ror	r22
    121c:	e6 95       	lsr	r30
    121e:	e2 2e       	mov	r14, r18
    1220:	a9 2f       	mov	r26, r25
    1222:	a8 2b       	or	r26, r24
    1224:	fe 2f       	mov	r31, r30
    1226:	f6 2b       	or	r31, r22
    1228:	62 2f       	mov	r22, r18
    122a:	73 2f       	mov	r23, r19
    122c:	8a 2f       	mov	r24, r26
    122e:	9f 2f       	mov	r25, r31
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	e6 e0       	ldi	r30, 0x06	; 6
    1236:	ea c0       	rjmp	.+468    	; 0x140c <__epilogue_restores__+0x18>

00001238 <__unpack_f>:
    1238:	dc 01       	movw	r26, r24
    123a:	fb 01       	movw	r30, r22
    123c:	2c 91       	ld	r18, X
    123e:	11 96       	adiw	r26, 0x01	; 1
    1240:	3c 91       	ld	r19, X
    1242:	11 97       	sbiw	r26, 0x01	; 1
    1244:	12 96       	adiw	r26, 0x02	; 2
    1246:	8c 91       	ld	r24, X
    1248:	12 97       	sbiw	r26, 0x02	; 2
    124a:	48 2f       	mov	r20, r24
    124c:	4f 77       	andi	r20, 0x7F	; 127
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	98 2f       	mov	r25, r24
    1252:	99 1f       	adc	r25, r25
    1254:	99 27       	eor	r25, r25
    1256:	99 1f       	adc	r25, r25
    1258:	13 96       	adiw	r26, 0x03	; 3
    125a:	6c 91       	ld	r22, X
    125c:	13 97       	sbiw	r26, 0x03	; 3
    125e:	86 2f       	mov	r24, r22
    1260:	88 0f       	add	r24, r24
    1262:	89 2b       	or	r24, r25
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	66 1f       	adc	r22, r22
    1268:	66 27       	eor	r22, r22
    126a:	66 1f       	adc	r22, r22
    126c:	61 83       	std	Z+1, r22	; 0x01
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	39 f5       	brne	.+78     	; 0x12c0 <__unpack_f+0x88>
    1272:	21 15       	cp	r18, r1
    1274:	31 05       	cpc	r19, r1
    1276:	41 05       	cpc	r20, r1
    1278:	51 05       	cpc	r21, r1
    127a:	11 f4       	brne	.+4      	; 0x1280 <__unpack_f+0x48>
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	29 c0       	rjmp	.+82     	; 0x12d2 <__unpack_f+0x9a>
    1280:	82 e8       	ldi	r24, 0x82	; 130
    1282:	9f ef       	ldi	r25, 0xFF	; 255
    1284:	93 83       	std	Z+3, r25	; 0x03
    1286:	82 83       	std	Z+2, r24	; 0x02
    1288:	67 e0       	ldi	r22, 0x07	; 7
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	44 1f       	adc	r20, r20
    1290:	55 1f       	adc	r21, r21
    1292:	6a 95       	dec	r22
    1294:	d1 f7       	brne	.-12     	; 0x128a <__unpack_f+0x52>
    1296:	83 e0       	ldi	r24, 0x03	; 3
    1298:	80 83       	st	Z, r24
    129a:	09 c0       	rjmp	.+18     	; 0x12ae <__unpack_f+0x76>
    129c:	22 0f       	add	r18, r18
    129e:	33 1f       	adc	r19, r19
    12a0:	44 1f       	adc	r20, r20
    12a2:	55 1f       	adc	r21, r21
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	93 83       	std	Z+3, r25	; 0x03
    12ac:	82 83       	std	Z+2, r24	; 0x02
    12ae:	20 30       	cpi	r18, 0x00	; 0
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	38 07       	cpc	r19, r24
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	48 07       	cpc	r20, r24
    12b8:	80 e4       	ldi	r24, 0x40	; 64
    12ba:	58 07       	cpc	r21, r24
    12bc:	78 f3       	brcs	.-34     	; 0x129c <__unpack_f+0x64>
    12be:	20 c0       	rjmp	.+64     	; 0x1300 <__unpack_f+0xc8>
    12c0:	8f 3f       	cpi	r24, 0xFF	; 255
    12c2:	91 05       	cpc	r25, r1
    12c4:	79 f4       	brne	.+30     	; 0x12e4 <__unpack_f+0xac>
    12c6:	21 15       	cp	r18, r1
    12c8:	31 05       	cpc	r19, r1
    12ca:	41 05       	cpc	r20, r1
    12cc:	51 05       	cpc	r21, r1
    12ce:	19 f4       	brne	.+6      	; 0x12d6 <__unpack_f+0x9e>
    12d0:	84 e0       	ldi	r24, 0x04	; 4
    12d2:	80 83       	st	Z, r24
    12d4:	08 95       	ret
    12d6:	44 ff       	sbrs	r20, 4
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <__unpack_f+0xa8>
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	80 83       	st	Z, r24
    12de:	10 c0       	rjmp	.+32     	; 0x1300 <__unpack_f+0xc8>
    12e0:	10 82       	st	Z, r1
    12e2:	0e c0       	rjmp	.+28     	; 0x1300 <__unpack_f+0xc8>
    12e4:	8f 57       	subi	r24, 0x7F	; 127
    12e6:	90 40       	sbci	r25, 0x00	; 0
    12e8:	93 83       	std	Z+3, r25	; 0x03
    12ea:	82 83       	std	Z+2, r24	; 0x02
    12ec:	83 e0       	ldi	r24, 0x03	; 3
    12ee:	80 83       	st	Z, r24
    12f0:	87 e0       	ldi	r24, 0x07	; 7
    12f2:	22 0f       	add	r18, r18
    12f4:	33 1f       	adc	r19, r19
    12f6:	44 1f       	adc	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	8a 95       	dec	r24
    12fc:	d1 f7       	brne	.-12     	; 0x12f2 <__unpack_f+0xba>
    12fe:	50 64       	ori	r21, 0x40	; 64
    1300:	24 83       	std	Z+4, r18	; 0x04
    1302:	35 83       	std	Z+5, r19	; 0x05
    1304:	46 83       	std	Z+6, r20	; 0x06
    1306:	57 83       	std	Z+7, r21	; 0x07
    1308:	08 95       	ret

0000130a <__fpcmp_parts_f>:
    130a:	fc 01       	movw	r30, r24
    130c:	db 01       	movw	r26, r22
    130e:	90 81       	ld	r25, Z
    1310:	92 30       	cpi	r25, 0x02	; 2
    1312:	08 f4       	brcc	.+2      	; 0x1316 <__fpcmp_parts_f+0xc>
    1314:	49 c0       	rjmp	.+146    	; 0x13a8 <__fpcmp_parts_f+0x9e>
    1316:	8c 91       	ld	r24, X
    1318:	82 30       	cpi	r24, 0x02	; 2
    131a:	08 f4       	brcc	.+2      	; 0x131e <__fpcmp_parts_f+0x14>
    131c:	45 c0       	rjmp	.+138    	; 0x13a8 <__fpcmp_parts_f+0x9e>
    131e:	94 30       	cpi	r25, 0x04	; 4
    1320:	51 f4       	brne	.+20     	; 0x1336 <__fpcmp_parts_f+0x2c>
    1322:	61 81       	ldd	r22, Z+1	; 0x01
    1324:	84 30       	cpi	r24, 0x04	; 4
    1326:	b1 f5       	brne	.+108    	; 0x1394 <__fpcmp_parts_f+0x8a>
    1328:	11 96       	adiw	r26, 0x01	; 1
    132a:	2c 91       	ld	r18, X
    132c:	11 97       	sbiw	r26, 0x01	; 1
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	26 1b       	sub	r18, r22
    1332:	31 09       	sbc	r19, r1
    1334:	41 c0       	rjmp	.+130    	; 0x13b8 <__fpcmp_parts_f+0xae>
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	21 f0       	breq	.+8      	; 0x1342 <__fpcmp_parts_f+0x38>
    133a:	92 30       	cpi	r25, 0x02	; 2
    133c:	41 f4       	brne	.+16     	; 0x134e <__fpcmp_parts_f+0x44>
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	b1 f1       	breq	.+108    	; 0x13ae <__fpcmp_parts_f+0xa4>
    1342:	11 96       	adiw	r26, 0x01	; 1
    1344:	8c 91       	ld	r24, X
    1346:	11 97       	sbiw	r26, 0x01	; 1
    1348:	88 23       	and	r24, r24
    134a:	a1 f1       	breq	.+104    	; 0x13b4 <__fpcmp_parts_f+0xaa>
    134c:	2d c0       	rjmp	.+90     	; 0x13a8 <__fpcmp_parts_f+0x9e>
    134e:	61 81       	ldd	r22, Z+1	; 0x01
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	01 f1       	breq	.+64     	; 0x1394 <__fpcmp_parts_f+0x8a>
    1354:	11 96       	adiw	r26, 0x01	; 1
    1356:	8c 91       	ld	r24, X
    1358:	11 97       	sbiw	r26, 0x01	; 1
    135a:	68 17       	cp	r22, r24
    135c:	d9 f4       	brne	.+54     	; 0x1394 <__fpcmp_parts_f+0x8a>
    135e:	22 81       	ldd	r18, Z+2	; 0x02
    1360:	33 81       	ldd	r19, Z+3	; 0x03
    1362:	12 96       	adiw	r26, 0x02	; 2
    1364:	8d 91       	ld	r24, X+
    1366:	9c 91       	ld	r25, X
    1368:	13 97       	sbiw	r26, 0x03	; 3
    136a:	82 17       	cp	r24, r18
    136c:	93 07       	cpc	r25, r19
    136e:	94 f0       	brlt	.+36     	; 0x1394 <__fpcmp_parts_f+0x8a>
    1370:	28 17       	cp	r18, r24
    1372:	39 07       	cpc	r19, r25
    1374:	bc f0       	brlt	.+46     	; 0x13a4 <__fpcmp_parts_f+0x9a>
    1376:	24 81       	ldd	r18, Z+4	; 0x04
    1378:	35 81       	ldd	r19, Z+5	; 0x05
    137a:	46 81       	ldd	r20, Z+6	; 0x06
    137c:	57 81       	ldd	r21, Z+7	; 0x07
    137e:	14 96       	adiw	r26, 0x04	; 4
    1380:	8d 91       	ld	r24, X+
    1382:	9d 91       	ld	r25, X+
    1384:	0d 90       	ld	r0, X+
    1386:	bc 91       	ld	r27, X
    1388:	a0 2d       	mov	r26, r0
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	a4 07       	cpc	r26, r20
    1390:	b5 07       	cpc	r27, r21
    1392:	18 f4       	brcc	.+6      	; 0x139a <__fpcmp_parts_f+0x90>
    1394:	66 23       	and	r22, r22
    1396:	41 f0       	breq	.+16     	; 0x13a8 <__fpcmp_parts_f+0x9e>
    1398:	0d c0       	rjmp	.+26     	; 0x13b4 <__fpcmp_parts_f+0xaa>
    139a:	28 17       	cp	r18, r24
    139c:	39 07       	cpc	r19, r25
    139e:	4a 07       	cpc	r20, r26
    13a0:	5b 07       	cpc	r21, r27
    13a2:	28 f4       	brcc	.+10     	; 0x13ae <__fpcmp_parts_f+0xa4>
    13a4:	66 23       	and	r22, r22
    13a6:	31 f0       	breq	.+12     	; 0x13b4 <__fpcmp_parts_f+0xaa>
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <__fpcmp_parts_f+0xae>
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <__fpcmp_parts_f+0xae>
    13b4:	2f ef       	ldi	r18, 0xFF	; 255
    13b6:	3f ef       	ldi	r19, 0xFF	; 255
    13b8:	c9 01       	movw	r24, r18
    13ba:	08 95       	ret

000013bc <__prologue_saves__>:
    13bc:	2f 92       	push	r2
    13be:	3f 92       	push	r3
    13c0:	4f 92       	push	r4
    13c2:	5f 92       	push	r5
    13c4:	6f 92       	push	r6
    13c6:	7f 92       	push	r7
    13c8:	8f 92       	push	r8
    13ca:	9f 92       	push	r9
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	ca 1b       	sub	r28, r26
    13e6:	db 0b       	sbc	r29, r27
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	09 94       	ijmp

000013f4 <__epilogue_restores__>:
    13f4:	2a 88       	ldd	r2, Y+18	; 0x12
    13f6:	39 88       	ldd	r3, Y+17	; 0x11
    13f8:	48 88       	ldd	r4, Y+16	; 0x10
    13fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    13fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    13fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1400:	8c 84       	ldd	r8, Y+12	; 0x0c
    1402:	9b 84       	ldd	r9, Y+11	; 0x0b
    1404:	aa 84       	ldd	r10, Y+10	; 0x0a
    1406:	b9 84       	ldd	r11, Y+9	; 0x09
    1408:	c8 84       	ldd	r12, Y+8	; 0x08
    140a:	df 80       	ldd	r13, Y+7	; 0x07
    140c:	ee 80       	ldd	r14, Y+6	; 0x06
    140e:	fd 80       	ldd	r15, Y+5	; 0x05
    1410:	0c 81       	ldd	r16, Y+4	; 0x04
    1412:	1b 81       	ldd	r17, Y+3	; 0x03
    1414:	aa 81       	ldd	r26, Y+2	; 0x02
    1416:	b9 81       	ldd	r27, Y+1	; 0x01
    1418:	ce 0f       	add	r28, r30
    141a:	d1 1d       	adc	r29, r1
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	ed 01       	movw	r28, r26
    1428:	08 95       	ret

0000142a <_exit>:
    142a:	f8 94       	cli

0000142c <__stop_program>:
    142c:	ff cf       	rjmp	.-2      	; 0x142c <__stop_program>
