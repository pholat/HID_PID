cscope 15 $HOME/workspace/HID_PID -q 0000001066 0000087288
	@AVR_Code/PORT/ascii.h

8 #i‚de‡
ASCII_H_


9 
	#ASCII_H_


	)

11 c⁄° 
uöt8_t
 
	gASCII
[][5] = {

	@AVR_Code/PORT/main.c

23 
	~<avr/io.h
>

24 
	~<avr/öãºu±.h
>

25 
	~<avr/pgm•a˚.h
>

26 
	~"pid.h
"

28 
	~"≥rùhs.h
"

29 
	~"maö.h
"

31 
	~"ascii.h
"

32 
	~"•i.h
"

33 
	~"n5110.h
"

39 
uöt8_t
 
	g¥zyro°1
=20;

40 
uöt8_t
 
	g¥zyro°2
=28;

43 
≥rùh_öô
();

45 
ms_dñay
(
uöt16_t
);

47 
öt16_t
 
Gë_Re„ªn˚
();

49 
	$maö
()

52 
uöt16_t
 
îr‹
;

53 
	`£i
();

55 
îr‹
=
	`pid_ˇlc
();

56 if(
PID_Fœg
) {

57 
OCR2
=
	`pid
(
îr‹
);

58 
PID_Fœg
=0;

60 
	`lcd_∂a˚
(0,4);

61 
	`lcd_°rög
("Err:");

62 
	`lcd_öt
(
îr‹
/100);

64 
	}
}

66 
öt16_t
 
	$Gë_Re„ªn˚
()

68 
uöt16_t
 
«°awa_ãmp
=0;

69 
Êag
) {

72 
«°awa_ãmp
=(
¥zyro°1
*
decys
);

75 
«°awa_ãmp
=9000;

79 
«°awa_ãmp
=(
¥zyro°2
*
decys
)+9000;

82 
«°awa_ãmp
=24500;

85 
«°awa_ãmp
=2500;

88  
«°awa_ãmp
;

89 
	}
}

92 
	$ISR
(
TIMER2_COMP_ve˘
)

95 (
ms
>999) ? (ms=0):(ms++);

97 (
ms
/100Ë? 
decys
++,
PID_Fœg
=1:decys;

99 (
decys
>600Ë? 
Êag
++ , decys=0: flag;

103 
uöt16_t
 
cou¡î
=0;

104 (
cou¡î
<1000) ? (counter++) : (counter=0);

105 (
pwm
<
cou¡î
Ë? (
PORTC
&=~(1<<
PC5
)) : (PORTC|=(1<<PC5));

106 
	}
}

108 
	$ms_dñay
(
uöt16_t
 
wh©
)

110 
uöt16_t
 
is
=
ms
+
wh©
;

111 
is
!=
ms
);

112 
	}
}

114 
	$≥rùh_öô
()

116 
	`adc_⁄
(1);

117 
	`pwm_⁄
();

118 
	`Inô
();

119 
	`•i_öô
();

120 
	`lcd_öô
();

121 
	`lcd_˛ór
();

122 
	}
}

	@AVR_Code/PORT/main.h

8 #i‚de‡
MAIN_H_


9 
	#MAIN_H_


	)

11 
	#PWM_MAX
 1000

	)

13 vﬁ©ûê
uöt16_t
 
	gms
=0;

14 vﬁ©ûê
uöt8_t
 
	gÊag
=0;

15 vﬁ©ûê
uöt16_t
 
	gdecys
=0;

16 vﬁ©ûê
uöt16_t
 
	gpwm
=0;

18 
ms_dñay
(
uöt16_t
 
wh©
);

19 
öt16_t
 
Gë_Re„ªn˚
();

	@AVR_Code/PORT/n5110.c

8 
	~"n5110.h
"

10 
	$lcd_wrôe_byã
(
s¸ìn
,
uöt8_t
 
d©a
)

12 
PORTD
&=~(1<<
SCE
);

13 if(
s¸ìn
Ë
PORTD
|=(1<<
DC
);

14 
PORTD
&=~(1<<
DC
);

15 
SPDR
 = 
d©a
;

16 !(
SPSR
&(1<<
SPIF
)));

17 
PORTD
|=(1<<
SCE
);

18 
	}
}

20 
	$lcd_öô
()

22 
PORTD
&=~(1<<
RES
);

24 
DDRD
|=(1<<
RES
)|(1<<
DC
)|(1<<
SCE
);

25 
DDRB
|=(1<<
SDIN
)|(1<<
SCKL
);

27 
DDRB
|=(1<<
PB2
);

29 
SPCR
 = (1<<
SPE
)|(1<<
MSTR
)|(1<<
SPR0
) ;

31 
	`ms_dñay
(15);

33 
PORTD
&=~(1<<
RES
);

34 
	`ms_dñay
(1);

35 
PORTD
|=(1<<
RES
);

36 
PORTD
&=~(1<<
SCE
);

37 
	`ms_dñay
(1);

38 
PORTD
|=(1<<
SCE
);

40 
	`ms_dñay
(1);

43 
	`lcd_wrôe_byã
(
CMD
, 0x21 );

44 
	`lcd_wrôe_byã
(
CMD
, 0xc8 );

45 
	`lcd_wrôe_byã
(
CMD
, 0x06 );

46 
	`lcd_wrôe_byã
(
CMD
, 0x13 );

47 
	`lcd_wrôe_byã
(
CMD
, 0x20 );

48 
	`lcd_˛ór
();

49 
	`lcd_wrôe_byã
(
CMD
, 0x0c );

51 
PORTD
&=~(1<<
SCE
);

52 
	`ms_dñay
(1);

53 
	}
}

56 
	$lcd_dŸ
()

58 
	`lcd_wrôe_byã
(
IMG
,0x00);

59 
	`lcd_wrôe_byã
(
IMG
,0x3C);

60 
	`lcd_wrôe_byã
(
IMG
,0x7E);

61 
	`lcd_wrôe_byã
(
IMG
,0x7E);

62 
	`lcd_wrôe_byã
(
IMG
,0xFC);

63 
	`lcd_wrôe_byã
(
IMG
,0xF8);

64 
	`lcd_wrôe_byã
(
IMG
,0xFC);

65 
	`lcd_wrôe_byã
(
IMG
,0x7E);

66 
	`lcd_wrôe_byã
(
IMG
,0x7E);

67 
	`lcd_wrôe_byã
(
IMG
,0x3C);

68 
	`lcd_wrôe_byã
(
IMG
,0x00);

69 
	}
}

71 
	$lcd_ch¨
(
ch¨a˘î
)

73 
	`lcd_wrôe_byã
(
IMG
,0x00);

74 
ödex
=0; index<5 ; index++Ë
	`lcd_wrôe_byã
(
IMG
,
ASCII
[
ch¨a˘î
-0x20][index]);

75 
	`lcd_wrôe_byã
(
IMG
,0x00);

76 
	}
}

78 
	$lcd_°rög
(*
°rögi
)

80 *
°rögi
Ë
	`lcd_ch¨
(*stringi++);

81 
	}
}

83 
	$lcd_∂a˚
(
uöt8_t
 
x
,uöt8_à
y
)

85 
	`lcd_wrôe_byã
(
CMD
,0x80|
x
);

86 
	`lcd_wrôe_byã
(
CMD
,0x40|
y
);

87 
	}
}

89 
	$lcd_˛ór
()

91 
	`lcd_wrôe_byã
(
CMD
,0x0c);

92 
	`lcd_wrôe_byã
(
CMD
,0x80);

93 
ödex
=0; index<504; index++Ë
	`lcd_wrôe_byã
(
IMG
,0x00);

94 
	}
}

96 
	$lcd_öt
(
uöt16_t
 
a
)

98 if(
a
/10Ë
	`lcd_öt
(a/10);

99 
	`lcd_wrôe_byã
(
IMG
,0x00);

100 
ödex
=0; index<5 ; index++Ë
	`lcd_wrôe_byã
(
IMG
,
ASCII
[(
a
%10)-0x20+'0'][index]);

101 
	`lcd_wrôe_byã
(
IMG
,0x00);

102 
	}
}

104 
	$lcd_bö
(
uöt8_t
 
hexÆ
)

106 
uöt8_t
 
a
=7;

107 
	`lcd_°rög
("b: ");

108 ; 
a
!=0;á--Ë
	`lcd_öt
((
hexÆ
&(1<<a))/(1<<a));

109 
	`lcd_öt
((
hexÆ
&(1<<
a
))/(1<<a));

110 
	}
}

	@AVR_Code/PORT/n5110.h

8 
	~<avr/io.h
>

9 
	~"ascii.h
"

10 
	~"maö.h
"

12 #i‚de‡
N5110_H_


13 
	#N5110_H_


	)

15 #i‚de‡
£tbô


16 
	#£tbô
(
x
,
y
Ëx|=(1<<y)

	)

19 #i‚de‡
˛órbô


20 
	#˛órbô
(
x
,
y
Ëx&=~(1<<y)

	)

23 #i‚de‡
√gbô


24 
	#√gbô
(
x
,
y
Ëx^=(1<<y)

	)

27 #i‚de‡
checkbô


28 
	#checkbô
(
x
,
y
Ëx&(1<<y)

	)

32 
	#SCE
 
PD7


33 
	#RES
 
PD4


34 
	#DC
 
PD5


35 
	#SDIN
 
PB3


36 
	#SCKL
 
PB5


38 
	#CMD
 0

39 
	#IMG
 1

40 
	#LCD_X
 84

41 
	#LCD_Y
 48

42 

	)

43 
lcd_wrôe_byã
(
s¸ìn
,
uöt8_t
 
d©a
);

44 
lcd_öô
();

45 
lcd_dŸ
();

46 
lcd_ch¨
(
ch¨a˘î
);

47 
lcd_°rög
(*
°rögi
);

48 
lcd_∂a˚
(
uöt8_t
,uint8_t);

49 
lcd_˛ór
();

50 
lcd_öt
(
uöt16_t
);

51 
lcd_bö
(
uöt8_t
);

	@AVR_Code/PORT/periphs.c

1 
	~"≥rùhs.h
"

3 
	$Inô
()

9 
TCCR1B
 = (1<<
CS12
);

10 
TIMSK
 = (1<<
TOIE0
);

11 
TCNT0
 = 0;

12 
	}
}

14 
öt16_t
 
	$Gë_Mósuªmít
()

16 
ADCSRA
 |(1<<
ADSC
);

17 
ADCSRA
 & (1<<
ADSC
));

18  
ADC
;

19 
	}
}

21 
	$adc_⁄
–
uöt8_t
 
öput
 )

23 
ADMUX
|=(1<<
REFS0
);

24 
öput
) {

27 
ADMUX
&=~((1<<
MUX1
)|(1<<
MUX0
));

30 
ADMUX
&=~(1<<
MUX1
);

31 
ADMUX
|=(1<<
MUX0
);

34 
ADMUX
|=(1<<
MUX1
);

35 
ADMUX
&=~(1<<
MUX0
);

38 
ADMUX
|=(1<<
MUX1
)|(1<<
MUX0
);

42 
ADCSRA
|=(1<<
ADEN
);

43 
ADCSRA
|=(1<<
ADPS1
);

44 
	}
}

46 
	$pwm_⁄
()

55 
TCCR2
|=(1<<
WGM21
);

56 
TCCR2
|=(1<<
CS21
)|(1<<
CS20
);

57 
TIMSK
|=(1<<
OCIE2
);

58 
OCR2
=250;

59 
	}
}

	@AVR_Code/PORT/periphs.h

8 #i‚de‡
PERIPHS_H_


9 
	#PERIPHS_H_


	)

11 
	~<avr/io.h
>

13 
Inô
();

14 
öt16_t
 
Gë_Mósuªmít
();

15 
adc_⁄
–
uöt8_t
 
öput
 );

16 
pwm_⁄
();

	@AVR_Code/PORT/pid.h

10 #i‚de‡
PID_H_


11 
	#PID_H_


	)

13 
	~<avr/io.h
>

14 
	~"maö.h
"

15 
	~"≥rùhs.h
"

16 
	~"±1000.h
"

18 vﬁ©ûê
uöt8_t
 
	gPID_Fœg
=0;

20 
uöt16_t
 
	gKP
=100;

21 
uöt16_t
 
	gKD
=0;

22 
uöt16_t
 
	gKI
=0;

30 
uöt8_t
 
	$pid
(
öt16_t
 
îr‹
)

32 
uöt16_t
 
ﬁd_îr‹
=0,
sum_îr‹
=0,
sub_îr‹
=0;

33 
sum_îr‹
=sum_îr‹+
îr‹
;

34 
sub_îr‹
=
îr‹
-
ﬁd_îr‹
;

35 
uöt8_t
 
£t
 = 0;

36 
£t
=
KP
*
îr‹
 + 
KI
*
sum_îr‹
 + 
KD
*
sub_îr‹
;

37 
ﬁd_îr‹
=
îr‹
;

39 (
£t
>
PWM_MAX
) ? (set=PWM_MAX) : (set < 1 ? set=0 : set);

40  
£t
;

41 
	}
}

43 
uöt16_t
 
	$pid_ˇlc
()

45 
uöt16_t
 
îr‹
 = 
	`pgm_ªad_w‹d_√¨
(
PT1000
 + 
	`Gë_Mósuªmít
());

46 
îr‹
 =Éº‹ - 
	`Gë_Re„ªn˚
();

47  
îr‹
;

48 
	}
}

	@AVR_Code/PORT/pt1000.h

8 #i‚de‡
PT1000_H_


9 
	#PT1000_H_


	)

10 
	~<avr/pgm•a˚.h
>

12 c⁄° 
uöt16_t
 
	gPT1000
[1024] 
	gPROGMEM
= {

	@AVR_Code/PORT/spi.c

8 
	~"•i.h
"

10 
	$•i_öô
()

14 
DDRB
|=(1<<
PB5
)|(1<<
PB3
)|(1<<
PB1
)|(1<<
PB0
);

16 
DDRB
|=(1<<
PB2
);

18 
SPCR
|=(1<<
SPE
)|(1<<
MSTR
)|(1<<
SPR0
);

26 
	}
}

28 
uöt8_t
 
	$•i_wrôe_byã
(
uöt8_t
 
cD©a
)

31 
SPDR
 = 
cD©a
;

33 !(
SPSR
&(1<<
SPIF
)));

35  
SPDR
;

36 
	}
}

	@AVR_Code/PORT/spi.h

8 #i‚de‡
SPI_H_


9 
	#SPI_H_


	)

11 
	~<avr/io.h
>

12 
•i_öô
();

13 
uöt8_t
 
•i_wrôe_byã
(uöt8_à
cD©a
);

	@AVR_Code/adc.c

9 
	~"adc.h
"

11 
	$adc_⁄
(
uöt8_t
 
mu…ùÀxî
,uöt8_à
°©us
)

13 
ADMUX
|=
mu…ùÀxî
;

14 
uöt8_t
 
a
=1;

15 
uöt8_t
 
i
=0;

16 
uöt16_t
 
˛ock
=
F_CPU
/1000;

17 
˛ock
/
a
>200) {

18 
a
=(a<<1);

19 
i
++;

21 if(
i
>7) i=7;

22 
ADCSRA
|=
i
;

23 
ADCSRA
|=
°©us
;

24 
	}
}

26 
uöt16_t
 
	$adc_⁄e
(
uöt8_t
 
pö
)

28 
ADMUX
&=~((1<<
MUX0
)|(1<<
MUX1
)|(1<<
MUX2
));

29 
ADMUX
|=
pö
;

30 
ADCSRA
|=(1<<
ADSC
);

31 
ADCSRA
&(1<<
ADSC
));

32 if(
ADMUX
&(1<<
ADLAR
)Ë 
ADCH
;

33  
ADC
;

35 
	}
}

37 
uöt16_t
 * 
	$adc_mu…ùÀ
(
uöt8_t
 
pös
)

39 
uöt16_t
 
wÆues
[7];

40 
uöt8_t
 
i
=0; i<6; i++Ëif(
pös
&(1<<i)Ë
wÆues
[i]=
	`adc_⁄e
(i);

41  
wÆues
;

42 
	}
}

44 
	$adc_off
()

46 
ADCSRA
&=~(1<<
ADEN
);

47 
	}
}

	@AVR_Code/adc.h

8 #i‚de‡
ADC_H_


9 
	#ADC_H_


	)

11 
	~<avr/io.h
>

12 
	~<avr/öãºu±.h
>

13 
	~<utû/dñay.h
>

15 
adc_⁄
(
uöt8_t
 
mu…ùÀxî
,uöt8_à
°©us
);

16 
uöt16_t
 
adc_⁄e
(
uöt8_t
 
pö
);

17 
uöt16_t
 * 
adc_mu…ùÀ
(
uöt8_t
 
pös
) ;

18 
adc_off
();

	@AVR_Code/ascii.h

8 #i‚de‡
ASCII_H_


9 
	#ASCII_H_


	)

11 c⁄° 
uöt8_t
 
	gASCII
[][5] = {

	@AVR_Code/main.c

16 
	~<avr/io.h
>

17 
	~<avr/öãºu±.h
>

18 
	~<avr/wdt.h
>

19 
	~"usbdrv/usbdrv.h
"

20 
	~<utû/dñay.h
>

21 
	~"adc.h
"

26 
	#DATA_READY
 (1<<0)

	)

27 
	#ONE_SECOND
 (1<<1)

	)

28 
	#NEW_DATA
 (1<<2)

	)

29 
uöt8_t
 vﬁ©ûê
	gÊag
 = 0;

30 
	#USB_DATA_SIZE
 8

32 

	)

33 
	#USB_DATA_OUT
 2

34 
	#USB_DATA_IN
 4

35 

	)

36 
	ebuf„rByã
 {

37 
	mFœg
,
	mTempYoungADC
,
	mTempOldADC
,
	mTempYoungSë
,
	mTempOldSë
,
	mPID_P
,
	mPID_I
,
	mPID_D


40 vﬁ©ûê
uöt8_t
 
	gª∂yBuf
[
USB_DATA_SIZE
]= {0,0,0,0,0,0,0,0};

41 
uch¨
 
	gd©aRe˚ived
 = 0, 
	gd©aLígth
 = 0;

43 
	uTwoByãs
 {

44 
uöt16_t
 
	mu16
;

45 
uöt8_t
 
	mu8
[2];

46 } 
	gTempSë
;

49 
USB_PUBLIC
 
uch¨
 
	$usbFun˘i⁄Sëup
(
uch¨
 *
d©a
)

51 
usbReque°_t
 *
rq
 = (*)
d©a
;

53 
rq
->
bReque°
) {

60 
USB_DATA_OUT
:

61 
usbMsgPå
 = 
ª∂yBuf
;

62  (
ª∂yBuf
);

69 
USB_DATA_IN
:

70 
d©aLígth
 = (
uch¨
)
rq
->
wLígth
.
w‹d
;

71 
d©aRe˚ived
 = 0;

73 if(
d©aLígth
 > (
ª∂yBuf
))

74 
d©aLígth
 = (
ª∂yBuf
);

75  
USB_NO_MSG
;

79 
	}
}

82 
USB_PUBLIC
 
uch¨
 
	$usbFun˘i⁄Wrôe
(
uch¨
 *
d©a
, uch¨ 
Àn
)

84 
uch¨
 
i
;

86 
i
 = 0; 
d©aRe˚ived
 < 
d©aLígth
 && i < 
Àn
; i++, dataReceived++) {

88 if(
i
!=
TempOldADC
 || i!=
TempYoungADC
Ë
ª∂yBuf
[
d©aRe˚ived
] = 
d©a
[i];

90  (
d©aRe˚ived
 =
d©aLígth
);

91 
	}
}

94 
	$maö
()

96 
ª∂yBuf
[
TempOldSë
]=0x03;

97 
ª∂yBuf
[
TempYoungSë
]=0xFF;

99 
uch¨
 
i
;

100 
DDRC
&=~(1<<
PC5
);

101 
PORTC
&=~(1<<
PC5
);

102 
DDRC
|=(1<<
PC1
)|(1<<
PC2
)|(1<<
PC3
)|(1<<
PC4
);

103 
PORTC
&=~(1<<
PC2
);

104 
PORTC
|=(1<<
PC1
);

107 
	`adc_⁄
(5|(1<<
REFS0
),(1<<
ADEN
)|(1<<
ADSC
) );

110 
	`wdt_íabÀ
(
WDTO_1S
);

111 
	`usbInô
();

112 
	`usbDevi˚Disc⁄√˘
();

113 
i
 = 0; i<250; i++) {

114 
	`wdt_ª£t
();

115 
	`_dñay_ms
(2);

117 
	`usbDevi˚C⁄√˘
();

118 
	`£i
();

119 
uöt16_t
 
cou¡î
=1;

122 
	`wdt_ª£t
();

123 
uöt16_t
 
öU£ADCvÆ
=
	`adc_⁄e
(5);

128 
ª∂yBuf
[
TempOldADC
]=(
ADC
>>8)&0x03;

129 
ª∂yBuf
[
TempYoungADC
]=(
ADC
&0xFF);

132 if((
cou¡î
==1)) {

133 
TempSë
.
u8
[1]=
ª∂yBuf
[
TempOldSë
];

134 
TempSë
.
u8
[0]=
ª∂yBuf
[
TempYoungSë
];

135 if(
öU£ADCvÆ
>
TempSë
.
u16
Ë
PORTC
|=(1<<
PC4
);

137 
PORTC
&=~(1<<
PC4
);

138 
PORTC
|=(1<<
PC3
);

140 
cou¡î
=250;

142 
cou¡î
--;

143 
	`_dñay_ms
(1);

157 
	`usbPﬁl
();

160 
	}
}

	@AVR_Code/n5110.c

8 
	~"n5110.h
"

10 
	$lcd_öô
()

12 
PORTD
&=~(1<<
RES
);

14 
DDRD
|=(1<<
RES
)|(1<<
DC
)|(1<<
SCE
);

15 
DDRB
|=(1<<
SDIN
)|(1<<
SCKL
);

17 
DDRB
|=(1<<
PB2
);

19 
SPCR
 = (1<<
SPE
)|(1<<
MSTR
)|(1<<
SPR0
) ;

21 
	`_dñay_ms
(15);

23 
PORTD
&=~(1<<
RES
);

24 
	`_dñay_us
(1);

25 
PORTD
|=(1<<
RES
);

26 
PORTD
&=~(1<<
SCE
);

27 
	`_dñay_us
(1);

28 
PORTD
|=(1<<
SCE
);

30 
	`_dñay_us
(1);

33 
	`lcd_wrôe_byã
(
CMD
, 0x21 );

34 
	`lcd_wrôe_byã
(
CMD
, 0xc8 );

35 
	`lcd_wrôe_byã
(
CMD
, 0x06 );

36 
	`lcd_wrôe_byã
(
CMD
, 0x13 );

37 
	`lcd_wrôe_byã
(
CMD
, 0x20 );

38 
	`lcd_˛ór
();

39 
	`lcd_wrôe_byã
(
CMD
, 0x0c );

41 
PORTD
&=~(1<<
SCE
);

42 
	`_dñay_us
(1);

43 
	}
}

45 
	$lcd_wrôe_byã
(
s¸ìn
,
uöt8_t
 
d©a
)

47 
PORTD
&=~(1<<
SCE
);

48 if(
s¸ìn
Ë
PORTD
|=(1<<
DC
);

49 
PORTD
&=~(1<<
DC
);

50 
SPDR
 = 
d©a
;

51 !(
SPSR
&(1<<
SPIF
)));

52 
PORTD
|=(1<<
SCE
);

53 
	}
}

56 
	$lcd_dŸ
()

58 
	`lcd_wrôe_byã
(
IMG
,0x00);

59 
	`lcd_wrôe_byã
(
IMG
,0x3C);

60 
	`lcd_wrôe_byã
(
IMG
,0x7E);

61 
	`lcd_wrôe_byã
(
IMG
,0x7E);

62 
	`lcd_wrôe_byã
(
IMG
,0xFC);

63 
	`lcd_wrôe_byã
(
IMG
,0xF8);

64 
	`lcd_wrôe_byã
(
IMG
,0xFC);

65 
	`lcd_wrôe_byã
(
IMG
,0x7E);

66 
	`lcd_wrôe_byã
(
IMG
,0x7E);

67 
	`lcd_wrôe_byã
(
IMG
,0x3C);

68 
	`lcd_wrôe_byã
(
IMG
,0x00);

69 
	}
}

71 
	$lcd_ch¨
(
ch¨a˘î
)

73 
	`lcd_wrôe_byã
(
IMG
,0x00);

74 
ödex
=0; index<5 ; index++Ë
	`lcd_wrôe_byã
(
IMG
,
ASCII
[
ch¨a˘î
-0x20][index]);

75 
	`lcd_wrôe_byã
(
IMG
,0x00);

76 
	}
}

78 
	$lcd_°rög
(*
°rögi
)

80 *
°rögi
Ë
	`lcd_ch¨
(*stringi++);

81 
	}
}

83 
	$lcd_∂a˚
(
uöt8_t
 
x
,uöt8_à
y
)

85 
	`lcd_wrôe_byã
(
CMD
,0x80|
x
);

86 
	`lcd_wrôe_byã
(
CMD
,0x40|
y
);

87 
	}
}

89 
	$lcd_˛ór
()

91 
	`lcd_wrôe_byã
(
CMD
,0x0c);

92 
	`lcd_wrôe_byã
(
CMD
,0x80);

93 
ödex
=0; index<504; index++Ë
	`lcd_wrôe_byã
(
IMG
,0x00);

94 
	}
}

96 
	$lcd_öt
(
uöt16_t
 
a
)

98 if(
a
/10Ë
	`lcd_öt
(a/10);

99 
	`lcd_wrôe_byã
(
IMG
,0x00);

100 
ödex
=0; index<5 ; index++Ë
	`lcd_wrôe_byã
(
IMG
,
ASCII
[(
a
%10)-0x20+'0'][index]);

101 
	`lcd_wrôe_byã
(
IMG
,0x00);

102 
	}
}

104 
	$lcd_bö
(
uöt8_t
 
hexÆ
)

106 
uöt8_t
 
a
=7;

107 
	`lcd_°rög
("b: ");

108 ; 
a
!=0;á--Ë
	`lcd_öt
((
hexÆ
&(1<<a))/(1<<a));

109 
	`lcd_öt
((
hexÆ
&(1<<
a
))/(1<<a));

110 
	}
}

	@AVR_Code/n5110.h

8 
	~<avr/io.h
>

9 
	~<utû/dñay.h
>

10 
	~"ascii.h
"

12 #i‚de‡
N5110_H_


13 
	#N5110_H_


	)

15 #i‚de‡
£tbô


16 
	#£tbô
(
x
,
y
Ëx|=(1<<y)

	)

19 #i‚de‡
˛órbô


20 
	#˛órbô
(
x
,
y
Ëx&=~(1<<y)

	)

23 #i‚de‡
√gbô


24 
	#√gbô
(
x
,
y
Ëx^=(1<<y)

	)

27 #i‚de‡
checkbô


28 
	#checkbô
(
x
,
y
Ëx&(1<<y)

	)

32 
	#SCE
 
PD7


33 
	#RES
 
PD4


34 
	#DC
 
PD5


35 
	#SDIN
 
PB3


36 
	#SCKL
 
PB5


38 
	#CMD
 0

39 
	#IMG
 1

40 
	#LCD_X
 84

41 
	#LCD_Y
 48

42 

	)

43 
lcd_wrôe_byã
(
s¸ìn
,
uöt8_t
 
d©a
);

44 
lcd_öô
();

45 
lcd_dŸ
();

46 
lcd_ch¨
(
ch¨a˘î
);

47 
lcd_°rög
(*
°rögi
);

48 
lcd_∂a˚
(
uöt8_t
,uint8_t);

49 
lcd_˛ór
();

50 
lcd_öt
(
uöt16_t
);

51 
lcd_bö
(
uöt8_t
);

	@AVR_Code/spi.c

8 
	~"•i.h
"

10 
	$•i_öô
()

14 
DDRB
|=(1<<
PB5
)|(1<<
PB3
)|(1<<
PB1
)|(1<<
PB0
);

16 
DDRB
|=(1<<
PB2
);

18 
SPCR
|=(1<<
SPE
)|(1<<
MSTR
)|(1<<
SPR0
);

26 
	}
}

28 
uöt8_t
 
	$•i_wrôe_byã
(
uöt8_t
 
cD©a
)

31 
SPDR
 = 
cD©a
;

33 !(
SPSR
&(1<<
SPIF
)));

35  
SPDR
;

36 
	}
}

	@AVR_Code/spi.h

8 #i‚de‡
SPI_H_


9 
	#SPI_H_


	)

11 
	~<avr/io.h
>

12 
•i_öô
();

13 
uöt8_t
 
•i_wrôe_byã
(uöt8_à
cD©a
);

	@AVR_Code/temptable.h

8 #i‚de‡
TEMPTABLE_H_


9 
	#TEMPTABLE_H_


	)

11 
uöt16_t
 
	gãmpTabÀ
[]= {

17 
uöt8_t
 
	gdñtTabÀ
[]= {

22 
uöt16_t
 
	$föd_ãmp
(
uöt16_t
 
ADC
)

24 
uöt16_t
 
ãm≥øtuª
=300;

26  
ãm≥øtuª
;

27 
	}
}

	@AVR_Code/usbdrv/oddebug.c

10 
	~"oddebug.h
"

12 #i‡
DEBUG_LEVEL
 > 0

16 
	$u¨tPutc
(
c
)

18 !(
ODDBG_USR
 & (1 << 
ODDBG_UDRE
)));

19 
ODDBG_UDR
 = 
c
;

20 
	}
}

22 
uch¨
 
	$hexAscii
(
uch¨
 
h
)

24 
h
 &= 0xf;

25 if(
h
 >= 10)

26 
h
 +'a' - (
uch¨
)10 - '0';

27 
h
 += '0';

28  
h
;

29 
	}
}

31 
	$¥ötHex
(
uch¨
 
c
)

33 
	`u¨tPutc
(
	`hexAscii
(
c
 >> 4));

34 
	`u¨tPutc
(
	`hexAscii
(
c
));

35 
	}
}

37 
	$odDebug
(
uch¨
 
¥efix
, uch¨ *
d©a
, uch¨ 
Àn
)

39 
	`¥ötHex
(
¥efix
);

40 
	`u¨tPutc
(':');

41 
Àn
--) {

42 
	`u¨tPutc
(' ');

43 
	`¥ötHex
(*
d©a
++);

45 
	`u¨tPutc
('\r');

46 
	`u¨tPutc
('\n');

47 
	}
}

	@AVR_Code/usbdrv/oddebug.h

10 #i‚de‡
__oddebug_h_ö˛uded__


11 
	#__oddebug_h_ö˛uded__


	)

26 #i‚de‡
F_CPU


27 
	#F_CPU
 12000000

	)

31 
	~"usbp‹èbûôy.h
"

33 #i‚de‡
uch¨


34 
	#uch¨
 

	)

37 #i‡
DEBUG_LEVEL
 > 0 && !(
deföed
 
TXEN
 || deföed 
TXEN0
)

39 #unde‡
DEBUG_LEVEL


42 #i‚de‡
DEBUG_LEVEL


43 
	#DEBUG_LEVEL
 0

	)

48 #i‡
DEBUG_LEVEL
 > 0

49 
	#DBG1
(
¥efix
, 
d©a
, 
Àn
Ë
	`odDebug
’ªfix, d©a,Üí)

	)

51 
	#DBG1
(
¥efix
, 
d©a
, 
Àn
)

	)

54 #i‡
DEBUG_LEVEL
 > 1

55 
	#DBG2
(
¥efix
, 
d©a
, 
Àn
Ë
	`odDebug
’ªfix, d©a,Üí)

	)

57 
	#DBG2
(
¥efix
, 
d©a
, 
Àn
)

	)

62 #i‡
DEBUG_LEVEL
 > 0

63 
odDebug
(
uch¨
 
¥efix
, uch¨ *
d©a
, uch¨ 
Àn
);

67 #i‡
deföed
 
UBRR


68 
	#ODDBG_UBRR
 
UBRR


	)

69 #ñi‡
deföed
 
UBRRL


70 
	#ODDBG_UBRR
 
UBRRL


	)

71 #ñi‡
deföed
 
UBRR0


72 
	#ODDBG_UBRR
 
UBRR0


	)

73 #ñi‡
deföed
 
UBRR0L


74 
	#ODDBG_UBRR
 
UBRR0L


	)

77 #i‡
deföed
 
UCR


78 
	#ODDBG_UCR
 
UCR


	)

79 #ñi‡
deföed
 
UCSRB


80 
	#ODDBG_UCR
 
UCSRB


	)

81 #ñi‡
deföed
 
UCSR0B


82 
	#ODDBG_UCR
 
UCSR0B


	)

85 #i‡
deföed
 
TXEN


86 
	#ODDBG_TXEN
 
TXEN


	)

88 
	#ODDBG_TXEN
 
TXEN0


	)

91 #i‡
deföed
 
USR


92 
	#ODDBG_USR
 
USR


	)

93 #ñi‡
deföed
 
UCSRA


94 
	#ODDBG_USR
 
UCSRA


	)

95 #ñi‡
deföed
 
UCSR0A


96 
	#ODDBG_USR
 
UCSR0A


	)

99 #i‡
deföed
 
UDRE


100 
	#ODDBG_UDRE
 
UDRE


	)

102 
	#ODDBG_UDRE
 
UDRE0


	)

105 #i‡
deföed
 
UDR


106 
	#ODDBG_UDR
 
UDR


	)

107 #ñi‡
deföed
 
UDR0


108 
	#ODDBG_UDR
 
UDR0


	)

111 
ölöe
 
	$odDebugInô
()

113 
ODDBG_UCR
 |(1<<
ODDBG_TXEN
);

114 
ODDBG_UBRR
 = 
F_CPU
 / (19200 * 16L) - 1;

115 
	}
}

117 
	#odDebugInô
()

	)

	@AVR_Code/usbdrv/usbconfig.h

10 #i‚de‡
__usbc⁄fig_h_ö˛uded__


11 
	#__usbc⁄fig_h_ö˛uded__


	)

28 
	#USB_CFG_IOPORTNAME
 
D


	)

32 
	#USB_CFG_DMINUS_BIT
 0

	)

36 
	#USB_CFG_DPLUS_BIT
 3

	)

45 
	#USB_CFG_CLOCK_KHZ
 12000

	)

54 
	#USB_CFG_CHECK_CRC
 0

	)

77 
	#USB_CFG_HAVE_INTRIN_ENDPOINT
 0

	)

82 
	#USB_CFG_HAVE_INTRIN_ENDPOINT3
 0

	)

88 
	#USB_CFG_EP3_NUMBER
 3

	)

98 
	#USB_CFG_IMPLEMENT_HALT
 0

	)

104 
	#USB_CFG_SUPPRESS_INTR_CODE
 0

	)

112 
	#USB_CFG_INTR_POLL_INTERVAL
 10

	)

117 
	#USB_CFG_IS_SELF_POWERED
 0

	)

121 
	#USB_CFG_MAX_BUS_POWER
 120

	)

126 
	#USB_CFG_IMPLEMENT_FN_WRITE
 1

	)

131 
	#USB_CFG_IMPLEMENT_FN_READ
 0

	)

137 
	#USB_CFG_IMPLEMENT_FN_WRITEOUT
 0

	)

143 
	#USB_CFG_HAVE_FLOWCONTROL
 0

	)

148 
	#USB_CFG_DRIVER_FLASH_PAGE
 0

	)

153 
	#USB_CFG_LONG_TRANSFERS
 0

	)

174 
	#USB_COUNT_SOF
 0

	)

198 
	#USB_CFG_CHECK_DATA_TOGGLING
 0

	)

206 
	#USB_CFG_HAVE_MEASURE_FRAME_LENGTH
 0

	)

210 
	#USB_USE_FAST_CRC
 0

	)

221 
	#USB_CFG_VENDOR_ID
 0xc0, 0x16

	)

230 
	#USB_CFG_DEVICE_ID
 0xdc, 0x05

	)

241 
	#USB_CFG_DEVICE_VERSION
 0x00, 0x01

	)

244 
	#USB_CFG_VENDOR_NAME
 'P', 'h', 'l', 't', '_', 'm', '8', 'b', 'r', 'd'

	)

245 
	#USB_CFG_VENDOR_NAME_LEN
 10

	)

254 
	#USB_CFG_DEVICE_NAME
 'T', 'e', 's', 't'

	)

255 
	#USB_CFG_DEVICE_NAME_LEN
 4

	)

269 
	#USB_CFG_DEVICE_CLASS
 0xf‡

	)

270 
	#USB_CFG_DEVICE_SUBCLASS
 0

	)

274 
	#USB_CFG_INTERFACE_CLASS
 0

	)

275 
	#USB_CFG_INTERFACE_SUBCLASS
 0

	)

276 
	#USB_CFG_INTERFACE_PROTOCOL
 0

	)

347 
	#USB_CFG_DESCR_PROPS_DEVICE
 0

	)

348 
	#USB_CFG_DESCR_PROPS_CONFIGURATION
 0

	)

349 
	#USB_CFG_DESCR_PROPS_STRINGS
 0

	)

350 
	#USB_CFG_DESCR_PROPS_STRING_0
 0

	)

351 
	#USB_CFG_DESCR_PROPS_STRING_VENDOR
 0

	)

352 
	#USB_CFG_DESCR_PROPS_STRING_PRODUCT
 0

	)

353 
	#USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER
 0

	)

354 
	#USB_CFG_DESCR_PROPS_HID
 0

	)

355 
	#USB_CFG_DESCR_PROPS_HID_REPORT
 0

	)

356 
	#USB_CFG_DESCR_PROPS_UNKNOWN
 0

	)

359 
	#usbMsgPå_t
 

	)

376 
	#USB_INTR_CFG_SET
 ((1 << 
ISC10
Ë| (1 << 
ISC11
))

	)

377 
	#USB_INTR_CFG_CLR
 0

	)

379 
	#USB_INTR_ENABLE_BIT
 
INT1


	)

381 
	#USB_INTR_PENDING_BIT
 
INTF1


	)

382 
	#USB_INTR_VECTOR
 
INT1_ve˘


	)

	@AVR_Code/usbdrv/usbdrv.c

10 
	~"usbdrv.h
"

11 
	~"oddebug.h
"

22 
uch¨
 
	gusbRxBuf
[2*
USB_BUFSIZE
];

23 
uch¨
 
	gusbI≈utBufOff£t
;

24 
uch¨
 
	gusbDevi˚Addr
;

25 
uch¨
 
	gusbNewDevi˚Addr
;

26 
uch¨
 
	gusbC⁄figuøti⁄
;

27 vﬁ©ûê
sch¨
 
	gusbRxLí
;

28 
uch¨
 
	gusbCuºítTok
;

29 
uch¨
 
	gusbRxTokí
;

30 vﬁ©ûê
uch¨
 
	gusbTxLí
 = 
USBPID_NAK
;

31 
uch¨
 
	gusbTxBuf
[
USB_BUFSIZE
];

32 #i‡
USB_COUNT_SOF


33 vﬁ©ûê
uch¨
 
	gusbSofCou¡
;

35 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT
 && !
USB_CFG_SUPPRESS_INTR_CODE


36 
usbTxSètus_t
 
	gusbTxSètus1
;

37 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT3


38 
usbTxSètus_t
 
	gusbTxSètus3
;

41 #i‡
USB_CFG_CHECK_DATA_TOGGLING


42 
uch¨
 
	gusbCuºítD©aTokí
;

46 
usbMsgPå_t
 
	gusbMsgPå
;

47 
usbMsgLí_t
 
	gusbMsgLí
 = 
USB_NO_MSG
;

48 
uch¨
 
	gusbMsgFœgs
;

50 
	#USB_FLG_MSGPTR_IS_ROM
 (1<<6)

	)

51 
	#USB_FLG_USE_USER_RW
 (1<<7)

	)

63 #i‡
USB_CFG_DESCR_PROPS_STRINGS
 == 0

65 #i‡
USB_CFG_DESCR_PROPS_STRING_0
 == 0

66 #unde‡
USB_CFG_DESCR_PROPS_STRING_0


67 
	#USB_CFG_DESCR_PROPS_STRING_0
 (
usbDes¸ùt‹Såög0
)

	)

68 
PROGMEM
 c⁄° 
	gusbDes¸ùt‹Såög0
[] = {

75 #i‡
USB_CFG_DESCR_PROPS_STRING_VENDOR
 =0 && 
USB_CFG_VENDOR_NAME_LEN


76 #unde‡
USB_CFG_DESCR_PROPS_STRING_VENDOR


77 
	#USB_CFG_DESCR_PROPS_STRING_VENDOR
 (
usbDes¸ùt‹SåögVíd‹
)

	)

78 
PROGMEM
 c⁄° 
	gusbDes¸ùt‹SåögVíd‹
[] = {

79 
USB_STRING_DESCRIPTOR_HEADER
(
USB_CFG_VENDOR_NAME_LEN
),

80 
USB_CFG_VENDOR_NAME


84 #i‡
USB_CFG_DESCR_PROPS_STRING_PRODUCT
 =0 && 
USB_CFG_DEVICE_NAME_LEN


85 #unde‡
USB_CFG_DESCR_PROPS_STRING_PRODUCT


86 
	#USB_CFG_DESCR_PROPS_STRING_PRODUCT
 (
usbDes¸ùt‹SåögDevi˚
)

	)

87 
PROGMEM
 c⁄° 
	gusbDes¸ùt‹SåögDevi˚
[] = {

88 
USB_STRING_DESCRIPTOR_HEADER
(
USB_CFG_DEVICE_NAME_LEN
),

89 
USB_CFG_DEVICE_NAME


93 #i‡
USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER
 =0 && 
USB_CFG_SERIAL_NUMBER_LEN


94 #unde‡
USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER


95 
	#USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER
 (
usbDes¸ùt‹SåögSîülNumbî
)

	)

96 
PROGMEM
 c⁄° 
	gusbDes¸ùt‹SåögSîülNumbî
[] = {

97 
USB_STRING_DESCRIPTOR_HEADER
(
USB_CFG_SERIAL_NUMBER_LEN
),

98 
USB_CFG_SERIAL_NUMBER


106 #i‡
USB_CFG_DESCR_PROPS_DEVICE
 == 0

107 #unde‡
USB_CFG_DESCR_PROPS_DEVICE


108 
	#USB_CFG_DESCR_PROPS_DEVICE
 (
usbDes¸ùt‹Devi˚
)

	)

109 
PROGMEM
 c⁄° 
	gusbDes¸ùt‹Devi˚
[] = {

111 
USBDESCR_DEVICE
,

113 
USB_CFG_DEVICE_CLASS
,

114 
USB_CFG_DEVICE_SUBCLASS
,

120 ()
USB_CFG_VENDOR_ID
,

121 ()
USB_CFG_DEVICE_ID
,

122 
USB_CFG_DEVICE_VERSION
,

123 
USB_CFG_DESCR_PROPS_STRING_VENDOR
 != 0 ? 1 : 0,

124 
	gUSB_CFG_DESCR_PROPS_STRING_PRODUCT
 != 0 ? 2 : 0,

125 
	gUSB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER
 != 0 ? 3 : 0,

132 #i‡
USB_CFG_DESCR_PROPS_HID_REPORT
 !0 && 
USB_CFG_DESCR_PROPS_HID
 == 0

133 #unde‡
USB_CFG_DESCR_PROPS_HID


134 
	#USB_CFG_DESCR_PROPS_HID
 9

	)

137 #i‡
USB_CFG_DESCR_PROPS_CONFIGURATION
 == 0

138 #unde‡
USB_CFG_DESCR_PROPS_CONFIGURATION


139 
	#USB_CFG_DESCR_PROPS_CONFIGURATION
 (
usbDes¸ùt‹C⁄figuøti⁄
)

	)

140 
PROGMEM
 c⁄° 
	gusbDes¸ùt‹C⁄figuøti⁄
[] = {

142 
USBDESCR_CONFIG
,

143 18 + 7 * 
USB_CFG_HAVE_INTRIN_ENDPOINT
 + 7 * 
USB_CFG_HAVE_INTRIN_ENDPOINT3
 +

144 (
USB_CFG_DESCR_PROPS_HID
 & 0xff), 0,

149 #i‡
USB_CFG_IS_SELF_POWERED


150 (1 << 7Ë| 
USBATTR_SELFPOWER
,

154 
USB_CFG_MAX_BUS_POWER
/2,

157 
USBDESCR_INTERFACE
,

160 
USB_CFG_HAVE_INTRIN_ENDPOINT
 + 
USB_CFG_HAVE_INTRIN_ENDPOINT3
,

161 
USB_CFG_INTERFACE_CLASS
,

162 
USB_CFG_INTERFACE_SUBCLASS
,

163 
USB_CFG_INTERFACE_PROTOCOL
,

165 #i‡(
USB_CFG_DESCR_PROPS_HID
 & 0xff)

167 
USBDESCR_HID
,

172 
USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH
, 0,

174 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT


176 
USBDESCR_ENDPOINT
,

180 
USB_CFG_INTR_POLL_INTERVAL
,

182 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT3


184 
USBDESCR_ENDPOINT
,

185 ()(0x80 | 
USB_CFG_EP3_NUMBER
),

188 
USB_CFG_INTR_POLL_INTERVAL
,

195 
ölöe
 
	$usbRe£tD©aTogglög
()

197 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT
 && !
USB_CFG_SUPPRESS_INTR_CODE


198 
	`USB_SET_DATATOKEN1
(
USB_INITIAL_DATATOKEN
);

199 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT3


200 
	`USB_SET_DATATOKEN3
(
USB_INITIAL_DATATOKEN
);

203 
	}
}

205 
ölöe
 
	$usbRe£tSèŒ
()

207 #i‡
USB_CFG_IMPLEMENT_HALT
 && 
USB_CFG_HAVE_INTRIN_ENDPOINT


208 
usbTxLí1
 = 
USBPID_NAK
;

209 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT3


210 
usbTxLí3
 = 
USBPID_NAK
;

213 
	}
}

217 #i‡!
USB_CFG_SUPPRESS_INTR_CODE


218 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT


219 
	$usbGíîicSëI¡îru±
(
uch¨
 *
d©a
, uch¨ 
Àn
, 
usbTxSètus_t
 *
txSètus
)

221 
uch¨
 *
p
;

222 
i
;

224 #i‡
USB_CFG_IMPLEMENT_HALT


225 if(
usbTxLí1
 =
USBPID_STALL
)

228 if(
txSètus
->
Àn
 & 0x10) {

229 
txSètus
->
buf„r
[0] ^
USBPID_DATA0
 ^ 
USBPID_DATA1
;

231 
txSètus
->
Àn
 = 
USBPID_NAK
;

233 
p
 = 
txSètus
->
buf„r
 + 1;

234 
i
 = 
Àn
;

236 *
p
++ = *
d©a
++;

237 } --
i
 > 0);

238 
	`usbCrc16Aµíd
(&
txSètus
->
buf„r
[1], 
Àn
);

239 
txSètus
->
Àn
 =Üen + 4;

240 
	`DBG2
(0x21 + ((()
txSètus
 >> 3Ë& 3),ÅxSètus->
buf„r
, 
Àn
 + 3);

241 
	}
}

243 
USB_PUBLIC
 
	$usbSëI¡îru±
(
uch¨
 *
d©a
, uch¨ 
Àn
)

245 
	`usbGíîicSëI¡îru±
(
d©a
, 
Àn
, &
usbTxSètus1
);

246 
	}
}

249 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT3


250 
USB_PUBLIC
 
	$usbSëI¡îru±3
(
uch¨
 *
d©a
, uch¨ 
Àn
)

252 
	`usbGíîicSëI¡îru±
(
d©a
, 
Àn
, &
usbTxSètus3
);

253 
	}
}

264 #i‡
USB_CFG_USE_SWITCH_STATEMENT


265 
	#SWITCH_START
(
cmd
Ëcmd){{

	)

266 
	#SWITCH_CASE
(
vÆue
Ë}; (vÆue):{

	)

267 
	#SWITCH_CASE2
(
v1
,
v2
Ë}; (v1): (v2):{

	)

268 
	#SWITCH_CASE3
(
v1
,
v2
,
v3
Ë}; (v1): (v2): (v3):{

	)

269 
	#SWITCH_DEFAULT
 }; :{

	)

270 
	#SWITCH_END
 }}

	)

272 
	#SWITCH_START
(
cmd
Ë{
uch¨
 
_cmd
 = cmd; if(0){

	)

273 
	#SWITCH_CASE
(
vÆue
Ë}if(
_cmd
 =(vÆue)){

	)

274 
	#SWITCH_CASE2
(
v1
,
v2
Ë}if(
_cmd
 =(v1Ë|| _cmd =(v2)){

	)

275 
	#SWITCH_CASE3
(
v1
,
v2
,
v3
Ë}if(
_cmd
 =(v1Ë|| _cmd =(v2Ë|| (_cmd =v3)){

	)

276 
	#SWITCH_DEFAULT
 }{

	)

277 
	#SWITCH_END
 }}

	)

280 #i‚de‡
USB_RX_USER_HOOK


281 
	#USB_RX_USER_HOOK
(
d©a
, 
Àn
)

	)

283 #i‚de‡
USB_SET_ADDRESS_HOOK


284 
	#USB_SET_ADDRESS_HOOK
()

	)

294 
	#GET_DESCRIPTOR
(
cfgPr›
, 
°©icName
) \

295 if(
cfgPr›
){ \

296 if((
cfgPr›
Ë& 
USB_PROP_IS_RAM
) \

297 
Êags
 = 0; \

298 if((
cfgPr›
Ë& 
USB_PROP_IS_DYNAMIC
){ \

299 
Àn
 = 
	`usbFun˘i⁄Des¸ùt‹
(
rq
); \

301 
Àn
 = 
	`USB_PROP_LENGTH
(
cfgPr›
); \

302 
usbMsgPå
 = (
usbMsgPå_t
)(
°©icName
); \

304 }

	)

309 
ölöe
 
usbMsgLí_t
 
	$usbDrivîDes¸ùt‹
(
usbReque°_t
 *
rq
)

311 
usbMsgLí_t
 
Àn
 = 0;

312 
uch¨
 
Êags
 = 
USB_FLG_MSGPTR_IS_ROM
;

314 
	`SWITCH_START
(
rq
->
wVÆue
.
byãs
[1])

315 
	`SWITCH_CASE
(
USBDESCR_DEVICE
)

316 
	`GET_DESCRIPTOR
(
USB_CFG_DESCR_PROPS_DEVICE
, 
usbDes¸ùt‹Devi˚
)

317 
	`SWITCH_CASE
(
USBDESCR_CONFIG
)

318 
	`GET_DESCRIPTOR
(
USB_CFG_DESCR_PROPS_CONFIGURATION
, 
usbDes¸ùt‹C⁄figuøti⁄
)

319 
	`SWITCH_CASE
(
USBDESCR_STRING
)

320 #i‡
USB_CFG_DESCR_PROPS_STRINGS
 & 
USB_PROP_IS_DYNAMIC


321 if(
USB_CFG_DESCR_PROPS_STRINGS
 & 
USB_PROP_IS_RAM
)

322 
Êags
 = 0;

323 
Àn
 = 
	`usbFun˘i⁄Des¸ùt‹
(
rq
);

325 
	`SWITCH_START
(
rq
->
wVÆue
.
byãs
[0])

326 
	`SWITCH_CASE
(0)

327 
	`GET_DESCRIPTOR
(
USB_CFG_DESCR_PROPS_STRING_0
, 
usbDes¸ùt‹Såög0
)

328 
	`SWITCH_CASE
(1)

329 
	`GET_DESCRIPTOR
(
USB_CFG_DESCR_PROPS_STRING_VENDOR
, 
usbDes¸ùt‹SåögVíd‹
)

330 
	`SWITCH_CASE
(2)

331 
	`GET_DESCRIPTOR
(
USB_CFG_DESCR_PROPS_STRING_PRODUCT
, 
usbDes¸ùt‹SåögDevi˚
)

332 
	`SWITCH_CASE
(3)

333 
	`GET_DESCRIPTOR
(
USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER
, 
usbDes¸ùt‹SåögSîülNumbî
)

334 
SWITCH_DEFAULT


335 if(
USB_CFG_DESCR_PROPS_UNKNOWN
 & 
USB_PROP_IS_DYNAMIC
) {

336 
Àn
 = 
	`usbFun˘i⁄Des¸ùt‹
(
rq
);

338 
SWITCH_END


340 #i‡
USB_CFG_DESCR_PROPS_HID_REPORT


341 
	`SWITCH_CASE
(
USBDESCR_HID
)

342 
	`GET_DESCRIPTOR
(
USB_CFG_DESCR_PROPS_HID
, 
usbDes¸ùt‹C⁄figuøti⁄
 + 18)

343 
	`SWITCH_CASE
(
USBDESCR_HID_REPORT
)

344 
	`GET_DESCRIPTOR
(
USB_CFG_DESCR_PROPS_HID_REPORT
, 
usbDes¸ùt‹HidRï‹t
)

346 
SWITCH_DEFAULT


347 if(
USB_CFG_DESCR_PROPS_UNKNOWN
 & 
USB_PROP_IS_DYNAMIC
) {

348 
Àn
 = 
	`usbFun˘i⁄Des¸ùt‹
(
rq
);

350 
SWITCH_END


351 
usbMsgFœgs
 = 
Êags
;

352  
Àn
;

353 
	}
}

360 
ölöe
 
usbMsgLí_t
 
	$usbDrivîSëup
(
usbReque°_t
 *
rq
)

362 
usbMsgLí_t
 
Àn
 = 0;

363 
uch¨
 *
d©aPå
 = 
usbTxBuf
 + 9;

364 
uch¨
 
vÆue
 = 
rq
->
wVÆue
.
byãs
[0];

365 #i‡
USB_CFG_IMPLEMENT_HALT


366 
uch¨
 
ödex
 = 
rq
->
wIndex
.
byãs
[0];

369 
d©aPå
[0] = 0;

370 
	`SWITCH_START
(
rq
->
bReque°
)

371 
	`SWITCH_CASE
(
USBRQ_GET_STATUS
)

372 
uch¨
 
ªcùõ¡
 = 
rq
->
bmReque°Ty≥
 & 
USBRQ_RCPT_MASK
;

373 if(
USB_CFG_IS_SELF_POWERED
 && 
ªcùõ¡
 =
USBRQ_RCPT_DEVICE
)

374 
d©aPå
[0] = 
USB_CFG_IS_SELF_POWERED
;

375 #i‡
USB_CFG_IMPLEMENT_HALT


376 if(
ªcùõ¡
 =
USBRQ_RCPT_ENDPOINT
 && 
ödex
 == 0x81)

377 
d©aPå
[0] = 
usbTxLí1
 =
USBPID_STALL
;

379 
d©aPå
[1] = 0;

380 
Àn
 = 2;

381 #i‡
USB_CFG_IMPLEMENT_HALT


382 
	`SWITCH_CASE2
(
USBRQ_CLEAR_FEATURE
, 
USBRQ_SET_FEATURE
)

383 if(
vÆue
 =0 && 
ödex
 == 0x81) {

384 
usbTxLí1
 = 
rq
->
bReque°
 =
USBRQ_CLEAR_FEATURE
 ? 
USBPID_NAK
 : 
USBPID_STALL
;

385 
	`usbRe£tD©aTogglög
();

388 
	`SWITCH_CASE
(
USBRQ_SET_ADDRESS
)

389 
usbNewDevi˚Addr
 = 
vÆue
;

390 
	`USB_SET_ADDRESS_HOOK
();

391 
	`SWITCH_CASE
(
USBRQ_GET_DESCRIPTOR
)

392 
Àn
 = 
	`usbDrivîDes¸ùt‹
(
rq
);

393 
skùMsgPåAssignmít
;

394 
	`SWITCH_CASE
(
USBRQ_GET_CONFIGURATION
)

395 
d©aPå
 = &
usbC⁄figuøti⁄
;

396 
Àn
 = 1;

397 
	`SWITCH_CASE
(
USBRQ_SET_CONFIGURATION
)

398 
usbC⁄figuøti⁄
 = 
vÆue
;

399 
	`usbRe£tSèŒ
();

400 
	`SWITCH_CASE
(
USBRQ_GET_INTERFACE
)

401 
Àn
 = 1;

402 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT
 && !
USB_CFG_SUPPRESS_INTR_CODE


403 
	`SWITCH_CASE
(
USBRQ_SET_INTERFACE
)

404 
	`usbRe£tD©aTogglög
();

405 
	`usbRe£tSèŒ
();

407 
SWITCH_DEFAULT


409 
SWITCH_END


410 
usbMsgPå
 = (
usbMsgPå_t
)
d©aPå
;

411 
skùMsgPåAssignmít
:

412  
Àn
;

413 
	}
}

421 
ölöe
 
	$usbPro˚ssRx
(
uch¨
 *
d©a
, uch¨ 
Àn
)

423 
usbReque°_t
 *
rq
 = (*)
d©a
;

430 
	`DBG2
(0x10 + (
usbRxTokí
 & 0xf), 
d©a
, 
Àn
 + 2);

431 
	`USB_RX_USER_HOOK
(
d©a
, 
Àn
)

432 #i‡
USB_CFG_IMPLEMENT_FN_WRITEOUT


433 if(
usbRxTokí
 < 0x10) {

434 
	`usbFun˘i⁄WrôeOut
(
d©a
, 
Àn
);

438 if(
usbRxTokí
 =(
uch¨
)
USBPID_SETUP
) {

439 if(
Àn
 != 8)

441 
usbMsgLí_t
 
ª∂yLí
;

442 
usbTxBuf
[0] = 
USBPID_DATA0
;

443 
usbTxLí
 = 
USBPID_NAK
;

444 
usbMsgFœgs
 = 0;

445 
uch¨
 
ty≥
 = 
rq
->
bmReque°Ty≥
 & 
USBRQ_TYPE_MASK
;

446 if(
ty≥
 !
USBRQ_TYPE_STANDARD
) {

447 
ª∂yLí
 = 
	`usbFun˘i⁄Sëup
(
d©a
);

449 
ª∂yLí
 = 
	`usbDrivîSëup
(
rq
);

451 #i‡
USB_CFG_IMPLEMENT_FN_READ
 || 
USB_CFG_IMPLEMENT_FN_WRITE


452 if(
ª∂yLí
 =
USB_NO_MSG
) {

454 if((
rq
->
bmReque°Ty≥
 & 
USBRQ_DIR_MASK
Ë!
USBRQ_DIR_HOST_TO_DEVICE
) {

455 if((
ª∂yLí
Ë< (
rq
->
wLígth
.
w‹d
)) {

456 
ª∂yLí
 = 
rq
->
wLígth
.
byãs
[0];

458 
ª∂yLí
 = 
rq
->
wLígth
.
w‹d
;

461 
usbMsgFœgs
 = 
USB_FLG_USE_USER_RW
;

464 if((
ª∂yLí
Ë< (
rq
->
wLígth
.
w‹d
)) {

465 if(!
rq
->
wLígth
.
byãs
[1] && 
ª∂yLí
 >Ñq->wLength.bytes[0])

466 
ª∂yLí
 = 
rq
->
wLígth
.
byãs
[0];

468 if(
ª∂yLí
 > 
rq
->
wLígth
.
w‹d
)

469 
ª∂yLí
 = 
rq
->
wLígth
.
w‹d
;

471 
usbMsgLí
 = 
ª∂yLí
;

473 #i‡
USB_CFG_IMPLEMENT_FN_WRITE


474 if(
usbMsgFœgs
 & 
USB_FLG_USE_USER_RW
) {

475 
uch¨
 
rvÆ
 = 
	`usbFun˘i⁄Wrôe
(
d©a
, 
Àn
);

476 if(
rvÆ
 == 0xff) {

477 
usbTxLí
 = 
USBPID_STALL
;

478 } if(
rvÆ
 != 0) {

479 
usbMsgLí
 = 0;

484 
	}
}

491 
uch¨
 
	$usbDevi˚Ród
(
uch¨
 *
d©a
, uch¨ 
Àn
)

493 if(
Àn
 > 0) {

494 #i‡
USB_CFG_IMPLEMENT_FN_READ


495 if(
usbMsgFœgs
 & 
USB_FLG_USE_USER_RW
) {

496 
Àn
 = 
	`usbFun˘i⁄Ród
(
d©a
,Üen);

500 
uch¨
 
i
 = 
Àn
;

501 
usbMsgPå_t
 
r
 = 
usbMsgPå
;

502 if(
usbMsgFœgs
 & 
USB_FLG_MSGPTR_IS_ROM
) {

504 
uch¨
 
c
 = 
	`USB_READ_FLASH
(
r
);

505 *
d©a
++ = 
c
;

506 
r
++;

507 } --
i
);

510 *
d©a
++ = *((
uch¨
 *)
r
);

511 
r
++;

512 } --
i
);

514 
usbMsgPå
 = 
r
;

517  
Àn
;

518 
	}
}

525 
ölöe
 
	$usbBuûdTxBlock
()

527 
usbMsgLí_t
 
w™tLí
;

528 
uch¨
 
Àn
;

530 
w™tLí
 = 
usbMsgLí
;

531 if(
w™tLí
 > 8)

532 
w™tLí
 = 8;

533 
usbMsgLí
 -
w™tLí
;

534 
usbTxBuf
[0] ^
USBPID_DATA0
 ^ 
USBPID_DATA1
;

535 
Àn
 = 
	`usbDevi˚Ród
(
usbTxBuf
 + 1, 
w™tLí
);

536 if(
Àn
 <= 8) {

537 
	`usbCrc16Aµíd
(&
usbTxBuf
[1], 
Àn
);

538 
Àn
 += 4;

539 if(
Àn
 < 12)

540 
usbMsgLí
 = 
USB_NO_MSG
;

542 
Àn
 = 
USBPID_STALL
;

543 
usbMsgLí
 = 
USB_NO_MSG
;

545 
usbTxLí
 = 
Àn
;

546 
	`DBG2
(0x20, 
usbTxBuf
, 
Àn
-1);

547 
	}
}

551 
ölöe
 
	$usbH™dÀRe£tHook
(
uch¨
 
nŸRe£tSèã
)

553 #ifde‡
USB_RESET_HOOK


554 
uch¨
 
wasRe£t
;

555 
uch¨
 
isRe£t
 = !
nŸRe£tSèã
;

557 if(
wasRe£t
 !
isRe£t
) {

558 
	`USB_RESET_HOOK
(
isRe£t
);

559 
wasRe£t
 = 
isRe£t
;

562 
nŸRe£tSèã
 =ÇotResetState;

564 
	}
}

568 
USB_PUBLIC
 
	$usbPﬁl
()

570 
sch¨
 
Àn
;

571 
uch¨
 
i
;

573 
Àn
 = 
usbRxLí
 - 3;

574 if(
Àn
 >= 0) {

581 
	`usbPro˚ssRx
(
usbRxBuf
 + 
USB_BUFSIZE
 + 1 - 
usbI≈utBufOff£t
, 
Àn
);

582 #i‡
USB_CFG_HAVE_FLOWCONTROL


583 if(
usbRxLí
 > 0)

584 
usbRxLí
 = 0;

586 
usbRxLí
 = 0;

589 if(
usbTxLí
 & 0x10) {

590 if(
usbMsgLí
 !
USB_NO_MSG
) {

591 
	`usbBuûdTxBlock
();

594 
i
 = 20; i > 0; i--) {

595 
uch¨
 
usbLöeSètus
 = 
USBIN
 & 
USBMASK
;

596 if(
usbLöeSètus
 != 0)

597 
isNŸRe£t
;

600 
usbNewDevi˚Addr
 = 0;

601 
usbDevi˚Addr
 = 0;

602 
	`usbRe£tSèŒ
();

603 
	`DBG1
(0xff, 0, 0);

604 
isNŸRe£t
:

605 
	`usbH™dÀRe£tHook
(
i
);

606 
	}
}

610 
USB_PUBLIC
 
	$usbInô
()

612 #i‡
USB_INTR_CFG_SET
 != 0

613 
USB_INTR_CFG
 |
USB_INTR_CFG_SET
;

615 #i‡
USB_INTR_CFG_CLR
 != 0

616 
USB_INTR_CFG
 &~(
USB_INTR_CFG_CLR
);

618 
USB_INTR_ENABLE
 |(1 << 
USB_INTR_ENABLE_BIT
);

619 
	`usbRe£tD©aTogglög
();

620 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT
 && !
USB_CFG_SUPPRESS_INTR_CODE


621 
usbTxLí1
 = 
USBPID_NAK
;

622 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT3


623 
usbTxLí3
 = 
USBPID_NAK
;

626 
	}
}

	@AVR_Code/usbdrv/usbdrv.h

10 #i‚de‡
__usbdrv_h_ö˛uded__


11 
	#__usbdrv_h_ö˛uded__


	)

12 
	~"usbc⁄fig.h
"

13 
	~"usbp‹èbûôy.h
"

124 
	#USBDRV_VERSION
 20121206

	)

133 #i‚de‡
USB_PUBLIC


134 
	#USB_PUBLIC


	)

143 #i‚de‡
__ASSEMBLER__


144 #i‚de‡
uch¨


145 
	#uch¨
 

	)

147 #i‚de‡
sch¨


148 
	#sch¨
 sig√d 

	)

152 #i‡
USB_CFG_LONG_TRANSFERS


153 
	#usbMsgLí_t
 

	)

155 
	#usbMsgLí_t
 
uch¨


	)

163 
	#USB_NO_MSG
 ((
usbMsgLí_t
)-1Ë

	)

165 #i‚de‡
usbMsgPå_t


166 
	#usbMsgPå_t
 
uch¨
 *

	)

176 
	gusbReque°
;

178 
USB_PUBLIC
 
usbInô
();

184 
USB_PUBLIC
 
usbPﬁl
();

191 
usbMsgPå_t
 
usbMsgPå
;

196 
USB_PUBLIC
 
usbMsgLí_t
 
usbFun˘i⁄Sëup
(
uch¨
 
d©a
[8]);

223 
USB_PUBLIC
 
usbMsgLí_t
 
usbFun˘i⁄Des¸ùt‹
(
usbReque°
 *
rq
);

229 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT


230 
USB_PUBLIC
 
usbSëI¡îru±
(
uch¨
 *
d©a
, uch¨ 
Àn
);

237 
	#usbI¡îru±IsRódy
(Ë(
usbTxLí1
 & 0x10)

	)

242 #i‡
USB_CFG_HAVE_INTRIN_ENDPOINT3


243 
USB_PUBLIC
 
usbSëI¡îru±3
(
uch¨
 *
d©a
, uch¨ 
Àn
);

244 
	#usbI¡îru±IsRódy3
(Ë(
usbTxLí3
 & 0x10)

	)

248 #i‡
USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH


249 
	#usbHidRï‹tDes¸ùt‹
 
usbDes¸ùt‹HidRï‹t


	)

258 #i‡
USB_CFG_IMPLEMENT_FN_WRITE


259 
USB_PUBLIC
 
uch¨
 
usbFun˘i⁄Wrôe
(uch¨ *
d©a
, uch¨ 
Àn
);

276 #i‡
USB_CFG_IMPLEMENT_FN_READ


277 
USB_PUBLIC
 
uch¨
 
usbFun˘i⁄Ród
(uch¨ *
d©a
, uch¨ 
Àn
);

289 
uch¨
 
usbRxTokí
;

290 #i‡
USB_CFG_IMPLEMENT_FN_WRITEOUT


291 
USB_PUBLIC
 
usbFun˘i⁄WrôeOut
(
uch¨
 *
d©a
, uch¨ 
Àn
);

298 #ifde‡
USB_CFG_PULLUP_IOPORTNAME


299 
	#usbDevi˚C⁄√˘
(Ë((
USB_PULLUP_DDR
 |(1<<
USB_CFG_PULLUP_BIT
)), \

300 (
USB_PULLUP_OUT
 |(1<<
USB_CFG_PULLUP_BIT
)))

	)

301 
	#usbDevi˚Disc⁄√˘
(Ë((
USB_PULLUP_DDR
 &~(1<<
USB_CFG_PULLUP_BIT
)), \

302 (
USB_PULLUP_OUT
 &~(1<<
USB_CFG_PULLUP_BIT
)))

	)

304 
	#usbDevi˚C⁄√˘
(Ë(
USBDDR
 &~(1<<
USBMINUS
))

	)

305 
	#usbDevi˚Disc⁄√˘
(Ë(
USBDDR
 |(1<<
USBMINUS
))

	)

319 
usbCrc16
(
d©a
, 
uch¨
 
Àn
);

320 
	#usbCrc16
(
d©a
, 
Àn
Ë
	`usbCrc16
(()(d©a),Üí)

	)

327 
usbCrc16Aµíd
(
d©a
, 
uch¨
 
Àn
);

328 
	#usbCrc16Aµíd
(
d©a
, 
Àn
Ë
	`usbCrc16Aµíd
(()(d©a),Üí)

	)

333 #i‡
USB_CFG_HAVE_MEASURE_FRAME_LENGTH


334 
usbMósuªFømeLígth
();

343 
uch¨
 
usbC⁄figuøti⁄
;

350 #i‡
USB_COUNT_SOF


351 vﬁ©ûê
uch¨
 
usbSofCou¡
;

356 #i‡
USB_CFG_CHECK_DATA_TOGGLING


357 
uch¨
 
usbCuºítD©aTokí
;

363 
	#USB_STRING_DESCRIPTOR_HEADER
(
°rögLígth
Ë((2*(°rögLígth)+2Ë| (3<<8))

	)

367 #i‡
USB_CFG_HAVE_FLOWCONTROL


368 vﬁ©ûê
sch¨
 
usbRxLí
;

369 
	#usbDißbÀAŒReque°s
(Ë
usbRxLí
 = -1

	)

374 
	#usbE«bÀAŒReque°s
(Ë
usbRxLí
 = 0

	)

378 
	#usbAŒReque°sAªDißbÀd
(Ë(
usbRxLí
 < 0)

	)

385 
	#USB_SET_DATATOKEN1
(
tokí
Ë
usbTxBuf1
[0] = 
	)
tokí

386 
	#USB_SET_DATATOKEN3
(
tokí
Ë
usbTxBuf3
[0] = 
	)
tokí

403 
	#USB_PROP_IS_DYNAMIC
 (1u << 14)

	)

409 
	#USB_PROP_IS_RAM
 (1u << 15)

	)

414 
	#USB_PROP_LENGTH
(
Àn
Ë(÷íË& 0x3fff)

	)

420 #i‚de‡
USB_CFG_DESCR_PROPS_DEVICE


421 
	#USB_CFG_DESCR_PROPS_DEVICE
 0

	)

423 #i‚de‡
USB_CFG_DESCR_PROPS_CONFIGURATION


424 
	#USB_CFG_DESCR_PROPS_CONFIGURATION
 0

	)

426 #i‚de‡
USB_CFG_DESCR_PROPS_STRINGS


427 
	#USB_CFG_DESCR_PROPS_STRINGS
 0

	)

429 #i‚de‡
USB_CFG_DESCR_PROPS_STRING_0


430 
	#USB_CFG_DESCR_PROPS_STRING_0
 0

	)

432 #i‚de‡
USB_CFG_DESCR_PROPS_STRING_VENDOR


433 
	#USB_CFG_DESCR_PROPS_STRING_VENDOR
 0

	)

435 #i‚de‡
USB_CFG_DESCR_PROPS_STRING_PRODUCT


436 
	#USB_CFG_DESCR_PROPS_STRING_PRODUCT
 0

	)

438 #i‚de‡
USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER


439 
	#USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER
 0

	)

441 #i‚de‡
USB_CFG_DESCR_PROPS_HID


442 
	#USB_CFG_DESCR_PROPS_HID
 0

	)

444 #i‡!(
USB_CFG_DESCR_PROPS_HID_REPORT
)

445 #unde‡
USB_CFG_DESCR_PROPS_HID_REPORT


446 #i‡
USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH


447 
	#USB_CFG_DESCR_PROPS_HID_REPORT
 
USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH


	)

449 
	#USB_CFG_DESCR_PROPS_HID_REPORT
 0

	)

452 #i‚de‡
USB_CFG_DESCR_PROPS_UNKNOWN


453 
	#USB_CFG_DESCR_PROPS_UNKNOWN
 0

	)

460 #i‚de‡
__ASSEMBLER__


462 #i‡!(
USB_CFG_DESCR_PROPS_DEVICE
 & 
USB_PROP_IS_RAM
)

463 
PROGMEM
 const

465 
usbDes¸ùt‹Devi˚
[];

468 #i‡!(
USB_CFG_DESCR_PROPS_CONFIGURATION
 & 
USB_PROP_IS_RAM
)

469 
PROGMEM
 const

471 
usbDes¸ùt‹C⁄figuøti⁄
[];

474 #i‡!(
USB_CFG_DESCR_PROPS_HID_REPORT
 & 
USB_PROP_IS_RAM
)

475 
PROGMEM
 const

477 
usbDes¸ùt‹HidRï‹t
[];

480 #i‡!(
USB_CFG_DESCR_PROPS_STRING_0
 & 
USB_PROP_IS_RAM
)

481 
PROGMEM
 const

483 
usbDes¸ùt‹Såög0
[];

486 #i‡!(
USB_CFG_DESCR_PROPS_STRING_VENDOR
 & 
USB_PROP_IS_RAM
)

487 
PROGMEM
 const

489 
usbDes¸ùt‹SåögVíd‹
[];

492 #i‡!(
USB_CFG_DESCR_PROPS_STRING_PRODUCT
 & 
USB_PROP_IS_RAM
)

493 
PROGMEM
 const

495 
usbDes¸ùt‹SåögDevi˚
[];

498 #i‡!(
USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER
 & 
USB_PROP_IS_RAM
)

499 
PROGMEM
 const

501 
usbDes¸ùt‹SåögSîülNumbî
[];

509 
	#USB_CONCAT
(
a
, 
b
Ë®## 
	)
b

510 
	#USB_CONCAT_EXPANDED
(
a
, 
b
Ë
	`USB_CONCAT
◊, b)

	)

512 
	#USB_OUTPORT
(
«me
Ë
	`USB_CONCAT
(
PORT
,Çame)

	)

513 
	#USB_INPORT
(
«me
Ë
	`USB_CONCAT
(
PIN
,Çame)

	)

514 
	#USB_DDRPORT
(
«me
Ë
	`USB_CONCAT
(
DDR
,Çame)

	)

523 #i‡!
deföed
 
__ASSEMBLER__
 && (!deföed 
USB_CFG_VENDOR_ID
 || !deföed 
USB_CFG_DEVICE_ID
)

531 #i‚de‡
USB_CFG_VENDOR_ID


532 
	#USB_CFG_VENDOR_ID
 0xc0, 0x16

	)

535 #i‚de‡
USB_CFG_DEVICE_ID


536 #i‡
USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH


537 
	#USB_CFG_DEVICE_ID
 0xdf, 0x05

	)

538 #ñi‡
USB_CFG_INTERFACE_CLASS
 == 2

539 
	#USB_CFG_DEVICE_ID
 0xe1, 0x05

	)

541 
	#USB_CFG_DEVICE_ID
 0xdc, 0x05

	)

546 #i‚de‡
USB_CFG_IOPORTNAME


550 
	#USBOUT
 
	`USB_OUTPORT
(
USB_CFG_IOPORTNAME
)

	)

551 
	#USB_PULLUP_OUT
 
	`USB_OUTPORT
(
USB_CFG_PULLUP_IOPORTNAME
)

	)

552 
	#USBIN
 
	`USB_INPORT
(
USB_CFG_IOPORTNAME
)

	)

553 
	#USBDDR
 
	`USB_DDRPORT
(
USB_CFG_IOPORTNAME
)

	)

554 
	#USB_PULLUP_DDR
 
	`USB_DDRPORT
(
USB_CFG_PULLUP_IOPORTNAME
)

	)

556 
	#USBMINUS
 
USB_CFG_DMINUS_BIT


	)

557 
	#USBPLUS
 
USB_CFG_DPLUS_BIT


	)

558 
	#USBIDLE
 (1<<
USB_CFG_DMINUS_BIT
Ë

	)

559 
	#USBMASK
 ((1<<
USB_CFG_DPLUS_BIT
Ë| (1<<
USB_CFG_DMINUS_BIT
)Ë

	)

562 
	#USB_CFG_IOPORT
 
	`USB_OUTPORT
(
USB_CFG_IOPORTNAME
)

	)

563 #ifde‡
USB_CFG_PULLUP_IOPORTNAME


564 
	#USB_CFG_PULLUP_IOPORT
 
	`USB_OUTPORT
(
USB_CFG_PULLUP_IOPORTNAME
)

	)

567 #i‚de‡
USB_CFG_EP3_NUMBER


568 
	#USB_CFG_EP3_NUMBER
 3

	)

571 #i‚de‡
USB_CFG_HAVE_INTRIN_ENDPOINT3


572 
	#USB_CFG_HAVE_INTRIN_ENDPOINT3
 0

	)

575 
	#USB_BUFSIZE
 11

	)

579 #i‚de‡
USB_INTR_CFG


580 #i‡
deföed
 
EICRA


581 
	#USB_INTR_CFG
 
EICRA


	)

583 
	#USB_INTR_CFG
 
MCUCR


	)

586 #i‚de‡
USB_INTR_CFG_SET


587 #i‡
deföed
(
USB_COUNT_SOF
Ë|| deföed(
USB_SOF_HOOK
)

588 
	#USB_INTR_CFG_SET
 (1 << 
ISC01
Ë

	)

593 
	#USB_INTR_CFG_SET
 ((1 << 
ISC00
Ë| (1 << 
ISC01
)Ë

	)

596 #i‚de‡
USB_INTR_CFG_CLR


597 
	#USB_INTR_CFG_CLR
 0

	)

600 #i‚de‡
USB_INTR_ENABLE


601 #i‡
deföed
 
GIMSK


602 
	#USB_INTR_ENABLE
 
GIMSK


	)

603 #ñi‡
deföed
 
EIMSK


604 
	#USB_INTR_ENABLE
 
EIMSK


	)

606 
	#USB_INTR_ENABLE
 
GICR


	)

609 #i‚de‡
USB_INTR_ENABLE_BIT


610 
	#USB_INTR_ENABLE_BIT
 
INT0


	)

613 #i‚de‡
USB_INTR_PENDING


614 #i‡
deföed
 
EIFR


615 
	#USB_INTR_PENDING
 
EIFR


	)

617 
	#USB_INTR_PENDING
 
GIFR


	)

620 #i‚de‡
USB_INTR_PENDING_BIT


621 
	#USB_INTR_PENDING_BIT
 
INTF0


	)

641 
	#USBPID_SETUP
 0x2d

	)

642 
	#USBPID_OUT
 0xe1

	)

643 
	#USBPID_IN
 0x69

	)

644 
	#USBPID_DATA0
 0xc3

	)

645 
	#USBPID_DATA1
 0x4b

	)

647 
	#USBPID_ACK
 0xd2

	)

648 
	#USBPID_NAK
 0x5a

	)

649 
	#USBPID_STALL
 0x1e

	)

651 #i‚de‡
USB_INITIAL_DATATOKEN


652 
	#USB_INITIAL_DATATOKEN
 
USBPID_DATA1


	)

655 #i‚de‡
__ASSEMBLER__


657 
	susbTxSètus
 {

658 vﬁ©ûê
uch¨
 
	mÀn
;

659 
uch¨
 
	mbuf„r
[
USB_BUFSIZE
];

660 } 
	tusbTxSètus_t
;

662 
usbTxSètus_t
 
usbTxSètus1
, 
usbTxSètus3
;

663 
	#usbTxLí1
 
usbTxSètus1
.
Àn


	)

664 
	#usbTxBuf1
 
usbTxSètus1
.
buf„r


	)

665 
	#usbTxLí3
 
usbTxSètus3
.
Àn


	)

666 
	#usbTxBuf3
 
usbTxSètus3
.
buf„r


	)

669 
	uusbW‹d
 {

670 
	mw‹d
;

671 
uch¨
 
	mbyãs
[2];

672 } 
	tusbW‹d_t
;

674 
	susbReque°
 {

675 
uch¨
 
	mbmReque°Ty≥
;

676 
uch¨
 
	mbReque°
;

677 
usbW‹d_t
 
	mwVÆue
;

678 
usbW‹d_t
 
	mwIndex
;

679 
usbW‹d_t
 
	mwLígth
;

680 } 
	tusbReque°_t
;

692 
	#USBRQ_RCPT_MASK
 0x1f

	)

693 
	#USBRQ_RCPT_DEVICE
 0

	)

694 
	#USBRQ_RCPT_INTERFACE
 1

	)

695 
	#USBRQ_RCPT_ENDPOINT
 2

	)

698 
	#USBRQ_TYPE_MASK
 0x60

	)

699 
	#USBRQ_TYPE_STANDARD
 (0<<5)

	)

700 
	#USBRQ_TYPE_CLASS
 (1<<5)

	)

701 
	#USBRQ_TYPE_VENDOR
 (2<<5)

	)

704 
	#USBRQ_DIR_MASK
 0x80

	)

705 
	#USBRQ_DIR_HOST_TO_DEVICE
 (0<<7)

	)

706 
	#USBRQ_DIR_DEVICE_TO_HOST
 (1<<7)

	)

709 
	#USBRQ_GET_STATUS
 0

	)

710 
	#USBRQ_CLEAR_FEATURE
 1

	)

711 
	#USBRQ_SET_FEATURE
 3

	)

712 
	#USBRQ_SET_ADDRESS
 5

	)

713 
	#USBRQ_GET_DESCRIPTOR
 6

	)

714 
	#USBRQ_SET_DESCRIPTOR
 7

	)

715 
	#USBRQ_GET_CONFIGURATION
 8

	)

716 
	#USBRQ_SET_CONFIGURATION
 9

	)

717 
	#USBRQ_GET_INTERFACE
 10

	)

718 
	#USBRQ_SET_INTERFACE
 11

	)

719 
	#USBRQ_SYNCH_FRAME
 12

	)

722 
	#USBDESCR_DEVICE
 1

	)

723 
	#USBDESCR_CONFIG
 2

	)

724 
	#USBDESCR_STRING
 3

	)

725 
	#USBDESCR_INTERFACE
 4

	)

726 
	#USBDESCR_ENDPOINT
 5

	)

727 
	#USBDESCR_HID
 0x21

	)

728 
	#USBDESCR_HID_REPORT
 0x22

	)

729 
	#USBDESCR_HID_PHYS
 0x23

	)

732 
	#USBATTR_BUSPOWER
 0

	)

733 
	#USBATTR_SELFPOWER
 0x40

	)

734 
	#USBATTR_REMOTEWAKE
 0x20

	)

737 
	#USBRQ_HID_GET_REPORT
 0x01

	)

738 
	#USBRQ_HID_GET_IDLE
 0x02

	)

739 
	#USBRQ_HID_GET_PROTOCOL
 0x03

	)

740 
	#USBRQ_HID_SET_REPORT
 0x09

	)

741 
	#USBRQ_HID_SET_IDLE
 0x0a

	)

742 
	#USBRQ_HID_SET_PROTOCOL
 0x0b

	)

	@AVR_Code/usbdrv/usbportability.h

23 #i‚de‡
__usbp‹èbûôy_h_INCLUDED__


24 
	#__usbp‹èbûôy_h_INCLUDED__


	)

29 #i‡
deföed
 
__IAR_SYSTEMS_ICC__
 || deföed 
__IAR_SYSTEMS_ASM__


32 #i‚de‡
ENABLE_BIT_DEFINITIONS


33 
	#ENABLE_BIT_DEFINITIONS
 1

	)

37 
	~<iﬂvr.h
>

38 #i‚de‡
__IAR_SYSTEMS_ASM__


39 
	~<öavr.h
>

42 
	#__©åibuã__
(
¨g
Ë

	)

44 #ifde‡
__IAR_SYSTEMS_ASM__


45 
	#__ASSEMBLER__


	)

48 #ifde‡
__HAS_ELPM__


49 
	#PROGMEM
 
__ÁrÊash


	)

51 
	#PROGMEM
 
__Êash


	)

54 
	#USB_READ_FLASH
(
addr
Ë(*(
PROGMEM
 *)◊ddr))

	)

59 
	#˛i
(Ë
	`__dißbÀ_öãºu±
()

	)

60 
	#£i
(Ë
	`__íabÀ_öãºu±
()

	)

61 
	#wdt_ª£t
(Ë
	`__w©chdog_ª£t
()

	)

62 
	#_BV
(
x
Ë(1 << (x))

	)

65 
	#n›2
 
rjmp
 
$
+2

	)

66 
	#XL
 
r26


	)

67 
	#XH
 
r27


	)

68 
	#YL
 
r28


	)

69 
	#YH
 
r29


	)

70 
	#ZL
 
r30


	)

71 
	#ZH
 
r31


	)

72 
	#lo8
(
x
Ë
	`LOW
(x)

	)

73 
	#hi8
(
x
Ë(((x)>>8Ë& 0xffË

	)

84 #ñi‡
__CODEVISIONAVR__


90 
	~<io.h
>

91 
	~<dñay.h
>

93 
	#__©åibuã__
(
¨g
Ë

	)

95 
	#PROGMEM
 
__Êash


	)

96 
	#USB_READ_FLASH
(
addr
Ë(*(
PROGMEM
 *)◊ddr))

	)

98 #i‚de‡
__ASSEMBLER__


99 
ölöe
 
	$˛i
()

102 
	}
}

103 
ölöe
 
	$£i
()

106 
	}
}

108 
	#_dñay_ms
(
t
Ë
	`dñay_ms
—)

	)

109 
	#_BV
(
x
Ë(1 << (x))

	)

110 
	#USB_CFG_USE_SWITCH_STATEMENT
 1

	)

112 
	#ma¸o
 .
ma¸o


	)

113 
	#ídm
 .
ídma¸o


	)

114 
	#n›2
 
rjmp
 .+0

	)

120 
	~<avr/io.h
>

121 #ifde‡
__ASSEMBLER__


122 
	#_VECTOR
(
N
Ë
__ve˘‹_
 ## N

	)

124 
	~<avr/pgm•a˚.h
>

127 #i‡
USB_CFG_DRIVER_FLASH_PAGE


128 
	#USB_READ_FLASH
(
addr
Ë
	`pgm_ªad_byã_Ár
((()
USB_CFG_DRIVER_FLASH_PAGE
 << 16Ë| ()◊ddr))

	)

130 
	#USB_READ_FLASH
(
addr
Ë
	`pgm_ªad_byã
◊ddr)

	)

133 
	#ma¸o
 .
ma¸o


	)

134 
	#ídm
 .
ídm


	)

135 
	#n›2
 
rjmp
 .+0

	)

140 #i‚de‡
PRG_RDB


141 
	#PRG_RDB
(
addr
Ë
	`USB_READ_FLASH
◊ddr)

	)

	@QtUsb/baseinfo.cpp

1 
	~"ba£öfo.h
"

	@QtUsb/baseinfo.h

1 #i‚de‡
BASEINFO_H


2 
	#BASEINFO_H


	)

4 
	~<QSåög
>

5 
	~<QTextSåóm
>

7 ˛as†
	cBa£Info


9 
	m¥iv©e
:

10 
QSåög
 
ss
;

11 
	mpublic
:

12 
Ba£Info
–
QSåög
 
ãxt
 = "" )

14 
ss
 = 
ãxt
;

16 
	gãm∂©e
<
ty≥«me
 
	gT
>

17 
	gBa£Info
& 
	g›î©‹
<<(
	gT
 &
	gñ
)

19 
QTextSåóm
(
ss
Ë<< 
	gñ
;

20  
	gthis
;

22 
QSåög
 
	$gë
()

24  
ss
;

25 
	}
}

27 
	gsig«ls
:

28 
public
 
¶Ÿs
:

31 ˛as†
	cEº‹
 : 
public
 
Ba£Info


33 
public
:

34 
Eº‹
–
QSåög
 
ãxt
 = "" ) : 
	$Ba£Info
(
ãxt
)

37 
	}
};

	@QtUsb/main-window.cpp

1 
	~"maö-wödow.h
"

2 
	~"ui_maöwödow.h
"

4 
	gMaöWödow
::
	$MaöWödow
(
QWidgë
 *
∑ª¡
) :

5 
	`QMaöWödow
(
∑ª¡
),

6 
	`ui
(
√w
 
Ui
::
MaöWödow
),

8 
_usbC⁄èöî
 = 
√w
 
	`UsbC⁄èöî
(&
_log
);

9 
ui
->
	`£tupUi
(
this
);

10 
QSåögLi°
 
usbLogLi°
 = 
_log
.
	`•lô
("\n");

11 
i
=0; i<
usbLogLi°
.
	`size
(); i++) {

12 if(
usbLogLi°
.
	`©
(
i
).
	`c⁄èös
("Error")) {

13 
ui
->
usbLi°Widgë
->
	`addIãm
(
usbLogLi°
.
	`©
(
i
));

14 
ui
->
usbLi°Widgë
->
	`ôem
(
i
)->
	`£tTextCﬁ‹
(
Qt
::
ªd
);

16 
ui
->
usbLi°Widgë
->
	`addIãm
(
usbLogLi°
.
	`©
(
i
));

17 
ui
->
usbLi°Widgë
->
	`ôem
(
i
)->
	`£tTextCﬁ‹
(
Qt
::
gªí
);

20 
	}
}

22 
	gMaöWödow
::~
	$MaöWödow
()

24 
dñëe
 
ui
;

25 
dñëe
 
_usbC⁄èöî
;

26 
	}
}

28 
	gMaöWödow
::
	$⁄_usbRñﬂdPushBuâ⁄_˛icked
()

30 
dñëe
 
_usbC⁄èöî
;

31 
_log
.
	`˛ór
();

32 
_usbC⁄èöî
 = 
√w
 
	`UsbC⁄èöî
(&
_log
);

33 
QSåögLi°
 
usbLogLi°
 = 
_log
.
	`•lô
("\n");

34 
ui
->
usbLi°Widgë
->
	`˛ór
();

35 
i
=0; i<
usbLogLi°
.
	`size
(); i++) {

36 if(
usbLogLi°
.
	`©
(
i
).
	`c⁄èös
("Error")) {

37 
ui
->
usbLi°Widgë
->
	`addIãm
(
usbLogLi°
.
	`©
(
i
));

38 
ui
->
usbLi°Widgë
->
	`ôem
(
i
)->
	`£tTextCﬁ‹
(
Qt
::
ªd
);

40 
ui
->
usbLi°Widgë
->
	`addIãm
(
usbLogLi°
.
	`©
(
i
));

41 
ui
->
usbLi°Widgë
->
	`ôem
(
i
)->
	`£tTextCﬁ‹
(
Qt
::
gªí
);

44 
	}
}

46 
	gMaöWödow
::
	$⁄_pushBuâ⁄_˛icked
()

48 
QSåögLi°
 
usbLogLi°
 = 
_usbC⁄èöî
->
	`li°N⁄RoŸDevi˚s
();

49 
ui
->
usbLi°Widgë
->
	`˛ór
();

50 
i
=0; i<
usbLogLi°
.
	`size
(); i++) {

51 
ui
->
usbLi°Widgë
->
	`addIãm
(
usbLogLi°
.
	`©
(
i
));

53 
	}
}

55 
	gMaöWödow
::
	$⁄_pushBuâ⁄_wrôeToDev_˛icked
()

57 
QSåögLi°
 
usbLogLi°
;

58 
QSåög
 
°rög
 =
_usbC⁄èöî
->
	`wrôeToDevi˚
(
_˛ickedProdu˘
);

59 
usbLogLi°
.
	`≠≥nd
("Info: \n" + 
°rög
);

60 
ui
->
usbLi°Widgë
->
	`˛ór
();

61 
ui
->
usbLi°Widgë
->
	`addIãm
(
usbLogLi°
.
	`©
(0));

62 
	}
}

64 
	gMaöWödow
::
	$⁄_usbLi°Widgë_˛icked
(c⁄° 
QModñIndex
 &
ödex
)

66 
_˛ickedProdu˘
 = (
ui
->
usbLi°Widgë
->
	`ôem
(
ödex
.
	`row
())->
	`ãxt
());

67 
ui
->
usbLi°Widgë
->
	`˛ór
();

68 
ui
->
usbLi°Widgë
->
	`addIãms
(
_usbC⁄èöî
->
	`gëDevi˚Info
(
_˛ickedProdu˘
));

69 
	}
}

	@QtUsb/main-window.h

1 #i‚de‡
MAINWINDOW_H


2 
	#MAINWINDOW_H


	)

4 
	~<QMaöWödow
>

5 
	~"usb-c⁄èöî.h
"

7 
«me•a˚
 
	gUi


9 
˛ass
 
	gMaöWödow
;

12 ˛as†
	cMaöWödow
 : 
public
 
QMaöWödow


14 
Q_OBJECT


16 
public
:

17 
ex∂icô
 
MaöWödow
(
QWidgë
 *
∑ª¡
 = 0);

18 ~
MaöWödow
();

20 
¥iv©e
 
	m¶Ÿs
:

21 
⁄_usbRñﬂdPushBuâ⁄_˛icked
();

23 
⁄_pushBuâ⁄_˛icked
();

25 
⁄_pushBuâ⁄_wrôeToDev_˛icked
();

27 
⁄_usbLi°Widgë_˛icked
(c⁄° 
QModñIndex
 &
ödex
);

29 
	m¥iv©e
:

30 
Ui
::
MaöWödow
 *
ui
;

31 
QSåög
 
	m_log
;

32 
UsbC⁄èöî
* 
	m_usbC⁄èöî
;

33 
QSåög
 
	m_˛ickedProdu˘
;

	@QtUsb/main.cpp

1 
	~"maö-wödow.h
"

2 
	~<QAµliˇti⁄
>

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
QAµliˇti⁄
 
	`a
(
¨gc
, 
¨gv
);

7 
MaöWödow
 
w
;

8 
w
.
	`show
();

10  
a
.
	`exec
();

11 
	}
}

	@QtUsb/usb-container.cpp

1 
	~"usb-c⁄èöî.h
"

3 
	gUsbC⁄èöî
::
	$UsbC⁄èöî
(
QSåög
 *
îr‹Log
Ë: 
	`_îr‹
(0), 
	`_numOfDev
(0), 
	$_îr‹Log
(
îr‹Log
)

5 
_îr‹
 = 
	`usbLibInô
();

6 if(
_îr‹
 < 0Ë
	`QTextSåóm
(
_îr‹Log
Ë<< "Eº‹: InôülizögÜibusb" << 
ídl
;

8 
_numOfDev
 = 
	`libusb_gë_devi˚_li°
(
_˘x
, &
_devi˚_li°
);

9 i‡(
_numOfDev
 < 1) {

10 
	`QTextSåóm
(
_îr‹Log
Ë<< "Eº‹: Nÿdev found" << 
ídl
;

13 
uöt
 
i
=0; i<
_numOfDev
; i++) {

14 
_usbDevi˚s
.
	`push_back
(
	`UsbDev
(
_devi˚_li°
[
i
],i,
îr‹Log
));

18 
	}
}

20 
	gUsbC⁄èöî
::~
	$UsbC⁄èöî
()

22 
	`libusb_exô
(
_˘x
);

23 
	}
}

25 
	gUsbC⁄èöî
::
	$usbLibInô
()

27 
uöt
 
îr‹
;

28  
îr‹
 = 
	`libusb_öô
(&
_˘x
);

29 
	}
}

33 
QSåögLi°
 
	gUsbC⁄èöî
::
	$li°N⁄RoŸDevi˚s
()

35 
QSåögLi°
 
tmpLi°
;

36 
i
=0; i<
_usbDevi˚s
.
	`size
(); i++) {

37 if(
_usbDevi˚s
.
	`©
(
i
).
	`isN⁄SudoDev
()) {

38 
tmpLi°
.
	`≠≥nd
(
_usbDevi˚s
.
	`©
(
i
).
	`gëProdu˘Såög
());

41  
tmpLi°
;

42 
	}
}

44 
QSåög
 
	gUsbC⁄èöî
::
	$wrôeToDevi˚
(
QSåög
 &
¥odu˘Såög
)

46 
size_t
 
size
 = 
_usbDevi˚s
.
	`size
(Ë, 
i
;

47 
i
 = 0; i<
size
; ++i) {

48 if(
_usbDevi˚s
[
i
].
	`gëProdu˘Såög
(Ë=
¥odu˘Såög
) {

52 if(
i
 =
size
) {

57  
_usbDevi˚s
[
i
].
	`öãºu±_å™s„r
(
Endpoöt
::
Dúe˘i⁄
::
Out
);

59 
	}
}

61 
QSåögLi°
 
	gUsbC⁄èöî
::
	$gëDevi˚Info
(
i
)

63 
QSåög
 
tmp
;

64 
	`QTextSåóm
(&
tmp
Ë<< 
_usbDevi˚s
.
	`size
();

65 
QSåögLi°
 
tmpLi°
;

66 
tmpLi°
.
	`≠≥nd
(
tmp
);

67 
	`QTextSåóm
(&
tmp
Ë<< 
i
;

68 
tmpLi°
.
	`≠≥nd
(
tmp
);

69  
tmpLi°
;

70 
	}
}

72 
QSåögLi°
 
	gUsbC⁄èöî
::
	$gëDevi˚Info
(
QSåög
 &
°rögi
)

74 
QSåögLi°
 
tmp
;

75 
size_t
 
size
 = 
_usbDevi˚s
.
	`size
(), 
i
;

76 
i
=0; i<
size
 ; ++i) {

77 if(
_usbDevi˚s
[
i
].
	`gëProdu˘Såög
(Ë=
°rögi
 ) {

81 if(
i
 =
size
) {

82 
tmp
.
	`≠≥nd
("No such device");

84 
tmp
 = 
_usbDevi˚s
[
i
].
	`devInfo
();

86  
tmp
;

87 
	}
}

	@QtUsb/usb-container.h

1 #i‚de‡
USBCONTAINER_H


2 
	#USBCONTAINER_H


	)

3 
	~"usbdev.h
"

4 
	~<QVe˘‹
>

5 
	~<QTextSåóm
>

7 ˛as†
	cUsbC⁄èöî


9 
	m¥iv©e
:

10 
QVe˘‹
<
UsbDev
> 
_usbDevi˚s
;

11 
	m_îr‹
;

12 
uöt
 
	m_numOfDev
;

13 
usbLibInô
();

14 
QSåög
 *
	m_îr‹Log
;

15 
libusb_devi˚
 **
	m_devi˚_li°
;

16 
libusb_c⁄ãxt
 *
	m_˘x
;

17 
	mpublic
:

18 
UsbC⁄èöî
(
QSåög
 *
îr‹Log
);

19 ~
UsbC⁄èöî
();

20 
QSåögLi°
 
li°N⁄RoŸDevi˚s
();

21 
wrôeToDevi˚
(
uöt
 
i
, 
QSåög
 *
ohShõt
=0);

22 
QSåög
 
wrôeToDevi˚
(QSåög &
¥odu˘Såög
);

23 
QSåögLi°
 
gëDevi˚Info
(
i
);

24 
QSåögLi°
 
gëDevi˚Info
(
QSåög
 &
°rögi
);

	@QtUsb/usbdev.cpp

1 
	~"usbdev.h
"

2 
	~<QDebug
>

5 
	gEndpoöt
::
	$Endpoöt
()

7 
bLígth
 = 0;

8 
bDes¸ùt‹Ty≥
 = 0;

9 
bEndpoötAddªss
 = 0;

10 
bmAâribuãs
 = 0;

11 
wMaxPackëSize
 = 0;

12 
bI¡îvÆ
 = 0;

13 
bRe‰esh
 = 0;

14 
bSynchAddªss
 = 0;

15 
exåa_Àngth
 = 0;

16 
	}
}

17 
	gEndpoöt
::
	$Endpoöt
(c⁄° 
libusb_ídpoöt_des¸ùt‹
 *
ídpoöt
Ë: 
	$libusb_ídpoöt_des¸ùt‹
(*
ídpoöt
)

18 {
	}
}

20 
Endpoöt
::
	$gëbEndpoötAddªss
()

22  
bEndpoötAddªss
;

23 
	}
}

25 
	gEndpoöt
::
	$de¸ùt‹Size
()

27  
bLígth
;

28 
	}
}

30 
QSåög
 
	gEndpoöt
::
	$dúe˘i⁄
()

32 
	`qDebug
(Ë<< "dú" << (
bEndpoötAddªss
&0x80);

33 
bEndpoötAddªss
&0x80) {

34 
LIBUSB_ENDPOINT_IN
:

39 
	}
}

41 
	gEndpoöt
::
	$ídpoötNr
()

43  
bEndpoötAddªss
&0x07;

44 
	}
}

46 
	gEndpoöt
::
	$maxPackëSize
()

48  
wMaxPackëSize
;

49 
	}
}

50 
	gEndpoöt
::
	$pﬁlötI¡îvÆ
()

52  
bI¡îvÆ
;

53 
	}
}

54 
	gEndpoöt
::
	$ª‰eshFìdback
()

56  
bRe‰esh
;

57 
	}
}

58 
	gEndpoöt
::
	$synchAddªss
()

60  
bSynchAddªss
;

61 
	}
}

63 
QSåögLi°
 
	gEndpoöt
::
	$∑r£_bmAâribuãs
()

65 
QSåögLi°
 
tmp
;

66 
QSåög
 
tmpSå
 = "TransferÅype: ";

67 
bmAâribuãs
&0x3) {

69 
tmpSå
 += "Control";

72 
tmpSå
+= "Isochronous";

75 
tmpSå
 += "Bulk";

78 
tmpSå
 += "Interrupt";

81 
tmp
.
	`≠≥nd
(
tmpSå
);

84 if((
bmAâribuãs
&0x3) == 1) {

85 
tmpSå
 = "Sync.Åype: ";

86 
bmAâribuãs
&(3<<1)) {

88 
tmpSå
+= "No Synchonisation";

91 
tmpSå
+="Asynchronous";

94 
tmpSå
+= "Adaptive";

97 
tmpSå
+="Synchronous";

100 
tmp
.
	`≠≥nd
(
tmpSå
);

101 
tmpSå
 = "UsageÅype: ";

102 
bmAâribuãs
&(2<<3)) {

104 
tmpSå
+= "Data Endpoint";

107 
tmpSå
+= "Feedback Endpoint";

110 
tmpSå
+="Explicit Feedback Data Endpoint";

113 
tmpSå
+="Reserved";

116 
tmp
.
	`≠≥nd
(
tmpSå
);

118  
	`QSåögLi°
(
tmp
);

119 
	}
}

121 
boﬁ
 
	gEndpoöt
::
	$exi°
() const

123  
	`boﬁ
(

124 
bDes¸ùt‹Ty≥
 != 0xFF

125 && 
bEndpoötAddªss
 != 0xFF

126 && 
wMaxPackëSize
 != 0

128 
	}
}

133 
	gA…î«ãSëtög
::
	$A…î«ãSëtög
()

135 
öãrÁ˚_des¸ùt‹
.
bNumEndpoöts
 = 0;

136 
	}
}

138 
	gA…î«ãSëtög
::
	$A…î«ãSëtög
(c⁄° 
libusb_öãrÁ˚_des¸ùt‹
* 
toGë
Ë: 
	$öãrÁ˚_des¸ùt‹
(*
toGë
)

141 * 
tmp
 = 
√w
 [ 
toGë
->
exåa_Àngth
 + 1 ];

142 
	`°∫˝y
(
tmp
,(c⁄° *)(
toGë
->
exåa
),toGë->
exåa_Àngth
);

143 
_exåa
 = 
tmp
;

144 
dñëe
[] 
tmp
;

146 
i
=0; i<
toGë
->
bNumEndpoöts
; ++i) {

147 
_ídpoöt
.
	`push_back
(
toGë
->
ídpoöt
+
i
);

149 
	}
}

151 
	gA…î«ãSëtög
::~
	$A…î«ãSëtög
()

152 { 
	}
}

154 
boﬁ
 
A…î«ãSëtög
::
	$exi°
()

156  
öãrÁ˚_des¸ùt‹
.
bNumEndpoöts
?
åue
:
Ál£
;

157 
	}
}

159 
	gA…î«ãSëtög
::
	$öãø˚Cœss
()

161  
öãrÁ˚_des¸ùt‹
.
bI¡îÁ˚Cœss
;

162 
	}
}

164 
Endpoöt
 
	gA…î«ãSëtög
::
	$gëEndpoöt
(
Endpoöt
::
Dúe˘i⁄
 
IO
)

166 
QSåög
 
tmp
;

167 i‡(
IO
 =
Endpoöt
::
Dúe˘i⁄
::
In
 ) 
tmp
 = "In";

168 i‡(
IO
 =
Endpoöt
::
Dúe˘i⁄
::
Out
 ) 
tmp
 = "Out";

169 
i
 = 0; i < 
_ídpoöt
.
	`size
() ; ++i ) {

170 
	`qDebug
(Ë<< "ídpoöàdú: " << 
_ídpoöt
[
i
].
	`dúe˘i⁄
();

171 if–
_ídpoöt
[
i
].
	`dúe˘i⁄
(Ë=
tmp
 ) {

172  
_ídpoöt
[
i
];

175 
	`qDebug
() << "REALLY?";

176  
	`Endpoöt
();

177 
	}
}

179 
Endpoöt
 
	gA…î«ãSëtög
::
	$gëEndpoöt
(
ƒ
Ë
	$throw
(
Eº‹
)

181 if(!(
ƒ
 < 
öãrÁ˚_des¸ùt‹
.
bNumEndpoöts
)) {

182 
throw
 
	`Eº‹
–
	`QSåög
(
__PRETTY_FUNCTION__
) +"Endpoint doesÇotÉxist");

184  
_ídpoöt
[
ƒ
];

186 
	}
}

188 
boﬁ
 
	gA…î«ãSëtög
::
	$£tEndpoöt
(
Endpoöt
 
toPush
)

190 if(
_ídpoöt
.
	`size
(Ë< 
öãrÁ˚_des¸ùt‹
.
bNumEndpoöts
) {

191 
_ídpoöt
 +
toPush
;

192  
åue
;

194  
Ál£
;

196 
	}
}

198 
QSåög
 
	gA…î«ãSëtög
::
	$I¡îÁ˚PrŸocﬁ
()

200  
USBP¨£r
::
	`∑r£Devi˚Cœss
(
öãrÁ˚_des¸ùt‹
.
bDes¸ùt‹Ty≥
);

201 
	}
}

203 
	gA…î«ãSëtög
::
	$gëI¡îÁ˚Nr
()

205  
öãrÁ˚_des¸ùt‹
.
bI¡îÁ˚Numbî
;

206 
	}
}

210 
	gI¡îÁ˚
::
	$I¡îÁ˚
(Ë: 
	$_numOfA…I¡îÁ˚s
(0)

211 {
	}
}

213 
I¡îÁ˚
::
	$I¡îÁ˚
(
numOfA…I¡îÁ˚s
Ë: 
	$_numOfA…I¡îÁ˚s
(
numOfA…I¡îÁ˚s
)

214 {
	}
}

216 
I¡îÁ˚
::
	$I¡îÁ˚
(c⁄° 
libusb_öãrÁ˚
* 
toGë
)

218 
_numOfA…I¡îÁ˚s
 = 
toGë
->
num_Æt£âög
;

220 
i
=0; i<
_numOfA…I¡îÁ˚s
; ++i) {

221 
A…î«ãSëtög
 
	`tmpA…î«ãSëtög
(
toGë
->
Æt£âög
);

222 
_Æã∫©eSëtög
.
	`push_back
(
tmpA…î«ãSëtög
);

224 
	}
}

226 
QSåögLi°
 
	gI¡îÁ˚
::
	$gëI¡îÁ˚sNames
()

228 
QSåögLi°
 
tmp
;

229 
i
=0; i<
_numOfA…I¡îÁ˚s
; ++i) {

230 
tmp
.
	`≠≥nd
("\t->" + 
USBP¨£r
::
	`∑r£Devi˚Cœss
(
_Æã∫©eSëtög
[
i
].
	`öãø˚Cœss
()));

232  
tmp
;

233 
	}
}

235 
A…î«ãSëtög
 
	gI¡îÁ˚
::
	$„tchI¡îÁ˚
(
QSåög
 
«me
)

237 autÿ
ôî
 = 
_Æã∫©eSëtög
.
	`begö
();

238  
i
 = 0, 
max
=
_Æã∫©eSëtög
.
	`size
();

239 
i
 < 
max
;

240 ++
i


242 i‡–
«me
 =
USBP¨£r
::
	`∑r£Devi˚Cœss
(
ôî
[
i
].
	`öãø˚Cœss
()) ) {

243  
ôî
[
i
];

246  
	`A…î«ãSëtög
();

247 
	}
}

251 
QSåög
 
	gUSBP¨£r
::
	$∑r£Devi˚Cœss
(
code
)

253 
code
) {

254 
LIBUSB_CLASS_PER_INTERFACE
:

256 
LIBUSB_CLASS_AUDIO
:

258 
LIBUSB_CLASS_COMM
:

260 
LIBUSB_CLASS_HID
:

262 
LIBUSB_CLASS_PHYSICAL
:

264 
LIBUSB_CLASS_PRINTER
:

266 
LIBUSB_CLASS_PTP
:

268 
LIBUSB_CLASS_MASS_STORAGE
:

270 
LIBUSB_CLASS_DATA
:

272 
LIBUSB_CLASS_SMART_CARD
:

274 
LIBUSB_CLASS_CONTENT_SECURITY
:

276 
LIBUSB_CLASS_PERSONAL_HEALTHCARE
:

278 
LIBUSB_CLASS_DIAGNOSTIC_DEVICE
:

280 
LIBUSB_CLASS_WIRELESS
:

282 
LIBUSB_CLASS_APPLICATION
:

284 
LIBUSB_CLASS_VENDOR_SPEC
:

291 
	}
}

293 
QSåög
 
	gUSBP¨£r
::
	$∑r£UsbEº‹
(
îr‹
)

295  
îr‹
) {

296 
LIBUSB_SUCCESS
:

298 
LIBUSB_ERROR_IO
:

300 
LIBUSB_ERROR_INVALID_PARAM
:

302 
LIBUSB_ERROR_ACCESS
:

304 
LIBUSB_ERROR_NO_DEVICE
:

306 
LIBUSB_ERROR_NOT_FOUND
:

308 
LIBUSB_ERROR_BUSY
:

310 
LIBUSB_ERROR_TIMEOUT
:

312 
LIBUSB_ERROR_OVERFLOW
:

314 
LIBUSB_ERROR_PIPE
:

316 
LIBUSB_ERROR_INTERRUPTED
:

318 
LIBUSB_ERROR_NO_MEM
:

320 
LIBUSB_ERROR_NOT_SUPPORTED
:

322 
LIBUSB_ERROR_OTHER
:

327 
	}
}

329 
	gUsbDev
::
	$UsbDev
(Ë: 
	`_isO≥n
(
Ál£
),

330 
	`_devi˚Numbî
(
OUT_OF_USB_BUS
),

331 
	`_n⁄SUdoDev
(0),

332 
	`_devi˚
(0),

333 
	$_devi˚_h™dÀ
(0)

334 { 
	}
}

336 
	gUsbDev
::
	$UsbDev
(
libusb_devi˚
 *
devi˚
,
devNr
,
QSåög
 *
îr‹Log
Ë: 
	`_isO≥n
(
Ál£
),

337 
	`_n⁄SUdoDev
(
Ál£
),

338 
	$_devi˚
(
devi˚
)

341 
°rög_buf„r_m™uÁ˘uªr
[4096];

342 
°rög_buf„r_¥odu˘
[4096];

344 
îr‹
=0;

345 
îr‹
 = 
	`libusb_gë_devi˚_des¸ùt‹
(
devi˚
, &
_devi˚_des¸ùt‹
);

346 if(
îr‹
 < 0) {

347 
	`QTextSåóm
(
îr‹Log
Ë<< "Eº‹: FaûedÅÿgë des¸ùt‹"<< 
ídl
;

349 
îr‹

	`libusb_›í
(
devi˚
,&
_devi˚_h™dÀ
);

350 if(
îr‹
<0) {

351 
	`QTextSåóm
(
îr‹Log
) << "Error: Opening USB devicenr: "

352 << 
devNr


353 << 
ídl
;

355 
_isO≥n
 = 1;

356 
îr‹
 = 
	`libusb_gë_°rög_des¸ùt‹_ascii
(
_devi˚_h™dÀ
,

357 
_devi˚_des¸ùt‹
.
iM™uÁ˘uªr
,

358 
°rög_buf„r_m™uÁ˘uªr
,

359 (
°rög_buf„r_m™uÁ˘uªr
));

360 if(
îr‹
 < 0) {

361 
	`QTextSåóm
(
îr‹Log
Ë<< "Eº‹: C⁄vîtög des¸ùt‹ÅÿASCII [iM™uÁ˘uªr]" << 
ídl
;

364 
îr‹
 = 
	`libusb_gë_°rög_des¸ùt‹_ascii
(
_devi˚_h™dÀ
,

365 
_devi˚_des¸ùt‹
.
iProdu˘
,

366 
°rög_buf„r_¥odu˘
,

367 (
°rög_buf„r_¥odu˘
));

368 if(
îr‹
<0) {

370 
	`QTextSåóm
(
îr‹Log
Ë<< "Eº‹: C⁄vîtög des¸ùt‹ÅÿASCII [iProdu˘]" <<
ídl
;

372 
	`QTextSåóm
(
îr‹Log
Ë<< "Suc˚s! Devi˚ádded!" << 
ídl
;

373 
	`QTextSåóm
(&
_m™uÁ˘uªr
Ë<< (c⁄° *)
°rög_buf„r_m™uÁ˘uªr
;

374 
	`QTextSåóm
(&
_¥odu˘
Ë<< (c⁄° *)
°rög_buf„r_¥odu˘
;

375 
_devi˚Numbî
 = 
devNr
;

376 
_devi˚
 =
devi˚
;

377 
_n⁄SUdoDev
=
åue
;

378 
_numOfC⁄figuøti⁄s
 = 
_devi˚_des¸ùt‹
.
bNumC⁄figuøti⁄s
;

379 
_idVíd‹
 = 
_devi˚_des¸ùt‹
.
idVíd‹
;

380 
_idProdu˘
 = 
_devi˚_des¸ùt‹
.
idProdu˘
;

382 
	`libusb_gë_c⁄fig_des¸ùt‹
(
_devi˚
, 0, &
_devi˚_c⁄fig
);

383 
_numOfI¡îÁ˚s
 = 
_devi˚_c⁄fig
->
bNumI¡îÁ˚s
;

384 
i
=0; i< 
_numOfI¡îÁ˚s
; i++) {

385 
I¡îÁ˚
 
	`tmpI¡îÁ˚
(
_devi˚_c⁄fig
->
öãrÁ˚
);

386 
_öãrÁ˚
.
	`push_back
(
tmpI¡îÁ˚
);

388 
_devi˚Cœss
 = 
	`∑r£Devi˚Cœss
();

389 
	`libusb_‰ì_c⁄fig_des¸ùt‹
(
_devi˚_c⁄fig
);

391 if(
_isO≥n
 == 1) {

392 
	`libusb_˛o£
(
_devi˚_h™dÀ
);

393 
_isO≥n
 = 0;

398 i‡(
_isO≥n
 == 1) {

399 
	`libusb_˛o£
(
_devi˚_h™dÀ
);

400 
_isO≥n
 = 0;

403 
	}
}

405 
	gUsbDev
::~
	$UsbDev
()

407 
	`˛o£
();

408 
	}
}

410 
	gUsbDev
::
	$›í
(Ë
	$throw
(
Eº‹
)

412 if(
_isO≥n
) {

413  
åue
;

415 
tmp
 = 
	`libusb_›í
(
_devi˚
, &
_devi˚_h™dÀ
);

416 if(
tmp
 < 0) {

417 
_devi˚Log
 << "Error: Opening USB device";

418 if(
_isU£rC⁄√˘abÀ
 !
Ál£
) _isUserConnectable = false;

419 
_isO≥n
 = 
Ál£
;

420 
throw
 
	`Eº‹
–
	`QSåög
(
__PRETTY_FUNCTION__
) +"Can't open USB device");

422 
°
.
	`push
(
Sèã
::
ST
::
O≥√d
);

423 if(!
_isU£rC⁄√˘abÀ
Ë_isU£rC⁄√˘abÀ = 
åue
;

424  (
_isO≥n
 = 
åue
);

426 
	}
}

428 
	gUsbDev
::
	$gëNumOfPossibÀC⁄figuøti⁄s
()

430  
_numOfC⁄figuøti⁄s
;

431 
	}
}

433 
	gUsbDev
::
	$gëVíd‹ID
()

435  
_idVíd‹
;

436 
	}
}

437 
	gUsbDev
::
	$gëProdu˘ID
()

439  
_idProdu˘
;

440 
	}
}

442 
QSåögLi°
 
	gUsbDev
::
	$gëDevi˚Cœss
()

444  
_devi˚Cœss
;

445 
	}
}

447 
libusb_devi˚_h™dÀ
* 
	gUsbDev
::
	$gëH™dÀ
(Ë
	$throw
(
Eº‹
)

449 i‡–
_devi˚_h™dÀ
 ) {

450  
_devi˚_h™dÀ
;

452 
Eº‹
 
	`b
("No handleávailable");

453 
throw
 
b
;

455 
	}
}

457 
A…î«ãSëtög
 
	gUsbDev
::
	$gëI¡îÁ˚
(
QSåög
 
ídpoötTy≥
Ë
	$throw
(
Eº‹
)

459 autÿ
ôî
 = 
_öãrÁ˚
.
	`begö
();

460  
i
=0; i< 
_öãrÁ˚
.
	`size
(); ++i ) {

461 
A…î«ãSëtög
 
tmp
 = 
ôî
[
i
].
	`„tchI¡îÁ˚
(
ídpoötTy≥
);

462 if–
tmp
.
	`exi°
() ) {

463  
tmp
;

466 i‡–
ôî
 =
_öãrÁ˚
.
	`íd
() ) {

467 
throw
 
	`Eº‹
–
	`QSåög
(
__PRETTY_FUNCTION__
) +"No such interface");

470  
	`A…î«ãSëtög
();

471 
	}
}

474 
	gUsbDev
::
	$gëEndpoöt
(
QSåög
 
ídpoötTy≥
, QSåög &
ªsu…
)

476 
ªsu…
 = "uninitialised";

477 áutÿ
i
: 
_öãrÁ˚
 ) {

478 
A…î«ãSëtög
 
tmp
 = 
i
.
	`„tchI¡îÁ˚
(
ídpoötTy≥
);

479 if–
tmp
.
	`exi°
() ) {

480 
ªsu…
 = "success";

481  
tmp
.
	`gëEndpoöt
(0).
	`gëbEndpoötAddªss
();

484 
ªsu…
 == "fail";

485 
a
='\0';

486  
a
;

487 
	}
}

489 
boﬁ
 
	gUsbDev
::
	$isN⁄SudoDev
() const

491  
_n⁄SUdoDev
;

492 
	}
}

494 
QSåög
 
	gUsbDev
::
	$gëProdu˘Såög
() const

496  
_¥odu˘
;

497 
	}
}

499 
QSåög
 
	gUsbDev
::
	$gëM™uÁ˘uªrSåög
() const

501  
_m™uÁ˘uªr
;

502 
	}
}

504 
QSåögLi°
 
	gUsbDev
::
	$devInfo
()

506 
QSåögLi°
 
ªtQSåögLi°
;

507 
ªtQSåögLi°
.
	`≠≥nd
(
	`QSåög
("Produ˘:\t\t"Ë+ 
	`gëProdu˘Såög
());

508 
ªtQSåögLi°
.
	`≠≥nd
(
	`QSåög
("M™uÁ˘uªr:\t"Ë+ 
	`gëM™uÁ˘uªrSåög
());

509 
ªtQSåögLi°
.
	`≠≥nd
(
	`QSåög
("Device class:\t"));

510 
ªtQSåögLi°
.
	`≠≥nd
(
	`gëDevi˚Cœss
());

511 
ªtQSåögLi°
.
	`≠≥nd
(
	`QSåög
("Víd‹ ID:\t\t"Ë+ QSåög("0x%1").
	`¨g
(
	`gëVíd‹ID
(),0,16));

512 
ªtQSåögLi°
.
	`≠≥nd
(
	`QSåög
("Produ¯ID:\t\t"Ë+ QSåög("0x%1").
	`¨g
(
	`gëProdu˘ID
(),0,16));

513 
ªtQSåögLi°
.
	`≠≥nd
(
	`QSåög
("Num o‡possibÀ c⁄figuøti⁄s:\t"Ë+ QSåög("%1").
	`¨g
(
	`gëNumOfPossibÀC⁄figuøti⁄s
(),0,10));

514 
ªtQSåögLi°
.
	`≠≥nd
(
	`QSåög
("Num o‡devi˚ i¡îÁ˚†is:\t"Ë+QSåög("%1").
	`¨g
(
_numOfI¡îÁ˚s
,0,10));

515  
ªtQSåögLi°
;

516 
	}
}

519 
	$øw_öãºu±_å™s„r
–
libusb_devi˚_h™dÀ
 *
h™dÀ
,

520 
Endpoöt
::
Dúe˘i⁄
 
IO
,

521 *
buf
,

522 
size_t
 
buf_Àn
,

523 &
a˘_Àn
,

524 
timeout


525 Ë
	$throw
(
Eº‹
)

527 
nByãs
 = 
	`libusb_öãºu±_å™s„r
–
h™dÀ
,

528 
IO
,

529 
buf
,

530 
buf_Àn
,

531 &
a˘_Àn
,

532 
timeout


534 i‡–
nByãs
 < 0 )

535 
throw
 
	`Eº‹
–
	`QSåög
(
__PRETTY_FUNCTION__
Ë+
USBP¨£r
::
	`∑r£UsbEº‹
(
nByãs
));

536 
	}
}

538 
	$øw_ªÀa£_öãrÁ˚
–
libusb_devi˚_h™dÀ
 *
h™dÀ
, 
uöt8_t
 
ïNr
 ) 
	$throw
(
Eº‹
)

540 
ªt
 = 
	`libusb_ªÀa£_öãrÁ˚
–
h™dÀ
,
ïNr
);

541 i‡–
ªt
 < 0 ) {

542 
throw
 
	`Eº‹
–
	`QSåög
(
__PRETTY_FUNCTION__
Ë+ 
USBP¨£r
::
	`∑r£UsbEº‹
(
ªt
));

544 
	}
}

546 
	$øw_˛o£
(
libusb_devi˚_h™dÀ
 *
h™dÀ
)

548 
	`libusb_˛o£
(
h™dÀ
);

549 
	}
}

553 
QSåög
 
	gUsbDev
::
	$öãºu±_å™s„r
–
Endpoöt
::
Dúe˘i⁄
 
IO
, c⁄° 
timeout
=5000 )

555 
boﬁ
 
£t_me_abœze
 = 
åue
;

556 
buf„r
[2] = { 0xff,0xff };

557 
buf„r
[1] = 
£t_me_abœze
;

558 
a˘_Àn
;

560 
åy
 {

561 
this
->
	`›í
();

562 
A…î«ãSëtög
 
tmpI¡
 = 
this
->
	`gëI¡îÁ˚
("HID");

563 
this
->
	`checkAndDëachKî√lDrivî
—his->
	`gëH™dÀ
(),
tmpI¡
.
	`gëI¡îÁ˚Nr
());

564 
this
->
	`˛aim_öãrÁ˚
–this->
	`gëH™dÀ
(), 
tmpI¡
.
	`gëI¡îÁ˚Nr
() );

565 
this
->
	`checkBuff‹
–(
buf„r
),
tmpI¡
.
	`gëEndpoöt
(
Endpoöt
::
Dúe˘i⁄
::
Out
).
	`maxPackëSize
(), Endpoint::Direction::Out );

566 
	`øw_öãºu±_å™s„r
(
this
->
	`gëH™dÀ
(), 
IO
, 
buf„r
, (buf„r), 
a˘_Àn
, 
timeout
 );

567 i‡(
£t_me_abœze
 =
åue
) {

568 
£t_me_abœze
 = 
Ál£
;

570 
£t_me_abœze
 = 
åue
;

572 
	`‰ìSèãs
();

573 } 
	`ˇtch
 (
Eº‹
 &
îr
) {

574 
	`‰ìSèãs
();

575  
îr
.
	`gë
();

578 
	}
}

581 
QSåög
 
	gUsbDeb
::
	$c⁄åﬁl_å™s„r
(
Endpoöt
::
Dúe˘i⁄
 
IO
, * 
bu„r
, 
size_t
 
buf_size
, c⁄° 
timeout
=5000)

583 
	`libusb_c⁄åﬁ_å™s„r
(

584 
this
->
	`gëH™dÀ
(),

585 
LIBUSB_REQUEST_TYPE_VENDOR
 | 
LIBUSB_RECIPIENT_DEVICE
 | 
LIBUSB_ENDPOINT_OUT
,

586 
IO
,

589 
bu„r
,

590 
buf_size
,

591 
timeout


593 
	}
}

595 
	gUsbDev
::
	$˛o£
()

597 if(
_isO≥n
) {

598 
	`øw_˛o£
(
this
->
	`gëH™dÀ
());

599  (
_isO≥n
 = 
Ál£
);

601  (
_isO≥n
 = 
åue
);

603 
	}
}

605 
	gUsbDev
::
	$deCœim
(Ë
	$throw
(
Eº‹
)

607 
	`øw_ªÀa£_öãrÁ˚
(
this
->
	`gëH™dÀ
(), 
°
.
	`p›InNr
() );

608 
	}
}

609 
boﬁ
 
	gUsbDev
::
	$‰ìSèãs
()

611 
åy
 {

612 
Sèã
::
ST
 
tmp
 = 
°
.
	`p›
();

613 ; 
tmp
 !
Sèã
::
ST
::
N⁄e
;Åm∞
°
.
	`p›
() ) {

614  
tmp
 ) {

615 
Sèã
::
ST
::
N⁄e
:

617 
Sèã
::
ST
::
O≥√d
:

618 
	`˛o£
();

620 
Sèã
::
ST
::
Cœimed
:

621 
	`deCœim
();

624 
	`qDebug
() << "Success!";

628 } 
	`ˇtch
 ( 
Eº‹
 &
îr
 ) {

629 
	`qDebug
() << "What do doÇow?";

630 
	`qDebug
(Ë<< 
îr
.
	`gë
();

631  
Ál£
;

633  
åue
;

634 
	}
}

638 
QSåögLi°
 
	gUsbDev
::
	$∑r£Devi˚Cœss
()

640 
QSåögLi°
 
tmp
;

641 if(
_devi˚_des¸ùt‹
.
bDevi˚Cœss
 =
LIBUSB_CLASS_PER_INTERFACE
) {

642 
i
=0; i<
_devi˚_des¸ùt‹
.
bNumC⁄figuøti⁄s
; ++i) {

643 
tmp
.
	`≠≥nd
(
_öãrÁ˚
[
i
].
	`gëI¡îÁ˚sNames
());

646 
tmp
.
	`≠≥nd
(
USBP¨£r
::
	`∑r£Devi˚Cœss
(
_devi˚_des¸ùt‹
.
bDevi˚Cœss
));

648  
tmp
;

649 
	}
}

651 
	gUsbDev
::
	$checkAndDëachKî√lDrivî
(
libusb_devi˚_h™dÀ
* 
h™dÀ
, 
uöt8_t
 
öãrÁ˚Nr
 )

653 i‡–
	`libusb_kî√l_drivî_a˘ive
(
h™dÀ
, 
öãrÁ˚Nr
 ) =
åue
 ) {

654 
	`libusb_dëach_kî√l_drivî
(
h™dÀ
, 
öãrÁ˚Nr
 );

656 
	}
}

662 
	gUsbDev
::
	$checkBuff‹
–
size_t
 
buffSize
, size_à
eBuffSize
, 
Endpoöt
::
Dúe˘i⁄
 
IO
 ) 
	$throw
(
Eº‹
)

664 i‡–
buffSize
 > 
eBuffSize
 && 
IO
 =
Endpoöt
::
Dúe˘i⁄
::
In
 ) {

665 
throw
 
	`Eº‹
–
	`QSåög
(
__PRETTY_FUNCTION__
) +"BufforÅoo big forÅransfer");

666 } i‡(
buffSize
 < 
eBuffSize
 && 
IO
 =
Endpoöt
::
Dúe˘i⁄
::
Out
 ) {

667 
throw
 
	`Eº‹
–
	`QSåög
(
__PRETTY_FUNCTION__
) +"BufforÅoo small forÅransfer");

669 
	}
}

671 
	gUsbDev
::
	$˛aim_öãrÁ˚
(
libusb_devi˚_h™dÀ
* 
h™dÀ
, 
ïNr
 ) 
	$throw
(
Eº‹
)

673 i‡–
	`libusb_˛aim_öãrÁ˚
(
h™dÀ
,
ïNr
) < 0 ) {

674 
throw
 
	`Eº‹
–
	`QSåög
(
__PRETTY_FUNCTION__
) +"CanÇot claim interface");

676 
°
.
	`push
(
ïNr
);

678 
	}
}

	@QtUsb/usbdev.h

1 #i‚de‡
USBDEV_H


2 
	#USBDEV_H


	)

4 
	~<libusb-1.0/libusb.h
>

5 
	~<QSåög
>

6 
	~<QSåögLi°
>

7 
	~<QTøn¶©‹
>

8 
	~<QTextSåóm
>

9 
	~<QVe˘‹
>

10 
	~<QLi°
>

11 
	~<ba£öfo.h
>

12 
	~<QDebug
>

17 
«me•a˚
 
	gUSBP¨£r


19 
QSåög
 
∑r£Devi˚Cœss
(
code
);

20 
QSåög
 
∑r£UsbEº‹
(
îr‹
);

26 ˛as†
	cEndpoöt
 : 
public
 
libusb_ídpoöt_des¸ùt‹


28 
¥iv©e
:

29 
QSåög
 
exåa_
;

30 
	mpublic
:

31 
	eDúe˘i⁄
 {

32 
In
 = 0,

33 
	mOut
 = 1,

35 
Endpoöt
();

36 
Endpoöt
(c⁄° 
libusb_ídpoöt_des¸ùt‹
 *
ídpoöt
);

37 
gëbEndpoötAddªss
();

38 
de¸ùt‹Size
();

39 
QSåög
 
dúe˘i⁄
();

40 
ídpoötNr
();

41 
maxPackëSize
();

42 
pﬁlötI¡îvÆ
();

43 
ª‰eshFìdback
();

44 
synchAddªss
();

45 
QSåögLi°
 
∑r£_bmAâribuãs
();

46 
boﬁ
 
	$exi°
() const;

47 
	}
};

49 ˛as†
	cA…î«ãSëtög


51 
	m¥iv©e
:

52 
libusb_öãrÁ˚_des¸ùt‹
 
öãrÁ˚_des¸ùt‹
;

53 
	mQVe˘‹
<
	mEndpoöt
> 
	m_ídpoöt
;

54 
QSåög
 
	m_exåa
;

55 
	mpublic
:

56 
A…î«ãSëtög
();

57 
A…î«ãSëtög
(c⁄° 
libusb_öãrÁ˚_des¸ùt‹
* 
toGë
);

58 ~
A…î«ãSëtög
();

59 
boﬁ
 
exi°
();

60 
öãø˚Cœss
();

61 
Endpoöt
 
	$gëEndpoöt
(
ƒ
Ë
	`throw
(
Eº‹
);

62 
Endpoöt
 
	`gëEndpoöt
(Endpoöt::
Dúe˘i⁄
 
IO
);

63 
boﬁ
 
	`£tEndpoöt
(
Endpoöt
 
toPush
);

64 
QSåög
 
	`I¡îÁ˚PrŸocﬁ
();

65 
	`gëI¡îÁ˚Nr
();

71 ˛as†
	cI¡îÁ˚


73 
¥iv©e
:

74 
_numOfA…I¡îÁ˚s
;

75 
QVe˘‹
<
A…î«ãSëtög
> 
_Æã∫©eSëtög
;

77 
public
:

78 
	`I¡îÁ˚
();

79 
	`I¡îÁ˚
(
numOfA…I¡îÁ˚s
);

80 
	`I¡îÁ˚
(c⁄° 
libusb_öãrÁ˚
* 
toGë
);

81 
QSåögLi°
 
	`gëI¡îÁ˚sNames
();

82 
A…î«ãSëtög
 
	`„tchI¡îÁ˚
(
QSåög
 
«me
);

89 ˛as†
	cUsbDev


92 
OUT_OF_USB_BUS
 = 128,

95 
public
:

96 
	`UsbDev
();

97 
	`UsbDev
(
libusb_devi˚
 *
devi˚
, 
devNr
, 
QSåög
 *
îr‹Log
);

98 ~
	`UsbDev
();

100 ˛as†
	cSèã


102 
¥iv©e
:

103 
QVe˘‹
<> 
öãrÁ˚sNrCœimed
;

104 
public
:

105 
	eST
 {

106 
N⁄e
 = 0,

107 
O≥√d
,

108 
Cœimed
,

110 
ST
 
	`p›
()

112 i‡–
°©e
.
	`isEm±y
() ) {

113  
N⁄e
;

115 
ST
 
tmp
 = 
°©e
.
	`back
();

116 
°©e
.
	`p›_back
();

117  
tmp
;

120 
	`push
(
Sèã
::
ST
 
°
)

122 
°©e
.
	`push_back
(
°
);

125 
	`push
(
öãrÁ˚Nr
)

127 
°©e
.
	`push_back
(
Sèã
::
ST
::
Cœimed
);

128 
öãrÁ˚sNrCœimed
.
	`push_back
(
öãrÁ˚Nr
);

131 
	`p›InNr
()

133 
tmp
 = 
öãrÁ˚sNrCœimed
.
	`back
();

134 
öãrÁ˚sNrCœimed
.
	`p›_back
();

135  
tmp
;

138 
	`Sèã
() { }

139 
¥iv©e
:

140 
QLi°
<
ST
> 
°©e
;

141 
	}
};

143 
Sèã
 
	g°
;

144 
	$›í
(Ë
	`throw
(
Eº‹
);

145 
	`˛o£
();

147 
	`gëNumOfPossibÀC⁄figuøti⁄s
();

148 
	`gëVíd‹ID
();

149 
	`gëProdu˘ID
();

150 
QSåögLi°
 
	`gëDevi˚Cœss
();

151 
	`gëC⁄figDes¸ùt‹
();

153 
libusb_devi˚_h™dÀ
 *
	$gëH™dÀ
(Ë
	`throw
(
Eº‹
);

154 
A…î«ãSëtög
 
	$gëI¡îÁ˚
(
QSåög
 
ídpoötTy≥
Ë
	`throw
(
Eº‹
);

155 
	`gëEndpoöt
(
QSåög
 
ídpoötTy≥
, QSåög &
ªsu…
);

156 
boﬁ
 
	$isN⁄SudoDev
() const;

158 
QSåög
 
	$gëProdu˘Såög
() const;

159 
QSåög
 
	$gëM™uÁ˘uªrSåög
() const;

160 
QSåögLi°
 
	`devInfo
();

161 
QSåögLi°
 
	`gëC⁄figD©a
();

162 
QSåög
 
	`öãºu±_å™s„r
(
Endpoöt
::
Dúe˘i⁄
 
IO
);

163 
QSåög
 
	`c⁄åﬁl_å™s„r
(
Endpoöt
::
Dúe˘i⁄
 
IO
);

165 
	$deCœim
(Ë
	`throw
(
Eº‹
);

166 
boﬁ
 
	`‰ìSèãs
();

168 
¥iv©e
:

169 
QSåögLi°
 
	`∑r£Devi˚Cœss
();

170 
	`checkAndDëachKî√lDrivî
(
libusb_devi˚_h™dÀ
* 
h™dÀ
, 
uöt8_t
 
öãrÁ˚Nr
 );

171 
	$checkBuff‹
–
size_t
 
buffSize
, size_à
eBuffSize
, 
Endpoöt
::
Dúe˘i⁄
 
IO
 ) 
	`throw
(
Eº‹
);

172 
	$˛aim_öãrÁ˚
(
libusb_devi˚_h™dÀ
* 
h™dÀ
, 
ïNr
 ) 
	`throw
(
Eº‹
);

174 
_isO≥n
;

175 
_devi˚Numbî
;

176 
boﬁ
 
_n⁄SUdoDev
;

177 
libusb_devi˚
 *
_devi˚
;

178 
libusb_devi˚_h™dÀ
 *
_devi˚_h™dÀ
;

179 
libusb_devi˚_des¸ùt‹
 
_devi˚_des¸ùt‹
;

180 
libusb_c⁄fig_des¸ùt‹
 *
_devi˚_c⁄fig
;

181 
QVe˘‹
<
I¡îÁ˚
> 
_öãrÁ˚
;

182 
QSåögLi°
 
_devi˚Cœss
;

183 
QSåög
 
_m™uÁ˘uªr
;

184 
QSåög
 
_¥odu˘
;

185 
_numOfC⁄figuøti⁄s
;

186 
_idVíd‹
;

187 
_idProdu˘
;

188 
_numOfI¡îÁ˚s
;

189 
_numbîOfA…î«ãSëtögs
;

190 
_numbîOfEndpoöts
;

192 
boﬁ
 
_isU£rC⁄√˘abÀ
;

193 
QSåögLi°
 
_devi˚Log
;

195 
	}
};

	@main.cpp

1 
	~<QtGui
>

2 
	~"maöwödow.h
"

3 
	~<QtWidgës/QAµliˇti⁄
>

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
QAµliˇti⁄
 
	`a
(
¨gc
, 
¨gv
);

8 
MaöWödow
 
w
;

9 
w
.
	`show
();

11  
a
.
	`exec
();

12 
	}
}

	@mainwindow.cpp

1 
	~"maöwödow.h
"

2 
	~"ui_maöwödow.h
"

3 
	~<libusb-1.0/libusb.h
>

4 
	~<qwt/qwt_∂Ÿ_curve.h
>

5 
	~<QVe˘‹
>

7 
	~"ãmpTabÀ.h
"

9 
	gpwm
, 
	gpwm_mö
, 
	gpwm_max
;

10 
	gãmp
,
	gãmp_mö
, 
	gãmp_max
;

11 
	g¥›
, 
	g¥›_mö
, 
	g¥›_maxp
;

12 
	göãg
, 
	göãg_mö
, 
	göãg_max
;

13 
	gdîiv
, 
	gdîiv_mö
, 
	gdîiv_max
;

16 
	#USB_DATA_OUT
 2

17 
	#USB_DATA_IN
 4

18 
libusb_devi˚_h™dÀ
 *
devi˚_h™dÀ
;

19 
libusb_devi˚_des¸ùt‹
 
devi˚_des¸ùt‹
;

20 
libusb_devi˚
 **
devi˚_li°
;

21 
ssize_t
 
devi˚_cou¡
;

22 
r
;

23 
libusb_c⁄ãxt
 *
˘x
;

24 
USB_Fœg_c⁄e˘ed
=0;

	)

25 
uch¨
 
	gbuf„r
[8]= {0,0,0,0,0,0,0};

26 
	ebuf„rByã
 {

27 
	mFœg
,
	mTempYoungADC
,
	mTempOldADC
,
	mTempYoungSë
,
	mTempOldSë
,
	mPID_P
,
	mPID_I
,
	mPID_D


31 
	gtimeSecs
=1;

32 
	gQVe˘‹
<> 
PlŸTempD©a
(
QVe˘‹
<>(100));

33 
	gQVe˘‹
<> 
PlŸTempSë
(
QVe˘‹
<>(100));

34 
	gQVe˘‹
<> 
PlŸTime
(
QVe˘‹
<>(100));

36 
	$Rï‹tEº‹
–
QLi°Widgë
 *
⁄
, 
QSåög
 &
°r
 ) {

37 
⁄
->
	`addIãm
(
°r
);

38 
⁄
->
	`ôem
(⁄->
	`cou¡
(Ë- 1)->
	`£tF‹eground
(
Qt
::
whôe
);

39 
⁄
->
	`ôem
(⁄->
	`cou¡
(Ë- 1)->
	`£tBackground
(
Qt
::
ªd
);

40 
	}
}

42 
	gMaöWödow
::
	$MaöWödow
(
QWidgë
 *
∑ª¡
) :

43 
	`QMaöWödow
(
∑ª¡
),

44 
	$ui
(
√w
 
Ui
::
MaöWödow
)

46 
ui
->
	`£tupUi
(
this
);

48 
TimmögVÆue
=0;

49 
	`£tWödowTôÀ
("Fila Controll");

51 
buf„r
[0]=0;

54 
CurvePlŸTempD©a
 = 
√w
 
	`QwtPlŸCurve
("Real 1");

55 
CurvePlŸTempSë
 = 
√w
 
	`QwtPlŸCurve
("Set 2");

58 
ui
->
qwtPlŸ
->
	`£tTôÀ
("SetándÑealÅemp");

59 
ui
->
qwtPlŸ
->
	`£tAxisTôÀ
–
QwtPlŸ
::
yLe·
 ,"Temp [*C]");

60 
ui
->
qwtPlŸ
->
	`£tAxisTôÀ
–
QwtPlŸ
::
xBŸtom
, "Time [s] ");

61 
CurvePlŸTempD©a
->
	`£tSam∂es
(
PlŸTime
,
PlŸTempD©a
);

62 
CurvePlŸTempD©a
->
	`£tPí
–
	`QPí
(
Qt
::
ªd
));

63 
CurvePlŸTempSë
->
	`£tSam∂es
(
PlŸTime
,
PlŸTempSë
);

64 
CurvePlŸTempSë
->
	`£tPí
–
	`QPí
(
Qt
::
blue
));

65 
CurvePlŸTempD©a
->
	`©èch
(
ui
->
qwtPlŸ
);

66 
CurvePlŸTempSë
->
	`©èch
(
ui
->
qwtPlŸ
);

69 
ui
->
dül_Temp
->
	`£tMaximum
(250);

70 
ui
->
dSpöBox_Temp
->
	`£tMaximum
(250);

71 
ui
->
¥ogªssB¨
->
	`£tVÆue
(0);

72 
ui
->
dül_PWM
->
	`£tMaximum
(100);

73 
ui
->
dSpöBox_PWM
->
	`£tMaximum
(100);

75 
ui
->
qwtPlŸ
->
	`ª∂Ÿ
();

78 
r
 = 
	`libusb_öô
(&
˘x
);

80 
devi˚_cou¡
 = 
	`libusb_gë_devi˚_li°
(
˘x
, &
devi˚_li°
);

81 
ußbÀDevCou¡
 = 
√w
 (
devi˚_cou¡
);

87 
Reguœti⁄Ty≥
=0;

88 
	}
}

90 
	gMaöWödow
::~
	$MaöWödow
()

92 
	`libusb_˛o£
(
devi˚_h™dÀ
);

93 
	`kûlTimî
(
timîId
);

94 
dñëe
 
ußbÀDevCou¡
;

95 
dñëe
 
ui
;

96 
	}
}

100 
	gMaöWödow
::
	$⁄_dül_PWM_¶idîMoved
(
posôi⁄
)

102 
pwm
=
posôi⁄
;

103 
ui
->
dSpöBox_PWM
->
	`£tVÆue
(
pwm
);

104 
	}
}

105 
	gMaöWödow
::
	$⁄_dül_Temp_¶idîMoved
(
posôi⁄
)

107 
ãmp
=
posôi⁄
;

108 
ui
->
dSpöBox_Temp
->
	`£tVÆue
(
ãmp
);

109 
	}
}

111 
	gMaöWödow
::
	$⁄_vîtiˇlSlidî_P_¶idîMoved
(
posôi⁄
)

113 
¥›
=
posôi⁄
;

114 
ui
->
dSpöBox_P
->
	`£tVÆue
(
¥›
);

115 
	}
}

116 
	gMaöWödow
::
	$⁄_vîtiˇlSlidî_P_vÆueCh™ged
(
vÆue
)

118 
¥›
=
vÆue
;

119 
ui
->
dSpöBox_P
->
	`£tVÆue
(
¥›
);

121 
	}
}

122 
	gMaöWödow
::
	$⁄_dSpöBox_P_vÆueCh™ged
(
¨g1
)

124 
¥›
=
¨g1
;

125 
ui
->
vîtiˇlSlidî_P
->
	`£tSlidîPosôi⁄
((
¨g1
));

126 
	}
}

128 
	gMaöWödow
::
	$⁄_vîtiˇlSlidî_I_¶idîMoved
(
posôi⁄
)

130 
öãg
=
posôi⁄
;

131 
ui
->
dSpöBox_I
->
	`£tVÆue
(
öãg
);

132 
	}
}

133 
	gMaöWödow
::
	$⁄_vîtiˇlSlidî_I_vÆueCh™ged
(
vÆue
)

135 
öãg
=
vÆue
;

136 
ui
->
dSpöBox_I
->
	`£tVÆue
(
öãg
);

137 
	}
}

138 
	gMaöWödow
::
	$⁄_dSpöBox_I_vÆueCh™ged
(
¨g1
)

140 
öãg
=
¨g1
;

141 
ui
->
vîtiˇlSlidî_I
->
	`£tVÆue
(
öãg
);

142 
	}
}

144 
	gMaöWödow
::
	$⁄_vîtiˇlSlidî_D_¶idîMoved
(
posôi⁄
)

146 
dîiv
=
posôi⁄
;

147 
ui
->
dSpöBox_D
->
	`£tVÆue
(
dîiv
);

148 
	}
}

149 
	gMaöWödow
::
	$⁄_vîtiˇlSlidî_D_vÆueCh™ged
(
vÆue
)

151 
dîiv
=
vÆue
;

152 
ui
->
dSpöBox_D
->
	`£tVÆue
(
dîiv
);

153 
	}
}

154 
	gMaöWödow
::
	$⁄_dSpöBox_D_vÆueCh™ged
(
¨g1
)

156 
dîiv
=
¨g1
;

157 
ui
->
vîtiˇlSlidî_D
->
	`£tVÆue
(
dîiv
);

158 
	}
}

161 
	gMaöWödow
::
	$li°võw_p›uœã_usb_devi˚s
(Ë: 
	$throws
(
°d
::
ru¡ime_îr‹
)

164 
	}
}

166 
MaöWödow
::
	$⁄_li°Widgë_˛icked
(c⁄° 
QModñIndex
 &
ödex
)

169 
	}
}

171 
	$∂ŸCh¨t
–
T_£t
, 
a˘uÆ_time
, 
T_mósuªd
 )

173 
PlŸTempD©a
.
	`ö£π
(PlŸTempD©a.
	`size
(), 
T_£t
 );

174 
PlŸTime
.
	`ö£π
(PlŸTime.
	`size
(), 
a˘uÆ_time
 );

175 
PlŸTempSë
.
	`ö£π
(PlŸTempSë.
	`size
(), 
T_mósuªd
 );

177 
CurvePlŸTempD©a
->
	`£tSam∂es
(
PlŸTime
,
PlŸTempD©a
);

178 
CurvePlŸTempD©a
->
	`£tPí
–
	`QPí
(
Qt
::
ªd
));

179 
CurvePlŸTempSë
->
	`£tSam∂es
(
PlŸTime
,
PlŸTempSë
);

180 
CurvePlŸTempSë
->
	`£tPí
–
	`QPí
(
Qt
::
blue
));

181 
ui
->
qwtPlŸ
->
	`ª∂Ÿ
();

182 
	}
}

185 
	gMaöWödow
::
	$timîEvít
(
QTimîEvít
 *
evít
)

187 if((
buf„r
[
Fœg
]==1Ë&& (
USB_Fœg_c⁄e˘ed
==1Ë&& (
Reguœti⁄Ty≥
!=0)) {

196 
ãmpToSë
 = 
Reguœti⁄Ty≥
->
	`ªtu∫Temp
(
TimmögVÆue
,
ãmp
);

198 
u_öt16_t
 
ãmp_to_devi˚
 = 
	`ãmp_to_£nd
(
ãmpToSë
);

199 
buf„r
[
TempYoungSë
]=
ãmp_to_devi˚
&0xFF;

200 
buf„r
[
TempOldSë
] =(
ãmp_to_devi˚
>>8)&0xFF;

201 
buf„r
[
PID_P
]=(
u_öt8_t
)
¥›
;

202 
buf„r
[
PID_I
]=(
u_öt8_t
)
öãg
;

203 
buf„r
[
PID_D
]=(
u_öt8_t
)
dîiv
;

206 
	`libusb_c⁄åﬁ_å™s„r
(
devi˚_h™dÀ
,
LIBUSB_REQUEST_TYPE_VENDOR
 | 
LIBUSB_RECIPIENT_DEVICE
 | 
LIBUSB_ENDPOINT_OUT
,

207 
USB_DATA_IN
 , 0, 0, 
buf„r
, (buffer), 5000);

209 
	`libusb_c⁄åﬁ_å™s„r
(
devi˚_h™dÀ
,
LIBUSB_REQUEST_TYPE_VENDOR
 | 
LIBUSB_RECIPIENT_DEVICE
 | 
LIBUSB_ENDPOINT_IN
,

210 
USB_DATA_OUT
 , 0, 0, 
buf„r
, (buffer), 5000);

212 
	`∂ŸCh¨t
(
ãmpToSë
, 
timeSecs
++, 
	`ãmp_föd
–
buf„r
[
TempYoungADC
] | (buf„r[
TempOldADC
]<<8) ) );

214 if(
USB_Fœg_c⁄e˘ed
==0Ë
ui
->
ãxtBrow£r_usbMesßge
->
	`£tText
("no USB,ÇoÖlot");

215 if(
Reguœti⁄Ty≥
==0Ë
ui
->
ãxtBrow£r_usbMesßge
->
	`£tText
("NoÑegulation");

217 
	}
}

219 
	gMaöWödow
::
	$⁄_pushBuâ⁄_£nd_˛icked
()

227 
timîId
 = 
	`°¨tTimî
(1000);

228 if(
USB_Fœg_c⁄e˘ed
==0) {

229 
ui
->
ãxtBrow£r_usbMesßge
->
	`£tText
("Error -Ço USB connected");

231 if(
Reguœti⁄Ty≥
==0) {

232 if(
Reguœti⁄Ty≥
==0Ë
ui
->
ãxtBrow£r_usbMesßge
->
	`£tText
("NoÑegulation");

239 
buf„r
[
Fœg
]=1;

242 
u_öt16_t
 
ãmp_to_devi˚
 = 
	`ãmp_to_£nd
(
Reguœti⁄Ty≥
->
	`ªtu∫Temp
(0,
ãmp
));

243 
buf„r
[
TempYoungSë
]=
ãmp_to_devi˚
&0xFF;

244 
buf„r
[
TempOldSë
] =(
ãmp_to_devi˚
>>8)&0xFF;

245 
buf„r
[
PID_P
]=(
u_öt8_t
)
¥›
;

246 
buf„r
[
PID_I
]=(
u_öt8_t
)
öãg
;

247 
buf„r
[
PID_D
]=(
u_öt8_t
)
dîiv
;

250 
	`libusb_c⁄åﬁ_å™s„r
(
devi˚_h™dÀ
,
LIBUSB_REQUEST_TYPE_VENDOR
 | 
LIBUSB_RECIPIENT_DEVICE
 | 
LIBUSB_ENDPOINT_OUT
,

251 
USB_DATA_IN
 , 0, 0, 
buf„r
, (buffer), 5000);

253 
	`libusb_c⁄åﬁ_å™s„r
(
devi˚_h™dÀ
,
LIBUSB_REQUEST_TYPE_VENDOR
 | 
LIBUSB_RECIPIENT_DEVICE
 | 
LIBUSB_ENDPOINT_IN
,

254 
USB_DATA_OUT
 , 0, 0, 
buf„r
, (buffer), 5000);

258 
	}
}

260 
	gMaöWödow
::
	$⁄_ødioBuâ⁄_˛icked
()

262 
dñëe
 
Reguœti⁄Ty≥
;

263 
ui
->
ãxtBrow£r_£À˘
->
	`£tText
("InÅhis setup simpleÅemp curve is sendÅo deviceÅoÉasily solider on halogenÜamp-oven. \n"

266 
Reguœti⁄Ty≥
 = 
√w
 
SëupSﬁidîög
;

267 
	}
}

269 
	gMaöWödow
::
	$⁄_ødioBuâ⁄_bi°©e_˛icked
()

271 
dñëe
 
Reguœti⁄Ty≥
;

272 
ui
->
ãxtBrow£r_£À˘
->
	`£tText
("InÅhis setup controller is operatingás bistate controller,Åemperature is being set in"

274 
Reguœti⁄Ty≥
 = 
√w
 
SëupBi°©e
;

275 
	}
}

277 
	gMaöWödow
::
	$⁄_ødioBuâ⁄_åi°©e_˛icked
()

279 
dñëe
 
Reguœti⁄Ty≥
;

280 
ui
->
ãxtBrow£r_£À˘
->
	`£tText
("InÅhis setup controller is operatingásÅristate controller,Åemperature is being set in"

282 
Reguœti⁄Ty≥
 = 
√w
 
SëupTri°©e
;

283 
	}
}

285 
	gMaöWödow
::
	$⁄_ødioBuâ⁄_ãmpCheck_˛icked
()

287 
dñëe
 
Reguœti⁄Ty≥
;

288 
ui
->
ãxtBrow£r_£À˘
->
	`£tText
("InÅhis setup controller is operatingásÅhermometer with constantÅemperatureÖlot");

289 
Reguœti⁄Ty≥
 = 
√w
 
SëupTempCheck
;

290 
	}
}

293 
	gMaöWödow
::
	$⁄_ødioBuâ⁄_ãmpCurve_˛icked
()

295 
dñëe
 
Reguœti⁄Ty≥
;

296 
ui
->
ãxtBrow£r_£À˘
->
	`£tText
("InÅhis setupÉxternalÅemperature curve is used - is shall beÇamed dataCurve.txt. \n"

299 
Reguœti⁄Ty≥
 = 
√w
 
SëupExtTempCurv
;

300 
	}
}

302 
	gMaöWödow
::
	$⁄_ødioBuâ⁄_2_˛icked
()

304 
dñëe
 
Reguœti⁄Ty≥
;

305 
ui
->
ãxtBrow£r_£À˘
->
	`£tText
("Not supported yet.");

306 
	}
}

308 
	gMaöWödow
::
	$⁄_pushBuâ⁄_lﬂdFûe_˛icked
()

310 if(
Reguœti⁄Ty≥
!=0) {

311 
QSåög
 
fûeName
 = 
QFûeDülog
::
	`gëO≥nFûeName
(
this
, 
	`å
("Open File"),

313 
	`å
("Text (*.txt *.TXT)"));

314 
Reguœti⁄Ty≥
->
	`ch™geFûeName
(
fûeName
);

317 
ui
->
ãxtBrow£r_£À˘
->
	`£tText
("NoneÅype of work selected");

319 
	}
}

	@mainwindow.h

1 #i‚de‡
MAINWINDOW_H


2 
	#MAINWINDOW_H


	)

4 
	~<QtWidgës/QMaöWödow
>

5 
	~<QtWidgës/QLi°Widgë
>

6 
	~<QTime
>

7 
	~<QVe˘‹
>

8 
	~<QtWidgës/QFûeDülog
>

9 
	~"qwt/qwt_∂Ÿ_curve.h
"

10 
	~"£tup.h
"

11 
	~"£tupbi°©e.h
"

12 
	~"£tu≥xâempcurv.h
"

13 
	~"£tu±empcheck.h
"

14 
	~"£tu±ri°©e.h
"

15 
	~"£tupsﬁidîög.h
"

17 
«me•a˚
 
	gUi


19 
˛ass
 
	gMaöWödow
;

22 ˛as†
	cMaöWödow
 : 
public
 
QMaöWödow


24 
Q_OBJECT


26 
public
:

27 
ex∂icô
 
MaöWödow
(
QWidgë
 *
∑ª¡
 = 0);

28 ~
MaöWödow
();

29 
Sëup
 *
	mReguœti⁄Ty≥
;

30 
	mTimmögVÆue
;

32 
public
 
	m¶Ÿs
:

33 
li°võw_p›uœã_usb_devi˚s
();

35 
¥iv©e
 
	m¶Ÿs
:

36 
⁄_dül_PWM_¶idîMoved
(
posôi⁄
);

38 
⁄_dül_Temp_¶idîMoved
(
posôi⁄
);

40 
⁄_vîtiˇlSlidî_P_¶idîMoved
(
posôi⁄
);

42 
⁄_vîtiˇlSlidî_I_¶idîMoved
(
posôi⁄
);

44 
⁄_vîtiˇlSlidî_D_¶idîMoved
(
posôi⁄
);

46 
⁄_dSpöBox_P_vÆueCh™ged
(
¨g1
);

48 
⁄_dSpöBox_I_vÆueCh™ged
(
¨g1
);

50 
⁄_dSpöBox_D_vÆueCh™ged
(
¨g1
);

52 
⁄_vîtiˇlSlidî_P_vÆueCh™ged
(
vÆue
);

54 
⁄_vîtiˇlSlidî_I_vÆueCh™ged
(
vÆue
);

56 
⁄_vîtiˇlSlidî_D_vÆueCh™ged
(
vÆue
);

58 
⁄_li°Widgë_˛icked
(c⁄° 
QModñIndex
 &
ödex
);

60 
timîEvít
(
QTimîEvít
 *
evít
);

62 
⁄_pushBuâ⁄_£nd_˛icked
();

64 
⁄_ødioBuâ⁄_˛icked
();

66 
⁄_ødioBuâ⁄_bi°©e_˛icked
();

68 
⁄_ødioBuâ⁄_åi°©e_˛icked
();

70 
⁄_ødioBuâ⁄_ãmpCheck_˛icked
();

72 
⁄_ødioBuâ⁄_ãmpCurve_˛icked
();

74 
⁄_ødioBuâ⁄_2_˛icked
();

76 
⁄_pushBuâ⁄_2_˛icked
();

78 
⁄_pushBuâ⁄_lﬂdFûe_˛icked
();

80 
	m¥iv©e
:

81 
Ui
::
MaöWödow
 *
ui
;

83 
	mtimîId
;

85 
QwtPlŸCurve
 *
	mCurvePlŸTempD©a
;

86 
QwtPlŸCurve
 *
	mCurvePlŸTempSë
;

88 *
	mußbÀDevCou¡
;

	@setup.cpp

1 
	~"£tup.h
"

3 
	gSëup
::~
	$Sëup
()

5 
	}
}

7 
Sëup
::
	$ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 )

9 
	}
}

	@setup.h

1 #i‚de‡
SETUP_H


2 
	#SETUP_H


	)

9 
	~<QSåög
>

11 ˛as†
	cSëup


13 
	mpublic
:

14 íum {
Sim∂eCurve
,
	mBi°©eReg
,
	mTri°©eReg
,
	mTempCheck
,
	mExã∫Curve
} 
	gSëTy≥
;

16 
	gvútuÆ
 ~
Sëup
();

17 
vútuÆ
 
ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 );

18 
vútuÆ
 
	$ch™geFûeName
(
QSåög
Ë{
	}
};

	@setupbistate.cpp

1 
	~"£tupbi°©e.h
"

3 
	gSëupBi°©e
::
	$SëupBi°©e
()

6 
	}
}

8 
SëupBi°©e
::~
	$SëupBi°©e
()

11 
	}
}

13 
SëupBi°©e
::
	$ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 )

15 
posôi⁄
=position;

16 
posôi⁄
=0;

17  
ªtu∫VÆ
;

18 
	}
}

	@setupbistate.h

1 #i‚de‡
SETUPBISTATE_H


2 
	#SETUPBISTATE_H


	)

4 
	~"£tup.h
"

6 ˛as†
	cSëupBi°©e
 : 
public
 
Sëup


8 
public
:

9 
SëupBi°©e
();

10 ~
SëupBi°©e
();

11 
vútuÆ
 
ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 );

12 
vútuÆ
 
	$ch™geFûeName
(
QSåög
) {};

13 
	}
};

	@setupexttempcurv.cpp

1 
	~"£tu≥xâempcurv.h
"

3 
	gSëupExtTempCurv
::
	$SëupExtTempCurv
()

5 
fûeIsSë
=0;

6 
fûeName
="0";

7 
FûeToRód
.
	`£tFûeName
("dataCurve.txt");

8 
d©aRódyFœg
 = 
FûeToRód
.
	`›í
(
QIODevi˚
::
RódWrôe
);

9 if(!
d©aRódyFœg
);

10 
öputD©a
 = 
√w
 
	`QTextSåóm
(&
FûeToRód
);

11 
	}
}

13 
	gSëupExtTempCurv
::~
	$SëupExtTempCurv
()

15 
dñëe
 
öputD©a
;

16 
	}
}

18 
	gSëupExtTempCurv
::
	$ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 )

20 if(!
fûeName
.
	`com∑ª
("0"));

21 i‡(
fûeIsSë
==0) {

22 
dñëe
 
öputD©a
;

23 
FûeToRód
.
	`ª£t
();

24 
FûeToRód
.
	`£tFûeName
(
fûeName
);

25 
d©aRódyFœg
 = 
FûeToRód
.
	`›í
(
QIODevi˚
::
RódWrôe
);

26 if(!
d©aRódyFœg
);

27 
öputD©a
 = 
√w
 
	`QTextSåóm
(&
FûeToRód
);

28 
fûeIsSë
=1;

31 
QSåög
 
löe
;

32 
ªtu∫VÆ
=0;

33 if(!
d©aRódyFœg
) {

34 
ªtu∫VÆ
=100;

36 if(!
öputD©a
->
	`©End
()) {

37 
löe
 = 
öputD©a
->
	`ªadLöe
(10);

38 
	`qDebug
(Ë<<"Newlöêi†\n" << 
löe
;

41 if(!
löe
.
	`com∑ª
("end")) {

42 
ªtu∫VÆ
=0;

43 
	`qDebug
()<<"End";

44 } if(!
löe
.
	`com∑ª
("start")) {

45 
ªtu∫VÆ
=0;

46 
	`qDebug
()<<"Start\n";

48 
	`qDebug
()<<"Conversion: ";

49 
ªtu∫VÆ
=
löe
.
	`toDoubÀ
();

50 
	`qDebug
()<<
ªtu∫VÆ
<<"\n";

53  
ªtu∫VÆ
;

54 
	}
}

	@setupexttempcurv.h

1 #i‚de‡
SETUPEXTTEMPCURV_H


2 
	#SETUPEXTTEMPCURV_H


	)

4 
	~"£tup.h
"

5 
	~<QtC‹e/QFûe
>

6 
	~<QtC‹e/QTextSåóm
>

7 
	~<QtC‹e/QSåög
>

8 
	~<QDebug
>

12 ˛as†
	cSëupExtTempCurv
 : 
public
 
Sëup


14 
public
:

15 
SëupExtTempCurv
();

16 ~
SëupExtTempCurv
();

17 
vútuÆ
 
ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 );

18 
vútuÆ
 
	$ch™geFûeName
(
QSåög
 
Name
)

20 
fûeName
=
Name
;

23 
¥iv©e
:

24 
QFûe
 
FûeToRód
;

25 
QTextSåóm
 *
öputD©a
;

26 
d©aRódyFœg
;

27 
QSåög
 
fûeName
;

28 
fûeIsSë
;

29 
	}
};

	@setuppidcontroll.cpp

1 
	~"£tuµidc⁄åﬁl.h
"

3 
	gSëupPidC⁄åﬁl
::
	$SëupPidC⁄åﬁl
()

5 
	}
}

7 
SëupPidC⁄åﬁl
::~
	$SëupPidC⁄åﬁl
()

10 
	}
}

12 
SëupPidC⁄åﬁl
::
	$ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 )

14 
vÆToRë
=0;

15  
vÆToRë
;

16 
	}
}

	@setuppidcontroll.h

1 #i‚de‡
SETUPPIDCONTROLL_H


2 
	#SETUPPIDCONTROLL_H


	)

4 
	~"£tup.h
"

6 ˛as†
	cSëupPidC⁄åﬁl
 : 
public
 
Sëup


8 
public
:

9 
SëupPidC⁄åﬁl
();

10 ~
SëupPidC⁄åﬁl
();

11 
vútuÆ
 
ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 );

12 
vútuÆ
 
	$ch™geFûeName
(
QSåög
) {};

13 
	}
};

	@setupsolidering.cpp

1 
	~"£tupsﬁidîög.h
"

3 
	gSëupSﬁidîög
::
	$SëupSﬁidîög
()

5 
ãmpToRëu∫
=20;

6 
	}
}

8 
	gSëupSﬁidîög
::~
	$SëupSﬁidîög
()

11 
	}
}

13 
SëupSﬁidîög
::
	$ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 )

17 if(
posôi⁄
<80Ë
ãmpToRëu∫
++;

18 if(
posôi⁄
<140Ë
ãmpToRëu∫
=100;

19 if(
posôi⁄
<280Ë
ãmpToRëu∫
++;

20 if(
posôi⁄
<340);

21 if(
posôi⁄
<440Ë
ãmpToRëu∫
--;

22 if(
ãmpToRëu∫
==0)ÅempToReturn=0;

23  
ãmpToRëu∫
;

24 
	}
}

	@setupsolidering.h

1 #i‚de‡
SETUPSOLIDERING_H


2 
	#SETUPSOLIDERING_H


	)

4 
	~"£tup.h
"

6 ˛as†
	cSëupSﬁidîög
 : 
public
 
Sëup


8 
public
:

9 
SëupSﬁidîög
();

10 ~
SëupSﬁidîög
();

11 
vútuÆ
 
ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 );

12 
vútuÆ
 
	$ch™geFûeName
(
QSåög
) {};

14 
¥iv©e
:

15 
ãmpToRëu∫
;

16 
	}
};

	@setuptempcheck.cpp

1 
	~"£tu±empcheck.h
"

3 
	gSëupTempCheck
::
	$SëupTempCheck
()

5 
	}
}

7 
SëupTempCheck
::~
	$SëupTempCheck
()

10 
	}
}

12 
SëupTempCheck
::
	$ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 )

14 
posôi⁄
=position;

15 
posôi⁄
=0;

16 
ªtu∫VÆ
=
ãmpVÆue
;

17  
ªtu∫VÆ
=0;

18 
	}
}

	@setuptempcheck.h

1 #i‚de‡
SETUPTEMPCHECK_H


2 
	#SETUPTEMPCHECK_H


	)

4 
	~"£tup.h
"

6 ˛as†
	cSëupTempCheck
 : 
public
 
Sëup


8 
public
:

9 
SëupTempCheck
();

10 ~
SëupTempCheck
();

11 
vútuÆ
 
ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 );

12 
vútuÆ
 
	$ch™geFûeName
(
QSåög
) {};

13 
	}
};

	@setuptristate.cpp

1 
	~"£tu±ri°©e.h
"

3 
	gSëupTri°©e
::
	$SëupTri°©e
()

5 
	}
}

7 
SëupTri°©e
::~
	$SëupTri°©e
()

10 
	}
}

12 
SëupTri°©e
::
	$ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 )

14  
ãmpVÆue
;

15 
	}
}

	@setuptristate.h

1 #i‚de‡
SETUPTRISTATE_H


2 
	#SETUPTRISTATE_H


	)

4 
	~"£tup.h
"

6 ˛as†
	cSëupTri°©e
 : 
public
 
Sëup


8 
public
:

9 
SëupTri°©e
();

10 ~
SëupTri°©e
();

11 
vútuÆ
 
ªtu∫Temp
(
posôi⁄
 ,
ãmpVÆue
 );

12 
vútuÆ
 
	$ch™geFûeName
(
QSåög
) {};

13 
	}
};

	@tempTable.h

1 #i‚de‡
TEMPTABLE_H


2 
	#TEMPTABLE_H


	)

3 
	~<QVe˘‹
>

20 
u_öt16_t
 
	gãmpTabÀ
[]= {

26 
u_öt8_t
 
	gdñtTabÀ
[]= {

31 
	$ãmp_föd
(
uöt16_t
 
ADC
)

33 
ãm≥øtuª
=0;

34 
i
=0;

35 
ãmpTabÀ
[
i
]>
ADC
)

36 
i
++;

42 
mu…ùly
;

43 if(
dñtTabÀ
[
i
]) {

44 
mu…ùly
 = 5/()(
dñtTabÀ
[
i
]);

46 
mu…ùly
 = 0;

48 
ãm≥øtuª

i
*5 + (
ADC
 - 
ãmpTabÀ
[i])*
mu…ùly
;

49  
ãm≥øtuª
;

50 
	}
}

52 
u_öt16_t
 
	$ãmp_to_£nd
(
ãmp
)

60 
öãgøl
 = (
uöt
)(
ãmp
)/5;

61 
hundªth
 = 
ãmp
 - (
uöt
)temp;

62 
u_öt16_t
 
ãmp_to_Së
 = 
ãmpTabÀ
[
öãgøl
] + 
dñtTabÀ
[öãgøl]*
hundªth
/5;

63  
ãmp_to_Së
;

64 
	}
}

	@usbdevcon.cpp

1 
	~"usbdevc⁄.h
"

3 
	gUsbDevC⁄
::
	$UsbDevC⁄
(
ö_dev_numbî
)

5 
i
=0; i<8; i++) {

6 
buf„r
[
i
]=0;

8 
dev_numbî
=
ö_dev_numbî
;

9 if(0 > 
	`libusb_›í
(
devi˚
[
dev_numbî
],&
devi˚_h™dÀ
)Ë
dev_›í
 = -1;

11 
dev_›í
=1;

12 
im™uÁ˘uªr
 = 
	`libusb_gë_°rög_des¸ùt‹_ascii
(
devi˚_h™dÀ
,
devi˚_des¸ùt‹
.
iM™uÁ˘uªr
,
°rög_buf„r_m™uÁ˘uªr
,(string_buffer_manufacturer));

13 if(0 > 
	`libusb_gë_°rög_des¸ùt‹_ascii
(
devi˚_h™dÀ
,
devi˚_des¸ùt‹
.
iProdu˘
,
°rög_buf„r_¥odu˘
,(°rög_buf„r_¥odu˘)ËË
desc_to_asci
=-1;

15 
desc_to_asci
 = 1;

17 
cc_m™uÁ˘uªr
 = (c⁄° *)
°rög_buf„r_m™uÁ˘uªr
;

18 
m™uÁ˘uªr
 = 
cc_m™uÁ˘uªr
;

20 
cc_¥odu˘
 = (c⁄° *)
°rög_buf„r_¥odu˘
;

21 
¥odu˘
 = 
cc_¥odu˘
;

24 
	}
}

26 
	gUsbDevC⁄
::~
	$UsbDevC⁄
()

28 
	`libusb_˛o£
(
devi˚_h™dÀ
);

29 
	}
}

	@usbdevcon.h

1 #i‚de‡
USBSIMPLECONT_H


2 
	#USBSIMPLECONT_H


	)

4 
	~<libusb-1.0/libusb.h
>

5 
	~<QSåög
>

18 ˛as†
	cUsbDevC⁄


20 
	mpublic
:

21 
UsbDevC⁄
(
ö_dev_numbî
);

22 ~
UsbDevC⁄
();

23 
usbC⁄e˘
();

25 
£ndHidD©a
(
u_öt8_t
* 
d©a_èbÀ
,u_öt8_à
Ànght
);

27 
	m¥iv©e
:

28 
dev_numbî
;

29 
	mîr‹_Êag
 , 
	mdev_›í
, 
	mdesc_to_asci
, 
	mim™uÁ˘uªr
;

30 
QSåög
 
	mm™uÁ˘uªr
,
	m¥odu˘
;

31 
libusb_devi˚_h™dÀ
 *
	mdevi˚_h™dÀ
;

32 
libusb_devi˚_des¸ùt‹
 
	mdevi˚_des¸ùt‹
;

33 
libusb_devi˚
 **
	mdevi˚
;

34 
libusb_c⁄ãxt
 *
	m˘x
;

35 
	m°rög_buf„r_m™uÁ˘uªr
[4096];

36 
	m°rög_buf„r_¥odu˘
[4096];

37 c⁄° *
	mcc_m™uÁ˘uªr
;

38 c⁄° *
	mcc_¥odu˘
;

39 
uch¨
 
	mbuf„r
[8];

	@
1
.
0
55
1034
AVR_Code/PORT/ascii.h
AVR_Code/PORT/main.c
AVR_Code/PORT/main.h
AVR_Code/PORT/n5110.c
AVR_Code/PORT/n5110.h
AVR_Code/PORT/periphs.c
AVR_Code/PORT/periphs.h
AVR_Code/PORT/pid.h
AVR_Code/PORT/pt1000.h
AVR_Code/PORT/spi.c
AVR_Code/PORT/spi.h
AVR_Code/adc.c
AVR_Code/adc.h
AVR_Code/ascii.h
AVR_Code/main.c
AVR_Code/n5110.c
AVR_Code/n5110.h
AVR_Code/spi.c
AVR_Code/spi.h
AVR_Code/temptable.h
AVR_Code/usbdrv/oddebug.c
AVR_Code/usbdrv/oddebug.h
AVR_Code/usbdrv/usbconfig.h
AVR_Code/usbdrv/usbdrv.c
AVR_Code/usbdrv/usbdrv.h
AVR_Code/usbdrv/usbportability.h
QtUsb/baseinfo.cpp
QtUsb/baseinfo.h
QtUsb/main-window.cpp
QtUsb/main-window.h
QtUsb/main.cpp
QtUsb/usb-container.cpp
QtUsb/usb-container.h
QtUsb/usbdev.cpp
QtUsb/usbdev.h
main.cpp
mainwindow.cpp
mainwindow.h
setup.cpp
setup.h
setupbistate.cpp
setupbistate.h
setupexttempcurv.cpp
setupexttempcurv.h
setuppidcontroll.cpp
setuppidcontroll.h
setupsolidering.cpp
setupsolidering.h
setuptempcheck.cpp
setuptempcheck.h
setuptristate.cpp
setuptristate.h
tempTable.h
usbdevcon.cpp
usbdevcon.h
